commit 6d6bf129448e87b9c0e8c593a98b1f80a7e1d9ce
Author: gitgabrio <gabriele.cardosi@gmail.com>
Date:   Tue Dec 20 11:24:58 2022 +0100

    [kie-issues#56] Solve PMML issues

diff --git a/build-parent/pom.xml b/build-parent/pom.xml
index 3a0b710d34..d3cdc76676 100644
--- a/build-parent/pom.xml
+++ b/build-parent/pom.xml
@@ -81,7 +81,9 @@
     <version.org.hibernate>5.6.12.Final</version.org.hibernate>
     <version.org.hsqldb>2.3.0</version.org.hsqldb>
     <version.org.javassist>3.26.0-GA</version.org.javassist>
+    <!-- To be simply collapsed into version.org.jboss.narayana ? -->
     <version.org.jboss.narayana.tomcat>5.13.1.Final</version.org.jboss.narayana.tomcat>
+    <version.org.jboss.narayana.jta.narayana-jta-jakarta>5.13.1.Final</version.org.jboss.narayana.jta.narayana-jta-jakarta>
     <version.org.jboss.transaction.spi>7.6.1.Final</version.org.jboss.transaction.spi>
     <version.org.jboss.weld.weld>3.1.6.Final</version.org.jboss.weld.weld>
     <version.jakarta.enterprise.cdi-api>4.0.1</version.jakarta.enterprise.cdi-api>
@@ -100,7 +102,7 @@
     <version.jakarta.xml.bind-api>4.0.0</version.jakarta.xml.bind-api>
     <version.jakarta.json.bind-api>3.0.0</version.jakarta.json.bind-api>
     <version.jakarta.json-api>2.1.1</version.jakarta.json-api>
-    <version.org.jpmml.model>1.5.1</version.org.jpmml.model> <!-- jpmml-model BSD 3C license - ATTENTION 1.5.1 intentional, because 1.5.1 evaluators works with 1.5.1 -->
+    <version.org.jpmml.model>1.6.4</version.org.jpmml.model> <!-- jpmml-model BSD 3C license - ATTENTION 1.6.4 is the latest version - upgraded to match jakarta usage -->
     <version.org.junit>5.9.1</version.org.junit>
     <version.org.mvel>2.4.14.Final</version.org.mvel>
     <version.org.powermock>2.0.7</version.org.powermock>
diff --git a/drools-persistence/drools-persistence-jpa/pom.xml b/drools-persistence/drools-persistence-jpa/pom.xml
index c3d12eab43..03d94432be 100644
--- a/drools-persistence/drools-persistence-jpa/pom.xml
+++ b/drools-persistence/drools-persistence-jpa/pom.xml
@@ -66,6 +66,12 @@
         <artifactId>weld-se-core</artifactId>
         <version>${version.org.jboss.weld.weld}</version>
       </dependency>
+      <dependency>
+        <groupId>org.jboss.narayana.jta</groupId>
+        <artifactId>narayana-jta-jakarta</artifactId>
+        <scope>test</scope>
+        <version>${version.org.jboss.narayana.jta.narayana-jta-jakarta}</version>
+      </dependency>
     </dependencies>
   </dependencyManagement>
 
@@ -163,7 +169,8 @@
           <artifactId>jaxb-runtime</artifactId>
         </exclusion>
       </exclusions>
-      <version>5.6.14.Final</version>
+      <!-- Different version declared in parent: important ? -->
+<!--      <version>5.6.14.Final</version>-->
     </dependency>
 
     <!-- Logging -->
@@ -186,7 +193,6 @@
       <groupId>org.jboss.narayana.jta</groupId>
       <artifactId>narayana-jta-jakarta</artifactId>
       <scope>test</scope>
-      <version>5.13.1.Final</version>
     </dependency>
     <dependency>
       <groupId>org.jboss</groupId>
diff --git a/drools-traits/pom.xml b/drools-traits/pom.xml
index 80157c10c1..c3256886a3 100644
--- a/drools-traits/pom.xml
+++ b/drools-traits/pom.xml
@@ -36,6 +36,17 @@
     <maven.jdbc.schema>public</maven.jdbc.schema>
   </properties>
 
+  <dependencyManagement>
+    <dependencies>
+      <dependency>
+        <groupId>org.jboss.narayana.jta</groupId>
+        <artifactId>narayana-jta-jakarta</artifactId>
+        <scope>test</scope>
+        <version>${version.org.jboss.narayana.jta.narayana-jta-jakarta}</version>
+      </dependency>
+    </dependencies>
+  </dependencyManagement>
+
   <dependencies>
 
     <dependency>
@@ -130,7 +141,6 @@
       <groupId>org.jboss.narayana.jta</groupId>
       <artifactId>narayana-jta-jakarta</artifactId>
       <scope>test</scope>
-      <version>5.13.1.Final</version>
     </dependency>
     <dependency>
       <groupId>org.jboss</groupId>
@@ -149,7 +159,8 @@
           <artifactId>jaxb-runtime</artifactId>
         </exclusion>
       </exclusions>
-      <version>5.6.14.Final</version>
+      <!-- Different version declared in parent: important ? -->
+<!--      <version>5.6.14.Final</version>-->
     </dependency>
     <dependency>
       <groupId>org.hibernate</groupId>
diff --git a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/DMNImportPMMLInfo.java b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/DMNImportPMMLInfo.java
index 7c3bb1c197..44578e11f4 100644
--- a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/DMNImportPMMLInfo.java
+++ b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/DMNImportPMMLInfo.java
@@ -62,7 +62,7 @@ public class DMNImportPMMLInfo extends PMMLInfo<DMNPMMLModelInfo> {
             final PMML pmml = org.jpmml.model.PMMLUtil.unmarshal(is);
             PMMLHeaderInfo h = PMMLInfo.pmmlToHeaderInfo(pmml, pmml.getHeader());
             for (DataField df : pmml.getDataDictionary().getDataFields()) {
-                String dfName = df.getName().getValue();
+                String dfName = df.getName();
                 BuiltInType ft = getBuiltInTypeByDataType(df.getDataType());
                 List<FEELProfile> helperFEELProfiles = cc.getFeelProfiles();
                 DMNFEELHelper feel = new DMNFEELHelper(cc.getRootClassLoader(), helperFEELProfiles);
@@ -118,7 +118,7 @@ public class DMNImportPMMLInfo extends PMMLInfo<DMNPMMLModelInfo> {
                 // register <import name>.<pmml MODEL name>, being a composite type of the different model outputs fields
                 Map<String, DMNType> typeMap = new HashMap<>();
                 outputFields.stream().forEach(field -> {
-                    String fieldName = field.getName().getValue();
+                    String fieldName = field.getName();
                     BuiltInType ft = getBuiltInTypeByDataType(field.getDataType());
                     DMNType type = new SimpleTypeImpl(i.getNamespace(), fieldName, null, false, null, dmnModel.getTypeRegistry().resolveType(dmnModel.getDefinitions().getURIFEEL(), ft.getName()), ft);
                     typeMap.put(fieldName, type);
diff --git a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/PMMLInfo.java b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/PMMLInfo.java
index 2aaaf4b9fd..ee1c32c36d 100644
--- a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/PMMLInfo.java
+++ b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/PMMLInfo.java
@@ -24,6 +24,8 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+import javax.xml.parsers.ParserConfigurationException;
+
 import jakarta.xml.bind.JAXBException;
 
 import org.dmg.pmml.Extension;
@@ -44,7 +46,7 @@ public class PMMLInfo<M extends PMMLModelInfo> {
         this.header = header;
     }
 
-    public static PMMLInfo<PMMLModelInfo> from(InputStream is) throws SAXException, JAXBException {
+    public static PMMLInfo<PMMLModelInfo> from(InputStream is) throws SAXException, JAXBException, ParserConfigurationException {
         PMML pmml = org.jpmml.model.PMMLUtil.unmarshal(is);
         List<PMMLModelInfo> models = new ArrayList<>();
         for (Model pm : pmml.getModels()) {
@@ -68,15 +70,15 @@ public class PMMLInfo<M extends PMMLModelInfo> {
         miningSchema.getMiningFields()
                     .stream()
                     .filter(mf -> mf.getUsageType() == UsageType.ACTIVE)
-                    .forEach(fn -> inputFields.add(fn.getName().getValue()));
+                    .forEach(fn -> inputFields.add(fn.getName()));
         Collection<String> targetFields = new ArrayList<>();
         miningSchema.getMiningFields()
                     .stream()
                     .filter(mf -> mf.getUsageType() == UsageType.PREDICTED)
-                    .forEach(fn -> targetFields.add(fn.getName().getValue()));
+                    .forEach(fn -> targetFields.add(fn.getName()));
         Collection<String> outputFields = new ArrayList<>();
         if (pm.getOutput() != null && pm.getOutput().getOutputFields() != null) {
-            pm.getOutput().getOutputFields().forEach(of -> outputFields.add(of.getName().getValue()));
+            pm.getOutput().getOutputFields().forEach(of -> outputFields.add(of.getName()));
         }
         return new PMMLModelInfo(pm.getModelName(), pm.getClass().getSimpleName(), inputFields, targetFields, outputFields);
     }
diff --git a/kie-dmn/kie-dmn-ruleset2dmn-parent/kie-dmn-ruleset2dmn/src/main/java/org/kie/dmn/ruleset2dmn/Converter.java b/kie-dmn/kie-dmn-ruleset2dmn-parent/kie-dmn-ruleset2dmn/src/main/java/org/kie/dmn/ruleset2dmn/Converter.java
index e3847ac4c6..d9a945ec77 100644
--- a/kie-dmn/kie-dmn-ruleset2dmn-parent/kie-dmn-ruleset2dmn/src/main/java/org/kie/dmn/ruleset2dmn/Converter.java
+++ b/kie-dmn/kie-dmn-ruleset2dmn-parent/kie-dmn-ruleset2dmn/src/main/java/org/kie/dmn/ruleset2dmn/Converter.java
@@ -36,7 +36,6 @@ import javax.xml.namespace.QName;
 import org.dmg.pmml.DataDictionary;
 import org.dmg.pmml.DataField;
 import org.dmg.pmml.DataType;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.Model;
 import org.dmg.pmml.PMML;
 import org.dmg.pmml.SimplePredicate;
@@ -145,8 +144,7 @@ public class Converter {
             for (String input : usedPredictors) {
                 List<SimplePredicate> predicatesForInput = r.map.get(input);
                 if (predicatesForInput != null && !predicatesForInput.isEmpty())  {
-                    FieldName fnLookup = FieldName.create(input);
-                    Optional<DataField> df = pmml.getDataDictionary().getDataFields().stream().filter(x-> x.getName().equals(fnLookup)).findFirst();
+                    Optional<DataField> df = pmml.getDataDictionary().getDataFields().stream().filter(x-> x.getName().equals(input)).findFirst();
                     UnaryTests ut = processSimplePredicateUnaryOrBinary(predicatesForInput, df);
                     if (ut.getText().startsWith("\"") && ut.getText().endsWith("\"")) {
                         predictorsLoVs.computeIfAbsent(input, k -> new LinkedHashSet<String>()).add(ut.getText());
@@ -197,9 +195,9 @@ public class Converter {
         }
 
         for (DataField df : pmml.getDataDictionary().getDataFields()) {
-            if (df.getDataType() == DataType.STRING && predictorsLoVs.containsKey(df.getName().getValue())) {
+            if (df.getDataType() == DataType.STRING && predictorsLoVs.containsKey(df.getName())) {
                 for (Value value : df.getValues()) {
-                    predictorsLoVs.get(df.getName().getValue()).add("\""+value.getValue().toString()+"\"");
+                    predictorsLoVs.get(df.getName()).add("\""+value.getValue().toString()+"\"");
                 }
             }
         }
@@ -479,8 +477,7 @@ public class Converter {
     }
 
     private static String feelTypeFromDD(DataDictionary dd, String id) {
-        FieldName lookup = FieldName.create(id);
-        Optional<DataField> opt = dd.getDataFields().stream().filter(df -> df.getName().equals(lookup)).findFirst();
+        Optional<DataField> opt = dd.getDataFields().stream().filter(df -> df.getName().equals(id)).findFirst();
         if (!opt.isPresent()) {
             return "Any";
         }
diff --git a/kie-dmn/kie-dmn-ruleset2dmn-parent/kie-dmn-ruleset2dmn/src/main/java/org/kie/dmn/ruleset2dmn/SimpleRuleRow.java b/kie-dmn/kie-dmn-ruleset2dmn-parent/kie-dmn-ruleset2dmn/src/main/java/org/kie/dmn/ruleset2dmn/SimpleRuleRow.java
index f5b19f4e05..25171444d1 100644
--- a/kie-dmn/kie-dmn-ruleset2dmn-parent/kie-dmn-ruleset2dmn/src/main/java/org/kie/dmn/ruleset2dmn/SimpleRuleRow.java
+++ b/kie-dmn/kie-dmn-ruleset2dmn-parent/kie-dmn-ruleset2dmn/src/main/java/org/kie/dmn/ruleset2dmn/SimpleRuleRow.java
@@ -37,7 +37,7 @@ public class SimpleRuleRow {
         Predicate rootPredicate = r.getPredicate();
         if (rootPredicate instanceof SimplePredicate) {
             SimplePredicate sp = (SimplePredicate) rootPredicate;
-            map.computeIfAbsent(sp.getField().getValue(), k -> new ArrayList<SimplePredicate>()).add(sp);
+            map.computeIfAbsent(sp.getField(), k -> new ArrayList<SimplePredicate>()).add(sp);
         } else {
             if (!(rootPredicate instanceof CompoundPredicate)) {
                 throw new UnsupportedOperationException("Was expecting a CompoundPredicate, found: "+rootPredicate.getClass());
@@ -48,7 +48,7 @@ public class SimpleRuleRow {
             }
             for (Predicate c : cPredicate.getPredicates()) {
                 SimplePredicate sp = (SimplePredicate) c;
-                map.computeIfAbsent(sp.getField().getValue(), k -> new ArrayList<SimplePredicate>()).add(sp);
+                map.computeIfAbsent(sp.getField(), k -> new ArrayList<SimplePredicate>()).add(sp);
             }
         }
     }
diff --git a/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/package-info.java b/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/package-info.java
index 9b27fa3be2..9fb6a6eafb 100644
--- a/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/package-info.java
+++ b/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/package-info.java
@@ -1,6 +1,6 @@
 // Copied under Apache License from https://github.com/dmn-tck/tck/blob/8c23dc13caa508a33d11b47cca318d7c3a3ca2fc/LICENSE-ASL-2.0.txt
-@javax.xml.bind.annotation.XmlSchema(namespace = "http://www.omg.org/spec/DMN/20160719/testcase",
-                                     elementFormDefault = javax.xml.bind.annotation.XmlNsForm.QUALIFIED,
+@jakarta.xml.bind.annotation.XmlSchema(namespace = "http://www.omg.org/spec/DMN/20160719/testcase",
+                                     elementFormDefault = jakarta.xml.bind.annotation.XmlNsForm.QUALIFIED,
                                      xmlns = {@XmlNs(prefix = "tc", namespaceURI = "http://www.omg.org/spec/DMN/20160719/testcase")})
 package org.kie.dmn.validation.dtanalysis.mcdc.dmntck;
 
diff --git a/kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/enums/builtinfunctions/StringFunctions.java b/kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/enums/builtinfunctions/StringFunctions.java
index c3b2532c1a..98fbaf061a 100644
--- a/kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/enums/builtinfunctions/StringFunctions.java
+++ b/kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/enums/builtinfunctions/StringFunctions.java
@@ -17,6 +17,7 @@ package org.kie.pmml.api.enums.builtinfunctions;
 
 import java.util.Arrays;
 import java.util.Date;
+import java.util.Locale;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
@@ -154,7 +155,7 @@ public enum StringFunctions {
         checkString(inputData[1]);
         Number input = (Number) inputData[0];
         String pattern = ((String) inputData[1]);
-        return String.format(pattern, input);
+        return String.format(Locale.US, pattern, input);
     }
 
     private String formatDatetime(final Object[] inputData) {
diff --git a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/expressions/KiePMMLApply.java b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/expressions/KiePMMLApply.java
index 4056bf8a60..66d41e9960 100644
--- a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/expressions/KiePMMLApply.java
+++ b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/expressions/KiePMMLApply.java
@@ -36,8 +36,8 @@ public class KiePMMLApply extends AbstractKiePMMLComponent implements KiePMMLExp
 
     private static final long serialVersionUID = -6975232157053159223L;
     private final String function;
-    private String mapMissingTo;
-    private String defaultValue;
+    private Object mapMissingTo;
+    private Object defaultValue;
     private INVALID_VALUE_TREATMENT_METHOD invalidValueTreatmentMethod;
     private List<KiePMMLExpression> kiePMMLExpressions;
 
@@ -84,11 +84,11 @@ public class KiePMMLApply extends AbstractKiePMMLComponent implements KiePMMLExp
         return function;
     }
 
-    public String getMapMissingTo() {
+    public Object getMapMissingTo() {
         return mapMissingTo;
     }
 
-    public String getDefaultValue() {
+    public Object getDefaultValue() {
         return defaultValue;
     }
 
@@ -138,14 +138,14 @@ public class KiePMMLApply extends AbstractKiePMMLComponent implements KiePMMLExp
             super("Apply-", () -> new KiePMMLApply(name, extensions, function));
         }
 
-        public Builder withMapMissingTo(String mapMissingTo) {
+        public Builder withMapMissingTo(Object mapMissingTo) {
             if (mapMissingTo != null) {
                 toBuild.mapMissingTo = mapMissingTo;
             }
             return this;
         }
 
-        public Builder withDefaultValue(String defaultValue) {
+        public Builder withDefaultValue(Object defaultValue) {
             if (defaultValue != null) {
                 toBuild.defaultValue = defaultValue;
             }
diff --git a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/expressions/KiePMMLFieldRef.java b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/expressions/KiePMMLFieldRef.java
index 25cc253ea9..91038141db 100644
--- a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/expressions/KiePMMLFieldRef.java
+++ b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/expressions/KiePMMLFieldRef.java
@@ -30,14 +30,14 @@ import static org.kie.pmml.commons.model.expressions.ExpressionsUtils.getFromPos
 public class KiePMMLFieldRef extends AbstractKiePMMLComponent implements KiePMMLExpression {
 
     private static final long serialVersionUID = 4576394527423997787L;
-    private String mapMissingTo;
+    private Object mapMissingTo;
 
-    public KiePMMLFieldRef(String name, List<KiePMMLExtension> extensions, String mapMissingTo) {
+    public KiePMMLFieldRef(String name, List<KiePMMLExtension> extensions, Object mapMissingTo) {
         super(name, extensions);
         this.mapMissingTo = mapMissingTo;
     }
 
-    public String getMapMissingTo() {
+    public Object getMapMissingTo() {
         return mapMissingTo;
     }
 
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/dto/CommonCompilationDTO.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/dto/CommonCompilationDTO.java
index faeebf018f..5eaca5db00 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/dto/CommonCompilationDTO.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/dto/CommonCompilationDTO.java
@@ -116,7 +116,7 @@ public class CommonCompilationDTO<T extends Model> implements CompilationDTO<T>
             targetDataField = this.fields.stream()
                     .filter(DataField.class::isInstance)
                     .map(DataField.class::cast)
-                    .filter(field -> Objects.equals(getTargetFieldName(), field.getName().getValue()))
+                    .filter(field -> Objects.equals(getTargetFieldName(), field.getName()))
                     .findFirst().orElse(null);
         } else {
             targetDataField = null;
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/utils/ModelUtils.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/utils/ModelUtils.java
index 8f99b7d8c8..d54c813233 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/utils/ModelUtils.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/utils/ModelUtils.java
@@ -48,8 +48,8 @@ import org.dmg.pmml.TargetValue;
 import org.dmg.pmml.Targets;
 import org.dmg.pmml.TransformationDictionary;
 import org.dmg.pmml.Value;
-import org.jpmml.model.inlinetable.InputCell;
-import org.jpmml.model.inlinetable.OutputCell;
+import org.jpmml.model.cells.InputCell;
+import org.jpmml.model.cells.OutputCell;
 import org.kie.pmml.api.enums.CAST_INTEGER;
 import org.kie.pmml.api.enums.DATA_TYPE;
 import org.kie.pmml.api.enums.FIELD_USAGE_TYPE;
@@ -120,8 +120,8 @@ public class ModelUtils {
         if (model.getMiningSchema() != null && model.getMiningSchema().getMiningFields() != null) {
             for (MiningField miningField : model.getMiningSchema().getMiningFields()) {
                 if (MiningField.UsageType.TARGET.equals(miningField.getUsageType()) || MiningField.UsageType.PREDICTED.equals(miningField.getUsageType())) {
-                    OP_TYPE opType = getOpType(fields, model, miningField.getName().getValue());
-                    toReturn.add(new KiePMMLNameOpType(miningField.getName().getValue(), opType));
+                    OP_TYPE opType = getOpType(fields, model, miningField.getName());
+                    toReturn.add(new KiePMMLNameOpType(miningField.getName(), opType));
                 }
             }
         }
@@ -142,8 +142,8 @@ public class ModelUtils {
         if (model.getMiningSchema() != null && model.getMiningSchema().getMiningFields() != null) {
             for (MiningField miningField : model.getMiningSchema().getMiningFields()) {
                 if (MiningField.UsageType.TARGET.equals(miningField.getUsageType()) || MiningField.UsageType.PREDICTED.equals(miningField.getUsageType())) {
-                    toReturn.put(miningField.getName().getValue(), getDATA_TYPE(fields,
-                                                                                miningField.getName().getValue()));
+                    toReturn.put(miningField.getName(), getDATA_TYPE(fields,
+                                                                                miningField.getName()));
                 }
             }
         }
@@ -179,7 +179,7 @@ public class ModelUtils {
                                                         final String fieldName) {
         return fields == null ? Optional.empty() :
                 fields.stream()
-                        .filter(dataField -> Objects.equals(fieldName, dataField.getName().getValue()) && dataField.getOpType() != null)
+                        .filter(dataField -> Objects.equals(fieldName, dataField.getName()) && dataField.getOpType() != null)
                         .map(dataField -> OP_TYPE.byName(dataField.getOpType().value()))
                         .findFirst();
     }
@@ -193,7 +193,7 @@ public class ModelUtils {
     public static Optional<OP_TYPE> getOpTypeFromMiningFields(MiningSchema miningSchema, String fieldName) {
         if (miningSchema != null && miningSchema.getMiningFields() != null) {
             return miningSchema.getMiningFields().stream()
-                    .filter(miningField -> Objects.equals(fieldName, miningField.getName().getValue()) && miningField.getOpType() != null)
+                    .filter(miningField -> Objects.equals(fieldName, miningField.getName()) && miningField.getOpType() != null)
                     .findFirst()
                     .map(dataField -> OP_TYPE.byName(dataField.getOpType().value()));
         } else {
@@ -210,7 +210,7 @@ public class ModelUtils {
     public static Optional<OP_TYPE> getOpTypeFromTargets(Targets targets, String fieldName) {
         if (targets != null && targets.getTargets() != null) {
             return targets.getTargets().stream()
-                    .filter(target -> Objects.equals(fieldName, target.getField().getValue()) && target.getOpType() != null)
+                    .filter(target -> Objects.equals(fieldName, target.getField()) && target.getOpType() != null)
                     .findFirst()
                     .map(dataField -> OP_TYPE.byName(dataField.getOpType().value()));
         } else {
@@ -228,7 +228,7 @@ public class ModelUtils {
     public static DataType getDataType(final List<Field<?>> fields,
                                        final String fieldName) {
         return fields.stream()
-                .filter(fld -> Objects.equals(fieldName, fld.getName().getValue()))
+                .filter(fld -> Objects.equals(fieldName, fld.getName()))
                 .map(Field::getDataType)
                 .findFirst()
                 .orElseThrow(() -> new KiePMMLInternalException(String.format("Failed to find DataType for " +
@@ -244,7 +244,7 @@ public class ModelUtils {
      */
     public static DATA_TYPE getDATA_TYPE(final List<Field<?>> fields, String fieldName) {
         Optional<DATA_TYPE> toReturn = fields.stream()
-                .filter(fld -> Objects.equals(fieldName, fld.getName().getValue()))
+                .filter(fld -> Objects.equals(fieldName, fld.getName()))
                 .findFirst()
                 .map(dataField -> DATA_TYPE.byName(dataField.getDataType().value()));
         return toReturn.orElseThrow(() -> new KiePMMLInternalException(String.format("Failed to find DATA_TYPE for " +
@@ -328,7 +328,7 @@ public class ModelUtils {
      */
     public static org.kie.pmml.api.models.MiningField convertToKieMiningField(final MiningField toConvert,
                                                                               final Field<?> field) {
-        final String name = toConvert.getName() != null ? toConvert.getName().getValue() : null;
+        final String name = toConvert.getName() != null ? toConvert.getName() : null;
         final FIELD_USAGE_TYPE fieldUsageType = toConvert.getUsageType() != null ?
                 FIELD_USAGE_TYPE.byName(toConvert.getUsageType().value()) : null;
         final OP_TYPE opType = toConvert.getOpType() != null ? OP_TYPE.byName(toConvert.getOpType().value()) : null;
@@ -405,13 +405,13 @@ public class ModelUtils {
      */
     public static org.kie.pmml.api.models.OutputField convertToKieOutputField(final OutputField toConvert,
                                                                               final Field<?> field) {
-        final String name = toConvert.getName() != null ? toConvert.getName().getValue() : null;
+        final String name = toConvert.getName() != null ? toConvert.getName() : null;
         final OP_TYPE opType = toConvert.getOpType() != null ? OP_TYPE.byName(toConvert.getOpType().value()) : null;
         final DATA_TYPE dataFieldDataType = field != null ? DATA_TYPE.byName(field.getDataType().value()) :
                 null;
         final DATA_TYPE dataType = toConvert.getDataType() != null ?
                 DATA_TYPE.byName(toConvert.getDataType().value()) : dataFieldDataType;
-        final String targetField = toConvert.getTargetField() != null ? toConvert.getTargetField().getValue() : null;
+        final String targetField = toConvert.getTargetField() != null ? toConvert.getTargetField() : null;
         final RESULT_FEATURE resultFeature = toConvert.getResultFeature() != null ?
                 RESULT_FEATURE.byName(toConvert.getResultFeature().value()) : null;
         final List<String> allowedValues = field instanceof DataField ?
@@ -457,7 +457,7 @@ public class ModelUtils {
         final Double rescaleFactor = toConvert.getRescaleFactor() != null ? toConvert.getRescaleFactor().doubleValue() : null;
         return new TargetField(targetValues,
                                opType,
-                               toConvert.getField().getValue(),
+                               toConvert.getField(),
                                castInteger,
                                min,
                                max,
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/mocks/TestModel.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/mocks/TestModel.java
index 29e0f7b7d0..a635d62d9a 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/mocks/TestModel.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/mocks/TestModel.java
@@ -64,6 +64,16 @@ public class TestModel extends Model {
         return this;
     }
 
+    @Override
+    public MiningFunction requireMiningFunction() {
+        return null;
+    }
+
+    @Override
+    public MiningSchema requireMiningSchema() {
+        return null;
+    }
+
     public String getAlgorithmName() {
         return this.algorithmName;
     }
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/PMMLModelTestUtils.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/PMMLModelTestUtils.java
index 9c855e91bc..b370a119a7 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/PMMLModelTestUtils.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/PMMLModelTestUtils.java
@@ -28,6 +28,7 @@ import org.dmg.pmml.Apply;
 import org.dmg.pmml.Array;
 import org.dmg.pmml.CompareFunction;
 import org.dmg.pmml.ComparisonMeasure;
+import org.dmg.pmml.ComplexScoreDistribution;
 import org.dmg.pmml.CompoundPredicate;
 import org.dmg.pmml.Constant;
 import org.dmg.pmml.DataDictionary;
@@ -40,7 +41,6 @@ import org.dmg.pmml.DiscretizeBin;
 import org.dmg.pmml.Euclidean;
 import org.dmg.pmml.Field;
 import org.dmg.pmml.FieldColumnPair;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.FieldRef;
 import org.dmg.pmml.InlineTable;
 import org.dmg.pmml.Interval;
@@ -64,6 +64,7 @@ import org.dmg.pmml.ParameterField;
 import org.dmg.pmml.ResultFeature;
 import org.dmg.pmml.Row;
 import org.dmg.pmml.ScoreDistribution;
+import org.dmg.pmml.ScoreProbability;
 import org.dmg.pmml.SimplePredicate;
 import org.dmg.pmml.SimpleSetPredicate;
 import org.dmg.pmml.TableLocator;
@@ -86,8 +87,8 @@ import org.dmg.pmml.regression.NumericPredictor;
 import org.dmg.pmml.regression.PredictorTerm;
 import org.dmg.pmml.regression.RegressionModel;
 import org.dmg.pmml.regression.RegressionTable;
-import org.jpmml.model.inlinetable.InputCell;
-import org.jpmml.model.inlinetable.OutputCell;
+import org.jpmml.model.cells.InputCell;
+import org.jpmml.model.cells.OutputCell;
 import org.kie.pmml.api.enums.DATA_TYPE;
 import org.kie.pmml.api.enums.Named;
 import org.kie.pmml.api.enums.RESULT_FEATURE;
@@ -191,7 +192,7 @@ public class PMMLModelTestUtils {
         miningSchema.addMiningFields(predictedMiningField);
         Output output = new Output();
         OutputField outputField = new OutputField();
-        outputField.setName(FieldName.create("OUTPUT_" + lastDataField.getName().getValue()));
+        outputField.setName("OUTPUT_" + lastDataField.getName());
         outputField.setDataType(lastDataField.getDataType());
         outputField.setOpType(getRandomOpType());
         toReturn.setModelName(RandomStringUtils.random(6, true, false));
@@ -219,7 +220,7 @@ public class PMMLModelTestUtils {
         miningSchema.addMiningFields(predictedMiningField);
         Output output = new Output();
         OutputField outputField = new OutputField();
-        outputField.setName(FieldName.create("OUTPUT_" + lastDataField.getName().getValue()));
+        outputField.setName("OUTPUT_" + lastDataField.getName());
         outputField.setDataType(lastDataField.getDataType());
         outputField.setOpType(getRandomOpType());
         toReturn.setModelName(RandomStringUtils.random(6, true, false));
@@ -279,7 +280,7 @@ public class PMMLModelTestUtils {
 
     public static CategoricalPredictor getCategoricalPredictor(String name, double value, double coefficient) {
         CategoricalPredictor toReturn = new CategoricalPredictor();
-        toReturn.setField(FieldName.create(name));
+        toReturn.setField(name);
         toReturn.setValue(value);
         toReturn.setCoefficient(coefficient);
         return toReturn;
@@ -287,7 +288,7 @@ public class PMMLModelTestUtils {
 
     public static NumericPredictor getNumericPredictor(String name, int exponent, double coefficient) {
         NumericPredictor toReturn = new NumericPredictor();
-        toReturn.setField(FieldName.create(name));
+        toReturn.setField(name);
         toReturn.setExponent(exponent);
         toReturn.setCoefficient(coefficient);
         return toReturn;
@@ -295,7 +296,7 @@ public class PMMLModelTestUtils {
 
     public static PredictorTerm getPredictorTerm(String name, double coefficient, List<String> fieldRefNames) {
         PredictorTerm toReturn = new PredictorTerm();
-        toReturn.setName(FieldName.create(name));
+        toReturn.setName(name);
         toReturn.setCoefficient(coefficient);
         toReturn.addFieldRefs(fieldRefNames.stream().map(PMMLModelTestUtils::getFieldRef).toArray(FieldRef[]::new));
         return toReturn;
@@ -320,7 +321,7 @@ public class PMMLModelTestUtils {
 
     public static DataField getDataField(String fieldName, OpType opType) {
         DataField toReturn = new DataField();
-        toReturn.setName(FieldName.create(fieldName));
+        toReturn.setName(fieldName);
         toReturn.setOpType(opType);
         return toReturn;
     }
@@ -333,14 +334,14 @@ public class PMMLModelTestUtils {
 
     public static MiningField getMiningField(String fieldName, MiningField.UsageType usageType) {
         MiningField toReturn = getRandomMiningField();
-        toReturn.setName(FieldName.create(fieldName));
+        toReturn.setName(fieldName);
         toReturn.setUsageType(usageType);
         return toReturn;
     }
 
     public static Target getTarget(String fieldTarget, OpType opType) {
         Target toReturn = new Target();
-        toReturn.setField(FieldName.create(fieldTarget));
+        toReturn.setField(fieldTarget);
         toReturn.setOpType(opType);
         return toReturn;
     }
@@ -359,7 +360,7 @@ public class PMMLModelTestUtils {
 
     public static DerivedField getDerivedField(String fieldName) {
         DerivedField toReturn = new DerivedField();
-        toReturn.setName(FieldName.create(fieldName));
+        toReturn.setName(fieldName);
         toReturn.setDataType(getRandomDataType());
         toReturn.setOpType(getRandomOpType());
         Constant expression = new Constant(5);
@@ -383,7 +384,7 @@ public class PMMLModelTestUtils {
 
     public static DataField getRandomDataField() {
         DataField toReturn = new DataField();
-        toReturn.setName(FieldName.create(RandomStringUtils.random(6, true, false)));
+        toReturn.setName(RandomStringUtils.random(6, true, false));
         toReturn.setDataType(getRandomDataType());
         toReturn.setOpType(getRandomOpType());
         IntStream.range(0, 3).forEach(i -> {
@@ -410,7 +411,7 @@ public class PMMLModelTestUtils {
 
     public static MiningField getRandomMiningField() {
         Random random = new Random();
-        MiningField toReturn = new MiningField(FieldName.create(RandomStringUtils.random(6, true, false)));
+        MiningField toReturn = new MiningField(RandomStringUtils.random(6, true, false));
         toReturn.setInvalidValueTreatment(getRandomInvalidValueTreatmentMethod());
         toReturn.setMissingValueTreatment(getRandomMissingValueTreatmentMethod());
         toReturn.setOutlierTreatment(getRandomOutlierTreatmentMethod());
@@ -433,13 +434,13 @@ public class PMMLModelTestUtils {
     }
 
     public static OutputField getRandomOutputField() {
-        FieldName fieldName = FieldName.create(RandomStringUtils.random(6, true, false));
+        String fieldName = RandomStringUtils.random(6, true, false);
         OutputField toReturn = new OutputField();
         toReturn.setName(fieldName);
         toReturn.setOpType(getRandomOpType());
         toReturn.setDataType(getRandomDataType());
         toReturn.setValue(getRandomValue(toReturn.getDataType()));
-        fieldName = FieldName.create(RandomStringUtils.random(6, true, false));
+        fieldName = RandomStringUtils.random(6, true, false);
         toReturn.setTargetField(fieldName);
         toReturn.setResultFeature(getRandomResultFeature());
         toReturn.setExpression(getRandomConstant());
@@ -449,7 +450,7 @@ public class PMMLModelTestUtils {
     public static Target getRandomTarget() {
         Random random = new Random();
         Target toReturn = new Target();
-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
+        toReturn.setField(RandomStringUtils.random(6, true, false));
         toReturn.setOpType(getRandomOpType());
         toReturn.setMax(random.nextInt(234));
         toReturn.setMin(random.nextInt(23));
@@ -473,7 +474,7 @@ public class PMMLModelTestUtils {
 
     public static FieldColumnPair getRandomFieldColumnPair() {
         FieldColumnPair toReturn = new FieldColumnPair();
-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
+        toReturn.setField(RandomStringUtils.random(6, true, false));
         toReturn.setColumn(RandomStringUtils.random(6, true, false));
         return toReturn;
     }
@@ -490,7 +491,7 @@ public class PMMLModelTestUtils {
         Random random = new Random();
         ClusteringField toReturn = new ClusteringField();
         toReturn.setCenterField(getRandomClusteringFieldCenterField());
-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
+        toReturn.setField(RandomStringUtils.random(6, true, false));
         toReturn.setCompareFunction(getRandomCompareFunction());
         toReturn.setFieldWeight(random.nextDouble());
         toReturn.setComparisons(getRandomComparisons());
@@ -528,7 +529,7 @@ public class PMMLModelTestUtils {
         Discretize toReturn = new Discretize();
         toReturn.setDataType(getRandomDataType());
         toReturn.setDefaultValue(RandomStringUtils.random(6, true, false));
-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
+        toReturn.setField(RandomStringUtils.random(6, true, false));
         toReturn.setMapMissingTo(RandomStringUtils.random(6, true, false));
         IntStream.range(0, 3).forEach(i -> toReturn.addDiscretizeBins(getRandomDiscretizeBin()));
         return toReturn;
@@ -536,7 +537,7 @@ public class PMMLModelTestUtils {
 
     public static FieldRef getRandomFieldRef() {
         FieldRef toReturn = new FieldRef();
-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
+        toReturn.setField(RandomStringUtils.random(6, true, false));
         toReturn.setMapMissingTo(RandomStringUtils.random(6, true, false));
         return toReturn;
     }
@@ -562,7 +563,7 @@ public class PMMLModelTestUtils {
         double mapMissingTo = random.nextInt(100) / 10;
         NormContinuous toReturn = new NormContinuous();
         IntStream.range(0, 3).forEach(i -> toReturn.addLinearNorms(getRandomLinearNorm()));
-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
+        toReturn.setField(RandomStringUtils.random(6, true, false));
         toReturn.setOutliers(getRandomOutlierTreatmentMethod());
         toReturn.setMapMissingTo(mapMissingTo);
         return toReturn;
@@ -570,7 +571,7 @@ public class PMMLModelTestUtils {
 
     public static NormDiscrete getRandomNormDiscrete() {
         NormDiscrete toReturn = new NormDiscrete();
-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
+        toReturn.setField(RandomStringUtils.random(6, true, false));
         toReturn.setValue(getRandomObject(DataType.INTEGER));
         toReturn.setMapMissingTo((Number) getRandomObject(DataType.INTEGER));
         toReturn.setMethod(getRandomMethod());
@@ -580,14 +581,14 @@ public class PMMLModelTestUtils {
     public static TextIndex getRandomTextIndex() {
         Random random = new Random();
         TextIndex toReturn = new TextIndex();
-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
+        toReturn.setField(RandomStringUtils.random(6, true, false));
         toReturn.setExpression(getRandomFieldRef());
         toReturn.setLocalTermWeights(getRandomLocalTermWeights());
         toReturn.setWordSeparatorCharacterRE(RandomStringUtils.random(1, true, false));
         toReturn.setTokenize(true);
         toReturn.setCaseSensitive(false);
         toReturn.setMaxLevenshteinDistance(random.nextInt(10));
-        toReturn.setTextField(FieldName.create(RandomStringUtils.random(6, true, false)));
+        toReturn.setTextField(RandomStringUtils.random(6, true, false));
         IntStream.range(0, 3).forEach(i -> toReturn.addTextIndexNormalizations(getRandomTextIndexNormalization()));
         return toReturn;
     }
@@ -600,7 +601,7 @@ public class PMMLModelTestUtils {
     }
 
     public static ParameterField getParameterField(String fieldName) {
-        ParameterField toReturn = new ParameterField(FieldName.create(fieldName));
+        ParameterField toReturn = new ParameterField(fieldName);
         toReturn.setDataType(getRandomDataType());
         toReturn.setOpType(getRandomOpType());
         toReturn.setDisplayName("Display-" + fieldName);
@@ -608,7 +609,7 @@ public class PMMLModelTestUtils {
     }
 
     public static ParameterField getParameterField(String fieldName, DataType dataType) {
-        ParameterField toReturn = new ParameterField(FieldName.create(fieldName));
+        ParameterField toReturn = new ParameterField(fieldName);
         toReturn.setDataType(dataType);
         return toReturn;
     }
@@ -635,7 +636,7 @@ public class PMMLModelTestUtils {
     public static SimplePredicate getSimplePredicate(final String predicateName,
                                                      final Object value,
                                                      final SimplePredicate.Operator operator) {
-        FieldName fieldName = FieldName.create(predicateName);
+        String fieldName = predicateName;
         SimplePredicate toReturn = new SimplePredicate();
         toReturn.setField(fieldName);
         toReturn.setOperator(operator);
@@ -654,7 +655,7 @@ public class PMMLModelTestUtils {
                                                            final Array.Type arrayType,
                                                            final List<String> values,
                                                            final SimpleSetPredicate.BooleanOperator booleanOperator) {
-        FieldName fieldName = FieldName.create(predicateName);
+        String fieldName = predicateName;
         SimpleSetPredicate toReturn = new SimpleSetPredicate();
         toReturn.setField(fieldName);
         toReturn.setBooleanOperator(booleanOperator);
@@ -671,7 +672,7 @@ public class PMMLModelTestUtils {
     }
 
     public static FieldRef getFieldRef(final String fieldName) {
-        return new FieldRef(FieldName.create(fieldName));
+        return new FieldRef(fieldName);
     }
 
     public static Object getRandomObject(DataType dataType) {
@@ -873,7 +874,7 @@ public class PMMLModelTestUtils {
 
     public static ScoreDistribution getRandomPMMLScoreDistribution(Double probability) {
         Random random = new Random();
-        ScoreDistribution toReturn = new ScoreDistribution();
+        ScoreDistribution toReturn = new ComplexScoreDistribution();
         toReturn.setValue(RandomStringUtils.random(6, true, false));
         toReturn.setRecordCount(random.nextInt(100));
         toReturn.setConfidence((double) random.nextInt(1) / 100);
@@ -925,7 +926,7 @@ public class PMMLModelTestUtils {
     }
 
     public static SimplePredicate getRandomSimplePredicate() {
-        FieldName fieldName = FieldName.create(RandomStringUtils.random(6, true, false));
+        String fieldName = RandomStringUtils.random(6, true, false);
         SimplePredicate toReturn = new SimplePredicate();
         toReturn.setField(fieldName);
         toReturn.setOperator(getRandomSimplePredicateOperator());
@@ -945,7 +946,7 @@ public class PMMLModelTestUtils {
     }
 
     public static SimpleSetPredicate getRandomSimpleSetPredicate() {
-        FieldName fieldName = FieldName.create(RandomStringUtils.random(6, true, false));
+        String fieldName = RandomStringUtils.random(6, true, false);
         SimpleSetPredicate toReturn = new SimpleSetPredicate();
         toReturn.setField(fieldName);
         toReturn.setBooleanOperator(getRandomSimpleSetPredicateOperator());
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/TestUtils.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/TestUtils.java
index bb40c3ff2b..346ef37bf0 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/TestUtils.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/TestUtils.java
@@ -19,6 +19,8 @@ import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 
+import javax.xml.parsers.ParserConfigurationException;
+
 import jakarta.xml.bind.JAXBException;
 
 import org.dmg.pmml.PMML;
@@ -35,7 +37,8 @@ public class TestUtils {
      * @throws JAXBException
      * @throws IOException
      */
-    public static PMML loadFromFile(String fileName) throws SAXException, JAXBException, IOException {
+    public static PMML loadFromFile(String fileName) throws SAXException, JAXBException, IOException,
+            ParserConfigurationException {
         return loadFromInputStream(FileUtils.getFileInputStream(fileName));
     }
 
@@ -46,7 +49,8 @@ public class TestUtils {
      * @throws SAXException
      * @throws JAXBException
      */
-    public static PMML loadFromSource(String xmlSource) throws SAXException, JAXBException {
+    public static PMML loadFromSource(String xmlSource) throws SAXException, JAXBException,
+            ParserConfigurationException {
         return loadFromInputStream(new ByteArrayInputStream(xmlSource.getBytes()));
     }
 
@@ -58,7 +62,7 @@ public class TestUtils {
      * @throws JAXBException
      * @see org.jpmml.model.PMMLUtil#unmarshal(InputStream)
      */
-    public static PMML loadFromInputStream(InputStream is) throws SAXException, JAXBException {
+    public static PMML loadFromInputStream(InputStream is) throws SAXException, JAXBException, ParserConfigurationException {
         return org.jpmml.model.PMMLUtil.unmarshal(is);
     }
 
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/utils/ModelUtilsTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/utils/ModelUtilsTest.java
index 8dd030ef3d..d5aac48715 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/utils/ModelUtilsTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/utils/ModelUtilsTest.java
@@ -34,7 +34,6 @@ import org.dmg.pmml.DataField;
 import org.dmg.pmml.DataType;
 import org.dmg.pmml.DerivedField;
 import org.dmg.pmml.Field;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.MiningField;
 import org.dmg.pmml.MiningSchema;
 import org.dmg.pmml.Model;
@@ -45,8 +44,8 @@ import org.dmg.pmml.Row;
 import org.dmg.pmml.Target;
 import org.dmg.pmml.Targets;
 import org.dmg.pmml.regression.RegressionModel;
-import org.jpmml.model.inlinetable.InputCell;
-import org.jpmml.model.inlinetable.OutputCell;
+import org.jpmml.model.cells.InputCell;
+import org.jpmml.model.cells.OutputCell;
 import org.junit.jupiter.api.Test;
 import org.kie.pmml.api.enums.DATA_TYPE;
 import org.kie.pmml.api.enums.FIELD_USAGE_TYPE;
@@ -196,10 +195,10 @@ public class ModelUtilsTest {
         retrieved.forEach(kiePMMLNameOpType -> {
             assertThat(miningSchema.getMiningFields()
                                .stream()
-                               .anyMatch(fld -> kiePMMLNameOpType.getName().equals(fld.getName().getValue()))).isTrue();
+                               .anyMatch(fld -> kiePMMLNameOpType.getName().equals(fld.getName()))).isTrue();
             Optional<DataField> optionalDataField = dataDictionary.getDataFields()
                     .stream()
-                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getName().getValue()))
+                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getName()))
                     .findFirst();
             assertThat(optionalDataField).isPresent();
             DataField dataField = optionalDataField.get();
@@ -228,7 +227,7 @@ public class ModelUtilsTest {
         retrieved.forEach(kiePMMLNameOpType -> {
             Optional<MiningField> optionalMiningField = miningSchema.getMiningFields()
                     .stream()
-                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getName().getValue()))
+                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getName()))
                     .findFirst();
             assertThat(optionalMiningField).isPresent();
             MiningField miningField = optionalMiningField.get();
@@ -261,7 +260,7 @@ public class ModelUtilsTest {
         retrieved.forEach(kiePMMLNameOpType -> {
             Optional<MiningField> optionalMiningField = miningSchema.getMiningFields()
                     .stream()
-                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getName().getValue()))
+                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getName()))
                     .findFirst();
             assertThat(optionalMiningField).isPresent();
             MiningField miningField = optionalMiningField.get();
@@ -294,7 +293,7 @@ public class ModelUtilsTest {
         retrieved.forEach(kiePMMLNameOpType -> {
             Optional<Target> optionalTarget = targets.getTargets()
                     .stream()
-                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getField().getValue()))
+                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getField()))
                     .findFirst();
             assertThat(optionalTarget).isPresent();
             Target target = optionalTarget.get();
@@ -311,7 +310,7 @@ public class ModelUtilsTest {
         IntStream.range(0, 3).forEach(i -> {
             final DataField dataField = getRandomDataField();
             dataDictionary.addDataFields(dataField);
-            final MiningField miningField = getMiningField(dataField.getName().getValue(),
+            final MiningField miningField = getMiningField(dataField.getName(),
                                                            MiningField.UsageType.PREDICTED);
             miningSchema.addMiningFields(miningField);
         });
@@ -341,7 +340,7 @@ public class ModelUtilsTest {
         IntStream.range(0, 3).forEach(i -> {
             final DataField dataField = getRandomDataField();
             dataDictionary.addDataFields(dataField);
-            final MiningField miningField = getMiningField(dataField.getName().getValue(),
+            final MiningField miningField = getMiningField(dataField.getName(),
                                                            MiningField.UsageType.ACTIVE);
             miningSchema.addMiningFields(miningField);
         });
@@ -360,10 +359,10 @@ public class ModelUtilsTest {
         IntStream.range(0, 3).forEach(i -> {
             final DataField dataField = getRandomDataField();
             dataDictionary.addDataFields(dataField);
-            final MiningField miningField = getMiningField(dataField.getName().getValue(),
+            final MiningField miningField = getMiningField(dataField.getName(),
                                                            MiningField.UsageType.ACTIVE);
             miningSchema.addMiningFields(miningField);
-            final Target targetField = getTarget(dataField.getName().getValue(), null);
+            final Target targetField = getTarget(dataField.getName(), null);
             targets.addTargets(targetField);
         });
         model.setMiningSchema(miningSchema);
@@ -387,7 +386,7 @@ public class ModelUtilsTest {
             OP_TYPE retrieved =
                     org.kie.pmml.compiler.api.utils.ModelUtils.getOpType(getFieldsFromDataDictionary(dataDictionary),
                                                                          model,
-                                                                                     dataField.getName().getValue());
+                                                                                     dataField.getName());
             assertThat(retrieved).isNotNull();
             OP_TYPE expected = OP_TYPE.byName(dataField.getOpType().value());
             assertThat(retrieved).isEqualTo(expected);
@@ -402,7 +401,7 @@ public class ModelUtilsTest {
             IntStream.range(0, 3).forEach(i -> {
                 String fieldName = "field" + i;
                 final DataField dataField = getRandomDataField();
-                dataField.setName(FieldName.create(fieldName));
+                dataField.setName(fieldName);
                 dataDictionary.addDataFields(dataField);
             });
             org.kie.pmml.compiler.api.utils.ModelUtils.getOpType(getFieldsFromDataDictionary(dataDictionary), model,
@@ -427,7 +426,7 @@ public class ModelUtilsTest {
             OP_TYPE retrieved =
                     org.kie.pmml.compiler.api.utils.ModelUtils.getOpType(getFieldsFromDataDictionary(dataDictionary),
                                                                          model,
-                                                                                     miningField.getName().getValue());
+                                                                                     miningField.getName());
             assertThat(retrieved).isNotNull();
             OP_TYPE expected = OP_TYPE.byName(miningField.getOpType().value());
             assertThat(retrieved).isEqualTo(expected);
@@ -443,7 +442,7 @@ public class ModelUtilsTest {
             IntStream.range(0, 3).forEach(i -> {
                 String fieldName = "field" + i;
                 final DataField dataField = getRandomDataField();
-                dataField.setName(FieldName.create(fieldName));
+                dataField.setName(fieldName);
                 dataDictionary.addDataFields(dataField);
                 final MiningField miningField = getRandomMiningField();
                 miningField.setName(dataField.getName());
@@ -478,7 +477,7 @@ public class ModelUtilsTest {
             OP_TYPE retrieved =
                     org.kie.pmml.compiler.api.utils.ModelUtils.getOpType(getFieldsFromDataDictionary(dataDictionary),
                                                                          model,
-                                                                                     target.getField().getValue());
+                                                                                     target.getField());
             assertThat(retrieved).isNotNull();
             OP_TYPE expected = OP_TYPE.byName(target.getOpType().value());
             assertThat(retrieved).isEqualTo(expected);
@@ -495,7 +494,7 @@ public class ModelUtilsTest {
             IntStream.range(0, 3).forEach(i -> {
                 String fieldName = "field" + i;
                 final DataField dataField = getRandomDataField();
-                dataField.setName(FieldName.create(fieldName));
+                dataField.setName(fieldName);
                 dataDictionary.addDataFields(dataField);
                 final MiningField miningField = getRandomMiningField();
                 miningField.setName(dataField.getName());
@@ -529,7 +528,7 @@ public class ModelUtilsTest {
         fields.addAll(getFieldsFromDataDictionary(dataDictionary));
         dataDictionary.getDataFields().forEach(dataField -> {
             Optional<OP_TYPE> retrieved = org.kie.pmml.compiler.api.utils.ModelUtils.getOpTypeFromFields(fields,
-                                                                                                         dataField.getName().getValue());
+                                                                                                         dataField.getName());
             assertThat(retrieved).isNotNull();
             assertThat(retrieved).isPresent();
             OP_TYPE expected = OP_TYPE.byName(dataField.getOpType().value());
@@ -553,7 +552,7 @@ public class ModelUtilsTest {
         miningSchema.getMiningFields().forEach(miningField -> {
             Optional<OP_TYPE> retrieved =
                     org.kie.pmml.compiler.api.utils.ModelUtils.getOpTypeFromMiningFields(miningSchema,
-                                                                                         miningField.getName().getValue());
+                                                                                         miningField.getName());
             assertThat(retrieved).isNotNull();
             assertThat(retrieved).isPresent();
             OP_TYPE expected = OP_TYPE.byName(miningField.getOpType().value());
@@ -576,7 +575,7 @@ public class ModelUtilsTest {
         });
         targets.getTargets().forEach(target -> {
             Optional<OP_TYPE> retrieved = org.kie.pmml.compiler.api.utils.ModelUtils.getOpTypeFromTargets(targets,
-                                                                                                          target.getField().getValue());
+                                                                                                          target.getField());
             assertThat(retrieved).isNotNull();
             assertThat(retrieved).isPresent();
             OP_TYPE expected = OP_TYPE.byName(target.getOpType().value());
@@ -595,7 +594,7 @@ public class ModelUtilsTest {
                 .stream()
                 .map(dataField -> {
                     DerivedField toReturn = new DerivedField();
-                    toReturn.setName(FieldName.create("DER_" + dataField.getName().getValue()));
+                    toReturn.setName("DER_" + dataField.getName());
                     DataType dataType = getRandomDataType();
                     while (dataType.equals(dataField.getDataType())) {
                         dataType = getRandomDataType();
@@ -612,14 +611,14 @@ public class ModelUtilsTest {
                 .map(Field.class::cast)
                 .forEach(fields::add);
         dataDictionary.getDataFields().forEach(dataField -> {
-            String fieldName = dataField.getName().getValue();
+            String fieldName = dataField.getName();
             DataType retrieved = org.kie.pmml.compiler.api.utils.ModelUtils.getDataType(fields, fieldName);
             assertThat(retrieved).isNotNull();
             DataType expected = dataField.getDataType();
             assertThat(retrieved).isEqualTo(expected);
         });
         derivedFields.forEach(derivedField -> {
-            String fieldName = derivedField.getName().getValue();
+            String fieldName = derivedField.getName();
             DataType retrieved = org.kie.pmml.compiler.api.utils.ModelUtils.getDataType(fields, fieldName);
             assertThat(retrieved).isNotNull();
             DataType expected = derivedField.getDataType();
@@ -636,7 +635,7 @@ public class ModelUtilsTest {
         });
         dataDictionary.getDataFields().forEach(dataField -> {
             DATA_TYPE retrieved =
-                    org.kie.pmml.compiler.api.utils.ModelUtils.getDATA_TYPE(getFieldsFromDataDictionary(dataDictionary), dataField.getName().getValue());
+                    org.kie.pmml.compiler.api.utils.ModelUtils.getDATA_TYPE(getFieldsFromDataDictionary(dataDictionary), dataField.getName());
             assertThat(retrieved).isNotNull();
             DATA_TYPE expected = DATA_TYPE.byName(dataField.getDataType().value());
             assertThat(retrieved).isEqualTo(expected);
@@ -650,7 +649,7 @@ public class ModelUtilsTest {
             IntStream.range(0, 3).forEach(i -> {
                 String fieldName = "field" + i;
                 final DataField dataField = getRandomDataField();
-                dataField.setName(FieldName.create(fieldName));
+                dataField.setName(fieldName);
                 dataDictionary.addDataFields(dataField);
             });
             org.kie.pmml.compiler.api.utils.ModelUtils.getDATA_TYPE(getFieldsFromDataDictionary(dataDictionary),
@@ -716,12 +715,12 @@ public class ModelUtilsTest {
         org.kie.pmml.api.models.OutputField retrieved =
                 org.kie.pmml.compiler.api.utils.ModelUtils.convertToKieOutputField(toConvert, null);
         assertThat(retrieved).isNotNull();
-        assertThat(retrieved.getName()).isEqualTo(toConvert.getName().getValue());
+        assertThat(retrieved.getName()).isEqualTo(toConvert.getName());
         OP_TYPE expectedOpType = OP_TYPE.byName(toConvert.getOpType().value());
         assertThat(retrieved.getOpType()).isEqualTo(expectedOpType);
         DATA_TYPE expectedDataType = DATA_TYPE.byName(toConvert.getDataType().value());
         assertThat(retrieved.getDataType()).isEqualTo(expectedDataType);
-        assertThat(retrieved.getTargetField()).isEqualTo(toConvert.getTargetField().getValue());
+        assertThat(retrieved.getTargetField()).isEqualTo(toConvert.getTargetField());
         RESULT_FEATURE expectedResultFeature = RESULT_FEATURE.byName(toConvert.getResultFeature().value());
         assertThat(retrieved.getResultFeature()).isEqualTo(expectedResultFeature);
         toConvert.setOpType(null);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactory.java
index b0a57eebda..4aee65cbc7 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactory.java
@@ -81,7 +81,7 @@ public class KiePMMLDerivedFieldFactory {
         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
         final Expression dataTypeExpression = getExpressionForDataType(derivedField.getDataType());
         final Expression opTypeExpression = getExpressionForOpType(derivedField.getOpType());
-        builder.setArgument(0, new StringLiteralExpr(derivedField.getName().getValue()));
+        builder.setArgument(0, new StringLiteralExpr(derivedField.getName()));
         builder.setArgument(2, dataTypeExpression);
         builder.setArgument(3, opTypeExpression);
         builder.setArgument(4, new NameExpr(nestedVariableName));
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactory.java
index f740a025ab..276205279d 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactory.java
@@ -85,7 +85,7 @@ public class KiePMMLDiscretizeFactory {
                 .orElseThrow(() -> new KiePMMLException(String.format(MISSING_VARIABLE_INITIALIZER_TEMPLATE,
                                                                       DISCRETIZE, toReturn)))
                 .asObjectCreationExpr();
-        final Expression nameExpr = new StringLiteralExpr(discretize.getField().getValue());
+        final Expression nameExpr = new StringLiteralExpr(discretize.getField());
         final Expression mapMissingToExpr = getExpressionForObject(discretize.getMapMissingTo());
         final Expression defaultValueExpr = getExpressionForObject(discretize.getDefaultValue());
 
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactory.java
index c890d38869..369b527cb9 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactory.java
@@ -68,7 +68,7 @@ public class KiePMMLFieldColumnPairFactory {
         final ObjectCreationExpr objectCreationExpr = variableDeclarator.getInitializer()
                 .orElseThrow(() -> new KiePMMLException(String.format(MISSING_VARIABLE_INITIALIZER_TEMPLATE, FIELDCOLUMNPAIR, toReturn)))
         .asObjectCreationExpr();
-        objectCreationExpr.getArguments().set(0, new StringLiteralExpr(fieldColumnPair.getField().getValue()));
+        objectCreationExpr.getArguments().set(0, new StringLiteralExpr(fieldColumnPair.getField()));
         objectCreationExpr.getArguments().set(2, new StringLiteralExpr(fieldColumnPair.getColumn()));
         return toReturn;
     }
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactory.java
index 8404131f4d..2fe5206fe1 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactory.java
@@ -70,7 +70,7 @@ public class KiePMMLFieldRefFactory {
                                                                       FIELD_REF, toReturn)))
                 .asObjectCreationExpr();
 
-        final StringLiteralExpr nameExpr = new StringLiteralExpr(fieldRef.getField().getValue());
+        final StringLiteralExpr nameExpr = new StringLiteralExpr(fieldRef.getField());
         final Expression mapMissingToExpr = getExpressionForObject(fieldRef.getMapMissingTo());
         objectCreationExpr.getArguments().set(0, nameExpr);
         objectCreationExpr.getArguments().set(2, mapMissingToExpr);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactory.java
index 5a1026b9be..ddafddefc7 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactory.java
@@ -85,7 +85,7 @@ public class KiePMMLMiningFieldFactory {
                                                                       MININGFIELD, toReturn)))
                 .asMethodCallExpr();
         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
-        final StringLiteralExpr nameExpr = new StringLiteralExpr(miningField.getName().getValue());
+        final StringLiteralExpr nameExpr = new StringLiteralExpr(miningField.getName());
         Expression fieldUsageTypeExpr;
         if (miningField.getUsageType() != null) {
             final FIELD_USAGE_TYPE fieldUsageType = FIELD_USAGE_TYPE.byName(miningField.getUsageType().value());
@@ -100,8 +100,8 @@ public class KiePMMLMiningFieldFactory {
         } else {
             opTypeExpr = new NullLiteralExpr();
         }
-        final List<Field<?>> mappedFields = getMappedFields(fields, miningField.getName().getValue());
-        final DataType dataType = getDataType(mappedFields, miningField.getName().getValue());
+        final List<Field<?>> mappedFields = getMappedFields(fields, miningField.getName());
+        final DataType dataType = getDataType(mappedFields, miningField.getName());
         final DATA_TYPE data_TYPE = DATA_TYPE.byName(dataType.value());
         Expression dataTypeExpr = new NameExpr(DATA_TYPE.class.getName() + "." + data_TYPE.name());
         Expression missingValueTreatmentMethodExpr;
@@ -169,7 +169,7 @@ public class KiePMMLMiningFieldFactory {
     private static List<Field<?>> getMappedFields(final List<Field<?>> fields,
                                                   final String fieldName) {
         return fields.stream()
-                .filter(fld -> Objects.equals(fieldName, fld.getName().getValue()))
+                .filter(fld -> Objects.equals(fieldName, fld.getName()))
                 .collect(Collectors.toList());
     }
 
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLModelFactoryUtils.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLModelFactoryUtils.java
index 41b5b046af..d3b6513707 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLModelFactoryUtils.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLModelFactoryUtils.java
@@ -611,7 +611,7 @@ public class KiePMMLModelFactoryUtils {
         BlockStmt body = new BlockStmt();
         NodeList<Expression> arguments = new NodeList<>();
         for (org.dmg.pmml.MiningField miningField : miningFields) {
-            String miningFieldVariableName = getSanitizedVariableName(miningField.getName().getValue()).toLowerCase();
+            String miningFieldVariableName = getSanitizedVariableName(miningField.getName()).toLowerCase();
             BlockStmt toAdd = getMiningFieldVariableDeclaration(miningFieldVariableName, miningField, fields);
             toAdd.getStatements().forEach(body::addStatement);
             arguments.add(new NameExpr(miningFieldVariableName));
@@ -631,7 +631,7 @@ public class KiePMMLModelFactoryUtils {
         BlockStmt body = new BlockStmt();
         NodeList<Expression> arguments = new NodeList<>();
         for (org.dmg.pmml.OutputField outputField : outputFields) {
-            String outputFieldVariableName = getSanitizedVariableName(outputField.getName().getValue()).toLowerCase();
+            String outputFieldVariableName = getSanitizedVariableName(outputField.getName()).toLowerCase();
             BlockStmt toAdd = getOutputFieldVariableDeclaration(outputFieldVariableName, outputField);
             toAdd.getStatements().forEach(body::addStatement);
             arguments.add(new NameExpr(outputFieldVariableName));
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactory.java
index 41b6d2292b..fe96b29fae 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactory.java
@@ -77,7 +77,7 @@ public class KiePMMLNormContinuousFactory {
                                                                       NORM_CONTINUOUS, toReturn)))
                 .asObjectCreationExpr();
 
-        final StringLiteralExpr nameExpr = new StringLiteralExpr(normContinuous.getField().getValue());
+        final StringLiteralExpr nameExpr = new StringLiteralExpr(normContinuous.getField());
         final OUTLIER_TREATMENT_METHOD outlierTreatmentMethod =
                 OUTLIER_TREATMENT_METHOD.byName(normContinuous.getOutliers().value());
         final NameExpr outlierTreatmentMethodExpr =
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactory.java
index a3dfadc05b..ce6dfdf09b 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactory.java
@@ -71,7 +71,7 @@ public class KiePMMLNormDiscreteFactory {
                                                                       NORM_DISCRETE, toReturn)))
                 .asObjectCreationExpr();
 
-        final StringLiteralExpr nameExpr = new StringLiteralExpr(normDiscrete.getField().getValue());
+        final StringLiteralExpr nameExpr = new StringLiteralExpr(normDiscrete.getField());
 
         final Expression mapMissingToExpr = getExpressionForObject(normDiscrete.getMapMissingTo());
         objectCreationExpr.getArguments().set(0, nameExpr);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLOutputFieldFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLOutputFieldFactory.java
index 03ac64ec84..5dc5a651fc 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLOutputFieldFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLOutputFieldFactory.java
@@ -78,10 +78,10 @@ public class KiePMMLOutputFieldFactory {
                 .orElseThrow(() -> new KiePMMLException(String.format(MISSING_VARIABLE_INITIALIZER_TEMPLATE, OUTPUTFIELD, toReturn)))
                 .asMethodCallExpr();
         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
-        final StringLiteralExpr nameExpr = new StringLiteralExpr(outputField.getName().getValue());
+        final StringLiteralExpr nameExpr = new StringLiteralExpr(outputField.getName());
         final RESULT_FEATURE resultFeature = RESULT_FEATURE.byName(outputField.getResultFeature().value());
         final NameExpr resultFeatureExpr = new NameExpr(RESULT_FEATURE.class.getName() + "." + resultFeature.name());
-        final Expression targetFieldExpr = outputField.getTargetField() != null ? getExpressionForObject(outputField.getTargetField().getValue()) : new NullLiteralExpr();
+        final Expression targetFieldExpr = outputField.getTargetField() != null ? getExpressionForObject(outputField.getTargetField()) : new NullLiteralExpr();
         final Expression valueExpr = outputField.getValue() != null ? getExpressionForObject(outputField.getValue()) : new NullLiteralExpr();
         final Expression dataTypeExpression = getExpressionForDataType(outputField.getDataType());
         final Expression rankExpr = outputField.getRank() != null ? getExpressionForObject(outputField.getRank()) : new NullLiteralExpr();
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactory.java
index 364a781216..0c40c78ee6 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactory.java
@@ -70,7 +70,7 @@ public class KiePMMLParameterFieldFactory {
                 .orElseThrow(() -> new KiePMMLException(String.format(MISSING_VARIABLE_INITIALIZER_TEMPLATE, PARAMETER_FIELD, toReturn)))
                 .asMethodCallExpr();
         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
-        builder.setArgument(0, new StringLiteralExpr(parameterField.getName().getValue()));
+        builder.setArgument(0, new StringLiteralExpr(parameterField.getName()));
         final Expression dataTypeExpression = getExpressionForDataType(parameterField.getDataType());
         final Expression opTypeExpression = getExpressionForOpType(parameterField.getOpType());
         getChainedMethodCallExprFrom("withDataType", initializer).setArgument(0, dataTypeExpression);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactory.java
index acbd5765a4..ad803f9a20 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactory.java
@@ -82,9 +82,9 @@ public class KiePMMLSimplePredicateFactory {
                 .orElseThrow(() -> new KiePMMLException(String.format(MISSING_VARIABLE_INITIALIZER_TEMPLATE, SIMPLE_PREDICATE, simplePredicateBody)))
                 .asMethodCallExpr();
         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
-        builder.setArgument(0, new StringLiteralExpr(simplePredicate.getField().getValue()));
+        builder.setArgument(0, new StringLiteralExpr(simplePredicate.getField()));
         builder.setArgument(2, operatorExpr);
-        DataType dataType = getDataType(fields, simplePredicate.getField().getValue());
+        DataType dataType = getDataType(fields, simplePredicate.getField());
         Object actualValue = DATA_TYPE.byName(dataType.value()).getActualValue(simplePredicate.getValue());
         getChainedMethodCallExprFrom("withValue", initializer).setArgument(0, getExpressionForObject(actualValue));
         simplePredicateBody.getStatements().forEach(toReturn::addStatement);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactory.java
index 078b865fb1..5cb84d6694 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactory.java
@@ -87,7 +87,7 @@ public class KiePMMLSimpleSetPredicateFactory {
                 .orElseThrow(() -> new KiePMMLException(String.format(MISSING_VARIABLE_INITIALIZER_TEMPLATE, SIMPLESET_PREDICATE, simpleSetPredicateBody)))
                 .asMethodCallExpr();
         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
-        builder.setArgument(0, new StringLiteralExpr(simpleSetPredicate.getField().getValue()));
+        builder.setArgument(0, new StringLiteralExpr(simpleSetPredicate.getField()));
         builder.setArgument(2, arrayTypeExpr);
         builder.setArgument(3, inNotInExpr);
         getChainedMethodCallExprFrom("asList", initializer).setArguments(arguments);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactory.java
index 1f8247c345..c94064c6da 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactory.java
@@ -98,7 +98,7 @@ public class KiePMMLTextIndexFactory {
                 TEXTINDEX, toReturn)))
                 .asMethodCallExpr();
         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
-        final StringLiteralExpr nameExpr = new StringLiteralExpr(textIndex.getTextField().getValue());
+        final StringLiteralExpr nameExpr = new StringLiteralExpr(textIndex.getTextField());
         final NameExpr expressionExpr = new NameExpr(expressionVariableName);
         builder.setArgument(0, nameExpr);
         builder.setArgument(2, expressionExpr);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDerivedFieldInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDerivedFieldInstanceFactory.java
index 5d2d2d8d57..54ec4e26e9 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDerivedFieldInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDerivedFieldInstanceFactory.java
@@ -50,9 +50,9 @@ public class KiePMMLDerivedFieldInstanceFactory {
     static KiePMMLDerivedField getKiePMMLDerivedField(final DerivedField derivedField,
                                                       final List<Field<?>> fields) {
         DataType dataType = derivedField.getDataType() != null ? derivedField.getDataType() : getDataType(fields,
-                                                                                                          derivedField.getName().getValue());
+                                                                                                          derivedField.getName());
         OP_TYPE opType = derivedField.getOpType() != null ? OP_TYPE.byName(derivedField.getOpType().value()) : null;
-        return KiePMMLDerivedField.builder(derivedField.getName().getValue(),
+        return KiePMMLDerivedField.builder(derivedField.getName(),
                                            getKiePMMLExtensions(derivedField.getExtensions()),
                                            DATA_TYPE.byName(dataType.value()),
                                            opType,
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDiscretizeInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDiscretizeInstanceFactory.java
index 5ee6792fcb..9d6de34f7f 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDiscretizeInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDiscretizeInstanceFactory.java
@@ -43,7 +43,7 @@ public class KiePMMLDiscretizeInstanceFactory {
         String defaultValue = discretize.getDefaultValue() != null ? discretize.getDefaultValue().toString() : null;
         DATA_TYPE dataType = discretize.getDataType() != null ? DATA_TYPE.byName(discretize.getDataType().value()) :
                 null;
-        return new KiePMMLDiscretize(discretize.getField().getValue(),
+        return new KiePMMLDiscretize(discretize.getField(),
                                      getKiePMMLExtensions(discretize.getExtensions()),
                                      discretizeBins,
                                      mapMissingTo,
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldColumnPairInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldColumnPairInstanceFactory.java
index a659b870fa..7741a23b4a 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldColumnPairInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldColumnPairInstanceFactory.java
@@ -38,7 +38,7 @@ public class KiePMMLFieldColumnPairInstanceFactory {
     }
 
     static KiePMMLFieldColumnPair getKiePMMLFieldColumnPair(final FieldColumnPair fieldColumnPair) {
-        return new KiePMMLFieldColumnPair(fieldColumnPair.getField().getValue(),
+        return new KiePMMLFieldColumnPair(fieldColumnPair.getField(),
                                           getKiePMMLExtensions(fieldColumnPair.getExtensions()),
                                           fieldColumnPair.getColumn());
     }
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldRefInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldRefInstanceFactory.java
index a1cd31b3c5..eea09d4075 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldRefInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldRefInstanceFactory.java
@@ -29,7 +29,7 @@ public class KiePMMLFieldRefInstanceFactory {
     }
 
     static KiePMMLFieldRef getKiePMMLFieldRef(final FieldRef fieldRef) {
-        return new KiePMMLFieldRef(fieldRef.getField().getValue(),
+        return new KiePMMLFieldRef(fieldRef.getField(),
                                    KiePMMLExtensionInstanceFactory.getKiePMMLExtensions(fieldRef.getExtensions()),
                                    fieldRef.getMapMissingTo());
     }
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLMiningFieldInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLMiningFieldInstanceFactory.java
index 1958cda8b4..978aa4113b 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLMiningFieldInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLMiningFieldInstanceFactory.java
@@ -42,7 +42,7 @@ public class KiePMMLMiningFieldInstanceFactory {
     }
 
     public static KiePMMLMiningField getKiePMMLMiningField(final MiningField toConvert, final Field<?> field) {
-        String name = toConvert.getName() != null ? toConvert.getName().getValue() : "" + toConvert.hashCode();
+        String name = toConvert.getName() != null ? toConvert.getName() : "" + toConvert.hashCode();
         final FIELD_USAGE_TYPE fieldUsageType = toConvert.getUsageType() != null ?
                 FIELD_USAGE_TYPE.byName(toConvert.getUsageType().value()) : null;
         final OP_TYPE opType = toConvert.getOpType() != null ? OP_TYPE.byName(toConvert.getOpType().value()) : null;
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormContinuousInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormContinuousInstanceFactory.java
index a393a96644..cbcaf48c94 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormContinuousInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormContinuousInstanceFactory.java
@@ -40,7 +40,7 @@ public class KiePMMLNormContinuousInstanceFactory {
         final List<KiePMMLLinearNorm> linearNorms = normContinuous.hasLinearNorms() ?
                 getKiePMMLLinearNorms(normContinuous.getLinearNorms()) : Collections.emptyList();
         final OUTLIER_TREATMENT_METHOD outlierTreatmentMethod = normContinuous.getOutliers() != null ? OUTLIER_TREATMENT_METHOD.byName(normContinuous.getOutliers().value()) : null;
-        return new KiePMMLNormContinuous(normContinuous.getField().getValue(), getKiePMMLExtensions(normContinuous.getExtensions()), linearNorms, outlierTreatmentMethod, normContinuous.getMapMissingTo());
+        return new KiePMMLNormContinuous(normContinuous.getField(), getKiePMMLExtensions(normContinuous.getExtensions()), linearNorms, outlierTreatmentMethod, normContinuous.getMapMissingTo());
     }
 
 }
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormDiscreteInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormDiscreteInstanceFactory.java
index 875056d14f..80c5f58f6c 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormDiscreteInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormDiscreteInstanceFactory.java
@@ -35,7 +35,7 @@ public class KiePMMLNormDiscreteInstanceFactory {
 
     static KiePMMLNormDiscrete getKiePMMLNormDiscrete(final NormDiscrete normDiscrete) {
         List<KiePMMLExtension> extensions = getKiePMMLExtensions(normDiscrete.getExtensions());
-        return new KiePMMLNormDiscrete(normDiscrete.getField().getValue(),
+        return new KiePMMLNormDiscrete(normDiscrete.getField(),
                                        extensions,
                                        normDiscrete.getValue().toString(),
                                        normDiscrete.getMapMissingTo());
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLOutputFieldInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLOutputFieldInstanceFactory.java
index adf65610e8..3d5c066b1a 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLOutputFieldInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLOutputFieldInstanceFactory.java
@@ -35,8 +35,8 @@ public class KiePMMLOutputFieldInstanceFactory {
     }
 
     public static KiePMMLOutputField getKiePMMLOutputField(final OutputField outputField) {
-        String name = outputField.getName() != null ? outputField.getName().getValue() : "" + outputField.hashCode();
-        final String targetField = outputField.getTargetField() != null ? outputField.getTargetField().getValue() :
+        String name = outputField.getName() != null ? outputField.getName() : "" + outputField.hashCode();
+        final String targetField = outputField.getTargetField() != null ? outputField.getTargetField() :
                 null;
         final RESULT_FEATURE resultFeature = outputField.getResultFeature() != null ?
                 RESULT_FEATURE.byName(outputField.getResultFeature().value()) : null;
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLParameterFieldInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLParameterFieldInstanceFactory.java
index 71e65adf8e..4a5527eeac 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLParameterFieldInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLParameterFieldInstanceFactory.java
@@ -44,7 +44,7 @@ public class KiePMMLParameterFieldInstanceFactory {
         DATA_TYPE dataType = parameterField.getDataType() != null ?
                 DATA_TYPE.byName(parameterField.getDataType().value()) : null;
         OP_TYPE opType = parameterField.getOpType() != null ? OP_TYPE.byName(parameterField.getOpType().value()) : null;
-        return KiePMMLParameterField.builder(parameterField.getName().getValue(),
+        return KiePMMLParameterField.builder(parameterField.getName(),
                                              Collections.emptyList())
                 .withDataType(dataType)
                 .withOpType(opType)
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimplePredicateInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimplePredicateInstanceFactory.java
index 60d10d26e3..5280200a57 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimplePredicateInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimplePredicateInstanceFactory.java
@@ -41,9 +41,9 @@ public class KiePMMLSimplePredicateInstanceFactory {
     static KiePMMLSimplePredicate getKiePMMLSimplePredicate(final SimplePredicate simplePredicate,
                                                             final List<Field<?>> fields) {
         final List<KiePMMLExtension> kiePMMLExtensions = getKiePMMLExtensions(simplePredicate.getExtensions());
-        DataType dataType = getDataType(fields, simplePredicate.getField().getValue());
+        DataType dataType = getDataType(fields, simplePredicate.getField());
         Object value = DATA_TYPE.byName(dataType.value()).getActualValue(simplePredicate.getValue());
-        return KiePMMLSimplePredicate.builder(simplePredicate.getField().getValue(),
+        return KiePMMLSimplePredicate.builder(simplePredicate.getField(),
                                               kiePMMLExtensions,
                                               OPERATOR.byName(simplePredicate.getOperator().value()))
                 .withValue(value)
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimpleSetPredicateInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimpleSetPredicateInstanceFactory.java
index 70871ada4f..cfeeb80dde 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimpleSetPredicateInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimpleSetPredicateInstanceFactory.java
@@ -34,7 +34,7 @@ public class KiePMMLSimpleSetPredicateInstanceFactory {
     }
 
     static KiePMMLSimpleSetPredicate getKiePMMLSimpleSetPredicate(final SimpleSetPredicate simpleSetPredicate) {
-        return KiePMMLSimpleSetPredicate.builder(simpleSetPredicate.getField().getValue(),
+        return KiePMMLSimpleSetPredicate.builder(simpleSetPredicate.getField(),
                                                  getKiePMMLExtensions(simpleSetPredicate.getExtensions()),
                                                  ARRAY_TYPE.byName(simpleSetPredicate.getArray().getType().value()),
                                                  IN_NOTIN.byName(simpleSetPredicate.getBooleanOperator().value()))
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTargetInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTargetInstanceFactory.java
index 40ae1e73c9..050daa33ff 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTargetInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTargetInstanceFactory.java
@@ -42,7 +42,7 @@ public class KiePMMLTargetInstanceFactory {
                 .map(KiePMMLTargetInstanceFactory::getKieTargetValue)
                 .collect(Collectors.toList()) : Collections.emptyList();
         final OP_TYPE opType = target.getOpType() != null ? OP_TYPE.byName(target.getOpType().value()) : null;
-        final String field = target.getField() != null ? target.getField().getValue() : null;
+        final String field = target.getField() != null ? target.getField() : null;
         final CAST_INTEGER castInteger = target.getCastInteger() != null ?
                 CAST_INTEGER.byName(target.getCastInteger().value()) : null;
         TargetField targetField = new TargetField(targetValues,
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTextIndexInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTextIndexInstanceFactory.java
index a2efd17595..9e133499b7 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTextIndexInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTextIndexInstanceFactory.java
@@ -42,7 +42,7 @@ public class KiePMMLTextIndexInstanceFactory {
                 COUNT_HITS.byName(textIndex.getCountHits().value()) : null;
         final String wordSeparatorCharacterRE = textIndex.getWordSeparatorCharacterRE() != null ?
                 StringEscapeUtils.escapeJava(textIndex.getWordSeparatorCharacterRE()) : null;
-        return KiePMMLTextIndex.builder(textIndex.getTextField().getValue(),
+        return KiePMMLTextIndex.builder(textIndex.getTextField(),
                                         getKiePMMLExtensions(textIndex.getExtensions()),
                                         getKiePMMLExpression(textIndex.getExpression()))
                 .withTextIndexNormalizations(getKiePMMLTextIndexNormalizations(textIndex.getTextIndexNormalizations()))
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtil.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtil.java
index 2248707bf0..85e2c33d42 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtil.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtil.java
@@ -21,11 +21,12 @@ import java.util.List;
 import java.util.Optional;
 import java.util.stream.Collectors;
 
+import javax.xml.parsers.ParserConfigurationException;
+
 import jakarta.xml.bind.JAXBException;
 
 import org.dmg.pmml.DataField;
 import org.dmg.pmml.DataType;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.MathContext;
 import org.dmg.pmml.MiningField;
 import org.dmg.pmml.MiningFunction;
@@ -63,7 +64,7 @@ public class KiePMMLUtil {
      * @throws SAXException
      * @throws JAXBException
      */
-    public static PMML load(String source) throws SAXException, JAXBException {
+    public static PMML load(String source) throws SAXException, JAXBException, ParserConfigurationException {
         return load(new ByteArrayInputStream(source.getBytes()), "");
     }
 
@@ -74,7 +75,7 @@ public class KiePMMLUtil {
      * @throws JAXBException
      * @see org.jpmml.model.PMMLUtil#unmarshal(InputStream)
      */
-    public static PMML load(final InputStream is, final String fileName) throws SAXException, JAXBException {
+    public static PMML load(final InputStream is, final String fileName) throws SAXException, JAXBException, ParserConfigurationException {
         PMML toReturn = org.jpmml.model.PMMLUtil.unmarshal(is);
         String cleanedFileName = fileName.contains(".") ? fileName.substring(0, fileName.indexOf('.')) : fileName;
         List<DataField> dataFields = toReturn.getDataDictionary().getDataFields();
@@ -163,7 +164,7 @@ public class KiePMMLUtil {
         String cleanedName = model.getModelName().replaceAll("[^A-Za-z0-9]", "");
         String fieldName = String.format(TARGETFIELD_TEMPLATE, cleanedName);
         DataField toReturn = new DataField();
-        toReturn.setName(FieldName.create(fieldName));
+        toReturn.setName(fieldName);
         toReturn.setOpType(targetOpType);
         toReturn.setDataType(targetDataType);
         return Optional.of(toReturn);
@@ -335,7 +336,7 @@ public class KiePMMLUtil {
                                 .filter(targetField -> outputField.getTargetField().equals(targetField.getName()))
                                 .findFirst()
                                 .orElseThrow(() -> new KiePMMLException("Failed to find a target field for OutputField "
-                                                                                + outputField.getName().getValue()));
+                                                                                + outputField.getName()));
                     }
                     if (referencedField == null && (outputField.getResultFeature() == null || outputField.getResultFeature().equals(ResultFeature.PREDICTED_VALUE))) { // default predictedValue
                         referencedField = targetFields.stream()
@@ -348,7 +349,7 @@ public class KiePMMLUtil {
                         return;
                     }
                     if (referencedField != null) {
-                        FieldName targetFieldName = referencedField.getName();
+                        String targetFieldName = referencedField.getName();
                         DataField dataField = dataFields.stream()
                                 .filter(df -> df.getName().equals(targetFieldName))
                                 .findFirst()
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLApplyFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLApplyFactoryTest.java
index 3d9f631222..52db2a9ae3 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLApplyFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLApplyFactoryTest.java
@@ -25,7 +25,6 @@ import com.github.javaparser.ast.stmt.BlockStmt;
 import com.github.javaparser.ast.stmt.Statement;
 import org.dmg.pmml.Apply;
 import org.dmg.pmml.Constant;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.FieldRef;
 import org.dmg.pmml.InvalidValueTreatmentMethod;
 import org.junit.jupiter.api.Test;
@@ -89,9 +88,9 @@ public class KiePMMLApplyFactoryTest {
         InvalidValueTreatmentMethod invalidValueTreatmentMethod = InvalidValueTreatmentMethod.AS_MISSING;
         apply.setInvalidValueTreatment(invalidValueTreatmentMethod);
         FieldRef fieldRef1 = new FieldRef();
-        fieldRef1.setField(FieldName.create(PARAM_1));
+        fieldRef1.setField(PARAM_1);
         FieldRef fieldRef2 = new FieldRef();
-        fieldRef2.setField(FieldName.create(PARAM_2));
+        fieldRef2.setField(PARAM_2);
         apply.addExpressions(fieldRef1, fieldRef2);
         BlockStmt retrieved =
                 org.kie.pmml.compiler.commons.codegenfactories.KiePMMLApplyFactory.getApplyVariableDeclaration(variableName, apply);
@@ -117,9 +116,9 @@ public class KiePMMLApplyFactoryTest {
         InvalidValueTreatmentMethod nestedInvalidValueTreatmentMethod = InvalidValueTreatmentMethod.AS_MISSING;
         nestedApply.setInvalidValueTreatment(nestedInvalidValueTreatmentMethod);
         FieldRef fieldRef1 = new FieldRef();
-        fieldRef1.setField(FieldName.create(PARAM_1));
+        fieldRef1.setField(PARAM_1);
         FieldRef fieldRef2 = new FieldRef();
-        fieldRef2.setField(FieldName.create(PARAM_2));
+        fieldRef2.setField(PARAM_2);
         nestedApply.addExpressions(fieldRef1, fieldRef2);
         Apply apply = new Apply();
         apply.setFunction(function);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDefineFunctionFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDefineFunctionFactoryTest.java
index 81541acf23..6c58ab3153 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDefineFunctionFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDefineFunctionFactoryTest.java
@@ -27,7 +27,6 @@ import org.dmg.pmml.Apply;
 import org.dmg.pmml.Constant;
 import org.dmg.pmml.DataType;
 import org.dmg.pmml.DefineFunction;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.FieldRef;
 import org.dmg.pmml.OpType;
 import org.dmg.pmml.ParameterField;
@@ -55,18 +54,18 @@ public class KiePMMLDefineFunctionFactoryTest {
 
     @Test
     void getDefineFunctionVariableDeclaration() throws IOException {
-        ParameterField parameterField1 = new ParameterField(FieldName.create(PARAM_1));
+        ParameterField parameterField1 = new ParameterField(PARAM_1);
         parameterField1.setDataType(DataType.DOUBLE);
         parameterField1.setOpType(OpType.CONTINUOUS);
         parameterField1.setDisplayName("displayName1");
-        ParameterField parameterField2 = new ParameterField(FieldName.create(PARAM_2));
+        ParameterField parameterField2 = new ParameterField(PARAM_2);
         parameterField2.setDataType(DataType.DOUBLE);
         parameterField2.setOpType(OpType.CONTINUOUS);
         parameterField2.setDisplayName("displayName2");
         Constant constant = new Constant();
         constant.setValue(value1);
         FieldRef fieldRef = new FieldRef();
-        fieldRef.setField(FieldName.create("FIELD_REF"));
+        fieldRef.setField("FIELD_REF");
         Apply apply = new Apply();
         apply.setFunction("/");
         apply.addExpressions(constant, fieldRef);
@@ -86,16 +85,16 @@ public class KiePMMLDefineFunctionFactoryTest {
         String text = getFileContent(TEST_01_SOURCE);
         Statement expected = JavaParserUtils
                 .parseBlock(String.format(text,
-                                          parameterField1.getName().getValue(),
+                                          parameterField1.getName(),
                                           dataType1,
                                           opType1,
                                           parameterField1.getDisplayName(),
-                                          parameterField2.getName().getValue(),
+                                          parameterField2.getName(),
                                           dataType2,
                                           opType2,
                                           parameterField2.getDisplayName(),
                                           constant.getValue(),
-                                          fieldRef.getField().getValue(),
+                                          fieldRef.getField(),
                                           apply.getFunction(),
                                           apply.getInvalidValueTreatment().value(),
                                           dataType3,
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactoryTest.java
index 9c0deb97cc..a5ffcb9999 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactoryTest.java
@@ -27,7 +27,6 @@ import org.dmg.pmml.Apply;
 import org.dmg.pmml.Constant;
 import org.dmg.pmml.DataType;
 import org.dmg.pmml.DerivedField;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.FieldRef;
 import org.dmg.pmml.OpType;
 import org.junit.jupiter.api.Test;
@@ -59,7 +58,7 @@ public class KiePMMLDerivedFieldFactoryTest {
         Constant constant = new Constant();
         constant.setValue(value1);
         DerivedField derivedField = new DerivedField();
-        derivedField.setName(FieldName.create(PARAM_1));
+        derivedField.setName(PARAM_1);
         derivedField.setDataType(DataType.DOUBLE);
         derivedField.setOpType(OpType.CONTINUOUS);
         derivedField.setExpression(constant);
@@ -71,7 +70,7 @@ public class KiePMMLDerivedFieldFactoryTest {
         Statement expected = JavaParserUtils
                 .parseBlock(String.format(text, constant.getValue(),
                                           variableName,
-                                          derivedField.getName().getValue(),
+                                          derivedField.getName(),
                                           dataType,
                                           opType));
         assertThat(JavaParserUtils.equalsNode(expected, retrieved)).isTrue();
@@ -85,9 +84,9 @@ public class KiePMMLDerivedFieldFactoryTest {
     void getDerivedFieldVariableDeclarationWithFieldRef() throws IOException {
         final String variableName = "variableName";
         FieldRef fieldRef = new FieldRef();
-        fieldRef.setField(FieldName.create("FIELD_REF"));
+        fieldRef.setField("FIELD_REF");
         DerivedField derivedField = new DerivedField();
-        derivedField.setName(FieldName.create(PARAM_1));
+        derivedField.setName(PARAM_1);
         derivedField.setDataType(DataType.DOUBLE);
         derivedField.setOpType(OpType.CONTINUOUS);
         derivedField.setExpression(fieldRef);
@@ -97,9 +96,9 @@ public class KiePMMLDerivedFieldFactoryTest {
                 org.kie.pmml.compiler.commons.codegenfactories.KiePMMLDerivedFieldFactory.getDerivedFieldVariableDeclaration(variableName, derivedField);
         String text = getFileContent(TEST_02_SOURCE);
         Statement expected = JavaParserUtils
-                .parseBlock(String.format(text, fieldRef.getField().getValue(),
+                .parseBlock(String.format(text, fieldRef.getField(),
                                           variableName,
-                                          derivedField.getName().getValue(),
+                                          derivedField.getName(),
                                           dataType,
                                           opType));
         assertThat(JavaParserUtils.equalsNode(expected, retrieved)).isTrue();
@@ -115,12 +114,12 @@ public class KiePMMLDerivedFieldFactoryTest {
         Constant constant = new Constant();
         constant.setValue(value1);
         FieldRef fieldRef = new FieldRef();
-        fieldRef.setField(FieldName.create("FIELD_REF"));
+        fieldRef.setField("FIELD_REF");
         Apply apply = new Apply();
         apply.setFunction("/");
         apply.addExpressions(constant, fieldRef);
         DerivedField derivedField = new DerivedField();
-        derivedField.setName(FieldName.create(PARAM_1));
+        derivedField.setName(PARAM_1);
         derivedField.setDataType(DataType.DOUBLE);
         derivedField.setOpType(OpType.CONTINUOUS);
         derivedField.setExpression(apply);
@@ -131,11 +130,11 @@ public class KiePMMLDerivedFieldFactoryTest {
         Statement expected = JavaParserUtils
                 .parseBlock(String.format(text,
                                           constant.getValue(),
-                                          fieldRef.getField().getValue(),
+                                          fieldRef.getField(),
                                           apply.getFunction(),
                                           apply.getInvalidValueTreatment().value(),
                                           variableName,
-                                          derivedField.getName().getValue(),
+                                          derivedField.getName(),
                                           dataType,
                                           opType));
         assertThat(JavaParserUtils.equalsNode(expected, retrieved)).isTrue();
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactoryTest.java
index 7d6783f932..8323b93d5c 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactoryTest.java
@@ -26,7 +26,6 @@ import com.github.javaparser.ast.stmt.Statement;
 import org.dmg.pmml.DataType;
 import org.dmg.pmml.Discretize;
 import org.dmg.pmml.DiscretizeBin;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.Interval;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
@@ -64,7 +63,7 @@ public class KiePMMLDiscretizeFactoryTest {
     void getDiscretizeVariableDeclaration() throws IOException {
         String variableName = "variableName";
         Discretize discretize = new Discretize();
-        discretize.setField(FieldName.create(NAME));
+        discretize.setField(NAME);
         discretize.setDataType(dataType);
         discretize.setMapMissingTo(MAP_MISSING_TO);
         discretize.setDefaultValue(DEFAULTVALUE);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactoryTest.java
index 9be27ab139..7db1e1472e 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactoryTest.java
@@ -24,7 +24,6 @@ import java.util.List;
 import com.github.javaparser.ast.stmt.BlockStmt;
 import com.github.javaparser.ast.stmt.Statement;
 import org.dmg.pmml.FieldColumnPair;
-import org.dmg.pmml.FieldName;
 import org.junit.jupiter.api.Test;
 import org.kie.pmml.commons.model.expressions.KiePMMLFieldColumnPair;
 import org.kie.pmml.compiler.commons.utils.JavaParserUtils;
@@ -43,7 +42,7 @@ public class KiePMMLFieldColumnPairFactoryTest {
         String fieldName = "fieldName";
         String column = "column";
         FieldColumnPair fieldColumnPair = new FieldColumnPair();
-        fieldColumnPair.setField(FieldName.create(fieldName));
+        fieldColumnPair.setField(fieldName);
         fieldColumnPair.setColumn(column);
 
         BlockStmt retrieved = KiePMMLFieldColumnPairFactory.getFieldColumnPairVariableDeclaration(variableName,
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactoryTest.java
index 74a0a47a19..b25133c0f9 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactoryTest.java
@@ -23,7 +23,6 @@ import java.util.List;
 
 import com.github.javaparser.ast.stmt.BlockStmt;
 import com.github.javaparser.ast.stmt.Statement;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.FieldRef;
 import org.junit.jupiter.api.Test;
 import org.kie.pmml.commons.model.expressions.KiePMMLFieldRef;
@@ -43,7 +42,7 @@ public class KiePMMLFieldRefFactoryTest {
         String fieldName = "fieldName";
         String mapMissingTo = "mapMissingTo";
         FieldRef fieldRef = new FieldRef();
-        fieldRef.setField(FieldName.create(fieldName));
+        fieldRef.setField(fieldName);
         fieldRef.setMapMissingTo(mapMissingTo);
         BlockStmt retrieved = KiePMMLFieldRefFactory.getFieldRefVariableDeclaration(variableName, fieldRef);
         String text = getFileContent(TEST_01_SOURCE);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLInlineTableFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLInlineTableFactoryTest.java
index 7363100b0c..66457e4833 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLInlineTableFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLInlineTableFactoryTest.java
@@ -55,7 +55,7 @@ public class KiePMMLInlineTableFactoryTest {
         DerivedField mapValued = pmmlModel.getTransformationDictionary()
                 .getDerivedFields()
                 .stream()
-                .filter(derivedField -> MAPVALUED.equals(derivedField.getName().getValue()))
+                .filter(derivedField -> MAPVALUED.equals(derivedField.getName()))
                 .findFirst()
                 .orElseThrow(() -> new RuntimeException("Missing derived field " + MAPVALUED));
         INLINETABLE = ((MapValues) mapValued.getExpression()).getInlineTable();
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLLocalTransformationsFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLLocalTransformationsFactoryTest.java
index bd93f31de7..b71bd94743 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLLocalTransformationsFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLLocalTransformationsFactoryTest.java
@@ -27,7 +27,6 @@ import com.github.javaparser.ast.stmt.Statement;
 import org.dmg.pmml.Constant;
 import org.dmg.pmml.DataType;
 import org.dmg.pmml.DerivedField;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.LocalTransformations;
 import org.dmg.pmml.OpType;
 import org.junit.jupiter.api.Test;
@@ -78,7 +77,7 @@ public class KiePMMLLocalTransformationsFactoryTest {
         Constant constant = new Constant();
         constant.setValue(value1);
         DerivedField toReturn = new DerivedField();
-        toReturn.setName(FieldName.create(PARAM_2 + counter));
+        toReturn.setName(PARAM_2 + counter);
         toReturn.setDataType(DataType.DOUBLE);
         toReturn.setOpType(OpType.CONTINUOUS);
         toReturn.setExpression(constant);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMapValuesFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMapValuesFactoryTest.java
index aba744b193..4607c85989 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMapValuesFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMapValuesFactoryTest.java
@@ -56,7 +56,7 @@ public class KiePMMLMapValuesFactoryTest {
         DerivedField mapValued = pmmlModel.getTransformationDictionary()
                 .getDerivedFields()
                 .stream()
-                .filter(derivedField -> MAPVALUED.equals(derivedField.getName().getValue()))
+                .filter(derivedField -> MAPVALUED.equals(derivedField.getName()))
                 .findFirst()
                 .orElseThrow(() -> new RuntimeException("Missing derived field " + MAPVALUED));
         MAPVALUES = ((MapValues) mapValued.getExpression());
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactoryTest.java
index dfed066bf4..d6f48dc730 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactoryTest.java
@@ -58,7 +58,7 @@ public class KiePMMLMiningFieldFactoryTest {
                 DATA_TYPE.class.getName() + "." + DATA_TYPE.byName(dataField.getDataType().value()).name();
         String text = getFileContent(TEST_01_SOURCE);
         Statement expected = JavaParserUtils.parseBlock(String.format(text, VARIABLE_NAME,
-                                                                      miningField.getName().getValue(),
+                                                                      miningField.getName(),
                                                                       dataTypeString));
         assertThat(JavaParserUtils.equalsNode(expected, retrieved)).isTrue();
         List<Class<?>> imports = Arrays.asList(Arrays.class, Collections.class, KiePMMLInterval.class,
@@ -80,7 +80,7 @@ public class KiePMMLMiningFieldFactoryTest {
                 DATA_TYPE.class.getName() + "." + DATA_TYPE.byName(dataField.getDataType().value()).name();
         String text = getFileContent(TEST_02_SOURCE);
         Statement expected = JavaParserUtils.parseBlock(String.format(text, VARIABLE_NAME,
-                                                                      miningField.getName().getValue(),
+                                                                      miningField.getName(),
                                                                       dataTypeString,
                                                                       dataField.getValues().get(0).getValue(),
                                                                       dataField.getValues().get(1).getValue(),
@@ -103,7 +103,7 @@ public class KiePMMLMiningFieldFactoryTest {
                 DATA_TYPE.class.getName() + "." + DATA_TYPE.byName(dataField.getDataType().value()).name();
         String text = getFileContent(TEST_03_SOURCE);
         Statement expected = JavaParserUtils.parseBlock(String.format(text, VARIABLE_NAME,
-                                                                      miningField.getName().getValue(),
+                                                                      miningField.getName(),
                                                                       dataTypeString,
                                                                       dataField.getValues().get(0).getValue(),
                                                                       dataField.getValues().get(1).getValue(),
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactoryTest.java
index 8c2652e561..84c90d861a 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactoryTest.java
@@ -56,7 +56,7 @@ public class KiePMMLNormContinuousFactoryTest {
                 OUTLIER_TREATMENT_METHOD.class.getName() + "." + OUTLIER_TREATMENT_METHOD.byName(normContinuous.getOutliers().value()).name();
         String text = getFileContent(TEST_01_SOURCE);
         Statement expected = JavaParserUtils.parseBlock(String.format(text, variableName,
-                                                                      normContinuous.getField().getValue(),
+                                                                      normContinuous.getField(),
                                                                       linearNorms.get(0).getOrig(),
                                                                       linearNorms.get(0).getNorm(),
                                                                       linearNorms.get(1).getOrig(),
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactoryTest.java
index f86b124884..e76bdd00a1 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactoryTest.java
@@ -23,7 +23,6 @@ import java.util.List;
 
 import com.github.javaparser.ast.stmt.BlockStmt;
 import com.github.javaparser.ast.stmt.Statement;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.NormDiscrete;
 import org.junit.jupiter.api.Test;
 import org.kie.pmml.commons.model.expressions.KiePMMLNormDiscrete;
@@ -45,7 +44,7 @@ public class KiePMMLNormDiscreteFactoryTest {
         double mapMissingTo = 45.32;
 
         NormDiscrete normDiscrete = new NormDiscrete();
-        normDiscrete.setField(FieldName.create(fieldName));
+        normDiscrete.setField(fieldName);
         normDiscrete.setValue(fieldValue);
         normDiscrete.setMapMissingTo(mapMissingTo);
 
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactoryTest.java
index c123f9d16e..df4a6f50cc 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactoryTest.java
@@ -24,7 +24,6 @@ import java.util.List;
 import com.github.javaparser.ast.stmt.BlockStmt;
 import com.github.javaparser.ast.stmt.Statement;
 import org.dmg.pmml.DataType;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.OpType;
 import org.dmg.pmml.ParameterField;
 import org.junit.jupiter.api.Test;
@@ -44,7 +43,7 @@ public class KiePMMLParameterFieldFactoryTest {
     @Test
     void getParameterFieldVariableDeclaration() throws IOException {
         String variableName = "variableName";
-        ParameterField parameterField = new ParameterField(FieldName.create(variableName));
+        ParameterField parameterField = new ParameterField(variableName);
         parameterField.setDataType(DataType.DOUBLE);
         parameterField.setOpType(OpType.CONTINUOUS);
         parameterField.setDisplayName("displayName");
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLRowFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLRowFactoryTest.java
index 2ebfa7b462..86e72a5cc2 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLRowFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLRowFactoryTest.java
@@ -56,14 +56,14 @@ public class KiePMMLRowFactoryTest {
         DerivedField mapValued = pmmlModel.getTransformationDictionary()
                 .getDerivedFields()
                 .stream()
-                .filter(derivedField -> MAPVALUED.equals(derivedField.getName().getValue()))
+                .filter(derivedField -> MAPVALUED.equals(derivedField.getName()))
                 .findFirst()
                 .orElseThrow(() -> new RuntimeException("Missing derived field " + MAPVALUED));
         MAPVALUED_ROW = ((MapValues) mapValued.getExpression()).getInlineTable().getRows().get(0);
         DerivedField dataEncoded = pmmlModel.getTransformationDictionary()
                 .getDerivedFields()
                 .stream()
-                .filter(derivedField -> DATAENCODED.equals(derivedField.getName().getValue()))
+                .filter(derivedField -> DATAENCODED.equals(derivedField.getName()))
                 .findFirst()
                 .orElseThrow(() -> new RuntimeException("Missing derived field " + MAPVALUED));
         DATAENCODED_ROW = ((MapValues) dataEncoded.getExpression()).getInlineTable().getRows().get(0);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactoryTest.java
index cbb71e2707..daa4580c1b 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactoryTest.java
@@ -26,7 +26,6 @@ import com.github.javaparser.ast.stmt.Statement;
 import org.dmg.pmml.DataDictionary;
 import org.dmg.pmml.DataField;
 import org.dmg.pmml.DataType;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.SimplePredicate;
 import org.junit.jupiter.api.Test;
 import org.kie.pmml.api.enums.OPERATOR;
@@ -46,7 +45,7 @@ public class KiePMMLSimplePredicateFactoryTest {
     void getSimplePredicateVariableDeclaration() throws IOException {
         String variableName = "variableName";
         final SimplePredicate simplePredicate = new SimplePredicate();
-        simplePredicate.setField(FieldName.create("CUSTOM_FIELD"));
+        simplePredicate.setField("CUSTOM_FIELD");
         simplePredicate.setValue("235.435");
         simplePredicate.setOperator(SimplePredicate.Operator.EQUAL);
         String operatorString = OPERATOR.class.getName() + "." + OPERATOR.byName(simplePredicate.getOperator().value());
@@ -59,7 +58,7 @@ public class KiePMMLSimplePredicateFactoryTest {
         BlockStmt retrieved = KiePMMLSimplePredicateFactory.getSimplePredicateVariableDeclaration(variableName, simplePredicate, getFieldsFromDataDictionary(dataDictionary));
         String text = getFileContent(TEST_01_SOURCE);
         Statement expected = JavaParserUtils.parseBlock(String.format(text, variableName,
-                                                                      simplePredicate.getField().getValue(),
+                                                                      simplePredicate.getField(),
                                                                       operatorString,
                                                                       simplePredicate.getValue()));
         assertThat(JavaParserUtils.equalsNode(expected, retrieved)).isTrue();
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactoryTest.java
index 70ab189ceb..99918b8dcc 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactoryTest.java
@@ -28,7 +28,6 @@ import org.dmg.pmml.Array;
 import org.dmg.pmml.DataDictionary;
 import org.dmg.pmml.DataField;
 import org.dmg.pmml.DataType;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.SimpleSetPredicate;
 import org.junit.jupiter.api.Test;
 import org.kie.pmml.api.enums.ARRAY_TYPE;
@@ -72,7 +71,7 @@ public class KiePMMLSimpleSetPredicateFactoryTest {
                                                                                                         simpleSetPredicate);
         String text = getFileContent(TEST_01_SOURCE);
         Statement expected = JavaParserUtils.parseBlock(String.format(text, variableName,
-                                                                      simpleSetPredicate.getField().getValue(),
+                                                                      simpleSetPredicate.getField(),
                                                                       arrayTypeString,
                                                                       booleanOperatorString,
                                                                       valuesString));
@@ -85,7 +84,7 @@ public class KiePMMLSimpleSetPredicateFactoryTest {
                                                            final SimpleSetPredicate.BooleanOperator inNotIn) {
         Array array = getArray(arrayType, values);
         SimpleSetPredicate toReturn = new SimpleSetPredicate();
-        toReturn.setField(FieldName.create(SIMPLE_SET_PREDICATE_NAME));
+        toReturn.setField(SIMPLE_SET_PREDICATE_NAME);
         toReturn.setBooleanOperator(inNotIn);
         toReturn.setArray(array);
         return toReturn;
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactoryTest.java
index 2e0b815573..138719698e 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactoryTest.java
@@ -70,7 +70,7 @@ public class KiePMMLTextIndexFactoryTest {
                                                                                       TEXTINDEX);
         String text = getFileContent(TEST_01_SOURCE);
         Statement expected = JavaParserUtils.parseBlock(String.format(text, variableName,
-                                                                      TEXTINDEX.getTextField().getValue()));
+                                                                      TEXTINDEX.getTextField()));
         assertThat(JavaParserUtils.equalsNode(expected, retrieved)).isTrue();
         List<Class<?>> imports = Arrays.asList(Arrays.class, Collections.class, Collectors.class,
                                                KiePMMLFieldRef.class, KiePMMLInlineTable.class,
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTransformationDictionaryFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTransformationDictionaryFactoryTest.java
index 8cb7786184..e1b152a939 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTransformationDictionaryFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTransformationDictionaryFactoryTest.java
@@ -29,7 +29,6 @@ import org.dmg.pmml.Constant;
 import org.dmg.pmml.DataType;
 import org.dmg.pmml.DefineFunction;
 import org.dmg.pmml.DerivedField;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.FieldRef;
 import org.dmg.pmml.OpType;
 import org.dmg.pmml.ParameterField;
@@ -86,18 +85,18 @@ public class KiePMMLTransformationDictionaryFactoryTest {
     }
 
     private DefineFunction getDefineFunction(int counter) {
-        ParameterField parameterField1 = new ParameterField(FieldName.create(PARAM_1 + counter));
+        ParameterField parameterField1 = new ParameterField(PARAM_1 + counter);
         parameterField1.setDataType(DataType.DOUBLE);
         parameterField1.setOpType(OpType.CONTINUOUS);
         parameterField1.setDisplayName("displayName1" + counter);
-        ParameterField parameterField2 = new ParameterField(FieldName.create(PARAM_2 + counter));
+        ParameterField parameterField2 = new ParameterField(PARAM_2 + counter);
         parameterField2.setDataType(DataType.DOUBLE);
         parameterField2.setOpType(OpType.CONTINUOUS);
         parameterField2.setDisplayName("displayName2" + counter);
         Constant constant = new Constant();
         constant.setValue(value1);
         FieldRef fieldRef = new FieldRef();
-        fieldRef.setField(FieldName.create("FIELD_REF" + counter));
+        fieldRef.setField("FIELD_REF" + counter);
         Apply apply = new Apply();
         apply.setFunction("/");
         apply.addExpressions(constant, fieldRef);
@@ -120,7 +119,7 @@ public class KiePMMLTransformationDictionaryFactoryTest {
         Constant constant = new Constant();
         constant.setValue(value1);
         DerivedField toReturn = new DerivedField();
-        toReturn.setName(FieldName.create(PARAM_2 + counter));
+        toReturn.setName(PARAM_2 + counter);
         toReturn.setDataType(DataType.DOUBLE);
         toReturn.setOpType(OpType.CONTINUOUS);
         toReturn.setExpression(constant);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/InstanceFactoriesTestCommon.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/InstanceFactoriesTestCommon.java
index 39a0971352..b1500c561b 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/InstanceFactoriesTestCommon.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/InstanceFactoriesTestCommon.java
@@ -109,7 +109,7 @@ public class InstanceFactoriesTestCommon {
         assertThat(toVerifyList).hasSameSizeAs(sourcesParameterFields);
         sourcesParameterFields.forEach(paramSource -> {
             Optional<KiePMMLParameterField> parameterToVerify =
-                    toVerifyList.stream().filter(param -> param.getName().equals(paramSource.getName().getValue()))
+                    toVerifyList.stream().filter(param -> param.getName().equals(paramSource.getName()))
                             .findFirst();
             assertThat(parameterToVerify).isPresent();
             commonVerifyKiePMMLParameterField(parameterToVerify.get(), paramSource);
@@ -119,24 +119,24 @@ public class InstanceFactoriesTestCommon {
     static void commonVerifyKiePMMLDerivedField(KiePMMLDerivedField toVerify,
                                                 DerivedField source) {
         assertThat(toVerify).isNotNull();
-        assertThat(toVerify.getName()).isEqualTo(source.getName().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getName());
         DATA_TYPE expectedDataType = DATA_TYPE.byName(source.getDataType().value());
         assertThat(toVerify.getDataType()).isEqualTo(expectedDataType);
         OP_TYPE expectedOpType = OP_TYPE.byName(source.getOpType().value());
         assertThat(toVerify.getOpType()).isEqualTo(expectedOpType);
-        String expectedDisplayName = "Display-" + source.getName().getValue();
+        String expectedDisplayName = "Display-" + source.getName();
         assertThat(toVerify.getDisplayName()).isEqualTo(expectedDisplayName);
         commonVerifyKiePMMLExpression(toVerify.getKiePMMLExpression(), source.getExpression());
     }
 
     static void commonVerifyKiePMMLParameterField(KiePMMLParameterField toVerify, ParameterField source) {
         assertThat(toVerify).isNotNull();
-        assertThat(toVerify.getName()).isEqualTo(source.getName().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getName());
         DATA_TYPE expectedDataType = DATA_TYPE.byName(source.getDataType().value());
         assertThat(toVerify.getDataType()).isEqualTo(expectedDataType);
         OP_TYPE expectedOpType = OP_TYPE.byName(source.getOpType().value());
         assertThat(toVerify.getOpType()).isEqualTo(expectedOpType);
-        String expectedDisplayName = "Display-" + source.getName().getValue();
+        String expectedDisplayName = "Display-" + source.getName();
         assertThat(toVerify.getDisplayName()).isEqualTo(expectedDisplayName);
     }
 
@@ -181,20 +181,20 @@ public class InstanceFactoriesTestCommon {
                                                    DataField dataField) {
         assertThat(toVerify).isNotNull();
         Object value = DATA_TYPE.byName(dataField.getDataType().value()).getActualValue(source.getValue());
-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getField());
         assertThat(toVerify.getValue()).isEqualTo(value);
         assertThat(toVerify.getOperator().getName()).isEqualTo(source.getOperator().value());
     }
 
     static void commonVerifyKiePMMLSimplePredicate(KiePMMLSimplePredicate toVerify, SimplePredicate source) {
         assertThat(toVerify).isNotNull();
-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getField());
         assertThat(toVerify.getOperator().getName()).isEqualTo(source.getOperator().value());
     }
 
     static void commonVerifyKiePMMLSimpleSetPredicate(KiePMMLSimpleSetPredicate toVerify, SimpleSetPredicate source) {
         assertThat(toVerify).isNotNull();
-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getField());
         Array array = source.getArray();
         assertThat(toVerify.getArrayType().getName()).isEqualTo(array.getType().value());
         assertThat(toVerify.getInNotIn().getName()).isEqualTo(source.getBooleanOperator().value());
@@ -273,7 +273,7 @@ public class InstanceFactoriesTestCommon {
 
     static void commonVerifyKiePMMLDiscretize(KiePMMLDiscretize toVerify, Discretize source) {
         assertThat(toVerify).isNotNull();
-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getField());
         assertThat(toVerify.getMapMissingTo()).isEqualTo(source.getMapMissingTo());
         assertThat(toVerify.getDefaultValue()).isEqualTo(source.getDefaultValue());
         assertThat(toVerify.getDataType().getName()).isEqualTo(source.getDataType().value());
@@ -283,7 +283,7 @@ public class InstanceFactoriesTestCommon {
 
     static void commonVerifyKiePMMLFieldRef(KiePMMLFieldRef toVerify, FieldRef source) {
         assertThat(toVerify).isNotNull();
-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getField());
         assertThat(toVerify.getMapMissingTo()).isEqualTo(source.getMapMissingTo());
     }
 
@@ -311,7 +311,7 @@ public class InstanceFactoriesTestCommon {
 
     static void commonVerifyKiePMMLNormDiscrete(KiePMMLNormDiscrete toVerify, NormDiscrete source) {
         assertThat(toVerify).isNotNull();
-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getField());
         assertThat(toVerify.getMapMissingTo()).isEqualTo(source.getMapMissingTo());
         assertThat(toVerify.getValue()).isEqualTo(source.getValue().toString());
     }
@@ -347,7 +347,7 @@ public class InstanceFactoriesTestCommon {
 
     static void commonVerifyKiePMMLFieldColumnPair(KiePMMLFieldColumnPair toVerify, FieldColumnPair source) {
         assertThat(toVerify).isNotNull();
-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getField());
         assertThat(toVerify.getColumn()).isEqualTo(source.getColumn());
     }
 
@@ -366,7 +366,7 @@ public class InstanceFactoriesTestCommon {
 
     static void commonVerifyKiePMMLMiningField(KiePMMLMiningField toVerify, MiningField source, DataField dataField) {
         assertThat(toVerify).isNotNull();
-        assertThat(toVerify.getName()).isEqualTo(source.getName().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getName());
         assertThat(toVerify.getOpType().getName()).isEqualTo(source.getOpType().value());
         assertThat(toVerify.getFieldUsageType().getName()).isEqualTo(source.getUsageType().value());
         assertThat(toVerify.getInvalidValueTreatmentMethod().getName()).isEqualTo(source.getInvalidValueTreatment().value());
@@ -380,10 +380,10 @@ public class InstanceFactoriesTestCommon {
 
     static void commonVerifyKiePMMLOutputField(KiePMMLOutputField toVerify, OutputField source) {
         assertThat(toVerify).isNotNull();
-        assertThat(toVerify.getName()).isEqualTo(source.getName().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getName());
         assertThat(toVerify.getValue()).isEqualTo(source.getValue());
         assertThat(toVerify.getDataType().getName()).isEqualTo(source.getDataType().value());
-        assertThat(toVerify.getTargetField().get()).isEqualTo(source.getTargetField().getValue());
+        assertThat(toVerify.getTargetField().get()).isEqualTo(source.getTargetField());
         assertThat(toVerify.getResultFeature().getName()).isEqualTo(source.getResultFeature().value());
         assertThat(toVerify.getRank()).isEqualTo(source.getRank());
         assertThat(toVerify.getValue()).isEqualTo(source.getValue());
@@ -395,7 +395,7 @@ public class InstanceFactoriesTestCommon {
         assertThat(source.getTargetValues()).hasSameSizeAs(toVerify.getTargetValues());
         OP_TYPE expectedOpType = OP_TYPE.byName(source.getOpType().value());
         assertThat(toVerify.getOpType()).isEqualTo(expectedOpType);
-        assertThat(toVerify.getField()).isEqualTo(source.getField().getValue());
+        assertThat(toVerify.getField()).isEqualTo(source.getField());
         CAST_INTEGER expectedCastInteger = CAST_INTEGER.byName(source.getCastInteger().value());
         assertThat(toVerify.getCastInteger()).isEqualTo(expectedCastInteger);
         assertThat(toVerify.getMin()).isCloseTo(source.getMin().doubleValue(), Offset.offset(0.0));
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLLocalTransformationsInstanceFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLLocalTransformationsInstanceFactoryTest.java
index 7769f9d331..d6008be920 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLLocalTransformationsInstanceFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLLocalTransformationsInstanceFactoryTest.java
@@ -44,7 +44,7 @@ public class KiePMMLLocalTransformationsInstanceFactoryTest {
         assertThat(derivedFieldsToVerify).hasSameSizeAs(derivedFields);
         derivedFields.forEach(derivedFieldSource -> {
             Optional<KiePMMLDerivedField> derivedFieldToVerify =
-                    derivedFieldsToVerify.stream().filter(param -> param.getName().equals(derivedFieldSource.getName().getValue()))
+                    derivedFieldsToVerify.stream().filter(param -> param.getName().equals(derivedFieldSource.getName()))
                             .findFirst();
             assertThat(derivedFieldToVerify).isPresent();
             commonVerifyKiePMMLDerivedField(derivedFieldToVerify.get(), derivedFieldSource);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLTransformationDictionaryInstanceFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLTransformationDictionaryInstanceFactoryTest.java
index 4082c4c622..bd9737cf9a 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLTransformationDictionaryInstanceFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLTransformationDictionaryInstanceFactoryTest.java
@@ -47,7 +47,7 @@ public class KiePMMLTransformationDictionaryInstanceFactoryTest {
         assertThat(derivedFieldsToVerify).hasSameSizeAs(derivedFields);
         derivedFields.forEach(derivedFieldSource -> {
             Optional<KiePMMLDerivedField> derivedFieldToVerify =
-                    derivedFieldsToVerify.stream().filter(param -> param.getName().equals(derivedFieldSource.getName().getValue()))
+                    derivedFieldsToVerify.stream().filter(param -> param.getName().equals(derivedFieldSource.getName()))
                             .findFirst();
             assertThat(derivedFieldToVerify).isPresent();
             commonVerifyKiePMMLDerivedField(derivedFieldToVerify.get(), derivedFieldSource);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtilTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtilTest.java
index e180e76ba6..71e791deb5 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtilTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtilTest.java
@@ -30,12 +30,13 @@ import java.util.Random;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
+import javax.xml.parsers.ParserConfigurationException;
+
 import jakarta.xml.bind.JAXBException;
 
 import org.apache.commons.lang3.RandomStringUtils;
 import org.dmg.pmml.DataField;
 import org.dmg.pmml.DataType;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.MathContext;
 import org.dmg.pmml.MiningField;
 import org.dmg.pmml.MiningFunction;
@@ -70,14 +71,14 @@ public class KiePMMLUtilTest {
     private static final String MINING_WITH_SAME_NESTED_MODEL_NAMES = "MiningWithSameNestedModelNames.pmml";
 
     @Test
-    void loadString() throws IOException, JAXBException, SAXException {
+    void loadString() throws IOException, JAXBException, SAXException, ParserConfigurationException {
         commonLoadString(NO_MODELNAME_SAMPLE_NAME);
         commonLoadString(NO_MODELNAME_NO_SEGMENTID_SAMPLE_NAME);
         commonLoadString(MINING_WITH_SAME_NESTED_MODEL_NAMES);
     }
 
     @Test
-    void loadFile() throws JAXBException, IOException, SAXException {
+    void loadFile() throws JAXBException, IOException, SAXException, ParserConfigurationException {
         commonLoadFile(NO_MODELNAME_SAMPLE_NAME);
         commonLoadFile(NO_MODELNAME_NO_SEGMENTID_SAMPLE_NAME);
         commonLoadFile(MINING_WITH_SAME_NESTED_MODEL_NAMES);
@@ -140,7 +141,7 @@ public class KiePMMLUtilTest {
         assertThat(optionalDataField).isPresent();
         DataField retrieved = optionalDataField.get();
         String expected = String.format(TARGETFIELD_TEMPLATE, "golfing");
-        assertThat(retrieved.getName().getValue()).isEqualTo(expected);
+        assertThat(retrieved.getName()).isEqualTo(expected);
     }
 
     @Test
@@ -188,23 +189,23 @@ public class KiePMMLUtilTest {
     @Test
     void getTargetMiningField() {
         final DataField dataField = new DataField();
-        dataField.setName(FieldName.create("FIELD_NAME"));
+        dataField.setName("FIELD_NAME");
         final MiningField retrieved = KiePMMLUtil.getTargetMiningField(dataField);
-        assertThat(retrieved.getName().getValue()).isEqualTo(dataField.getName().getValue());
+        assertThat(retrieved.getName()).isEqualTo(dataField.getName());
         assertThat(retrieved.getUsageType()).isEqualTo(MiningField.UsageType.TARGET);
     }
 
     @Test
     void correctTargetFields() {
-        final MiningField miningField = new MiningField(FieldName.create("FIELD_NAME"));
+        final MiningField miningField = new MiningField("FIELD_NAME");
         final Targets targets = new Targets();
         final Target namedTarget = new Target();
         String targetName = "TARGET_NAME";
-        namedTarget.setField(FieldName.create(targetName));
+        namedTarget.setField(targetName);
         final Target unnamedTarget = new Target();
         targets.addTargets(namedTarget, unnamedTarget);
         KiePMMLUtil.correctTargetFields(miningField, targets);
-        assertThat(namedTarget.getField().getValue()).isEqualTo(targetName);
+        assertThat(namedTarget.getField()).isEqualTo(targetName);
         assertThat(unnamedTarget.getField()).isEqualTo(miningField.getName());
     }
 
@@ -290,7 +291,7 @@ public class KiePMMLUtilTest {
         List<DataField> dataFields = fieldNames.stream()
                 .map(fieldName -> {
                     DataField toReturn = new DataField();
-                    toReturn.setName(FieldName.create(fieldName));
+                    toReturn.setName(fieldName);
                     DataType dataType = DataType.values()[random.nextInt(DataType.values().length)];
                     toReturn.setDataType(dataType);
                     return toReturn;
@@ -300,40 +301,40 @@ public class KiePMMLUtilTest {
                 .mapToObj(dataFields::get)
                 .map(dataField -> {
                     MiningField toReturn = new MiningField();
-                    toReturn.setName(FieldName.create(dataField.getName().getValue()));
+                    toReturn.setName(dataField.getName());
                     toReturn.setUsageType(MiningField.UsageType.ACTIVE);
                     return toReturn;
                 })
                 .collect(Collectors.toList());
         DataField lastDataField = dataFields.get(dataFields.size() - 1);
         MiningField targetMiningField = new MiningField();
-        targetMiningField.setName(FieldName.create(lastDataField.getName().getValue()));
+        targetMiningField.setName(lastDataField.getName());
         targetMiningField.setUsageType(MiningField.UsageType.TARGET);
         miningFields.add(targetMiningField);
         // Following OutputFields should be populated based on "ResultFeature.PROBABILITY"
         List<OutputField> outputFields = IntStream.range(0, 3)
                 .mapToObj(i -> {
                     OutputField toReturn = new OutputField();
-                    toReturn.setName(FieldName.create(RandomStringUtils.random(6, true, false)));
+                    toReturn.setName(RandomStringUtils.random(6, true, false));
                     toReturn.setResultFeature(ResultFeature.PROBABILITY);
                     return toReturn;
                 })
                 .collect(Collectors.toList());
         // Following OutputField should be populated based on "ResultFeature.PREDICTED_VALUE"
         OutputField targetOutputField = new OutputField();
-        targetOutputField.setName(FieldName.create(RandomStringUtils.random(6, true, false)));
+        targetOutputField.setName(RandomStringUtils.random(6, true, false));
         targetOutputField.setResultFeature(ResultFeature.PREDICTED_VALUE);
         outputFields.add(targetOutputField);
         // Following OutputField should be populated based on "TargetField" property
         OutputField targetingOutputField = new OutputField();
-        targetingOutputField.setName(FieldName.create(RandomStringUtils.random(6, true, false)));
-        targetingOutputField.setTargetField(FieldName.create(targetMiningField.getName().getValue()));
+        targetingOutputField.setName(RandomStringUtils.random(6, true, false));
+        targetingOutputField.setTargetField(targetMiningField.getName());
         outputFields.add(targetingOutputField);
         outputFields.forEach(outputField -> assertThat(outputField.getDataType()).isNull());
         IntStream.range(0, 2)
                 .forEach(i -> {
                     OutputField toAdd = new OutputField();
-                    toAdd.setName(FieldName.create(RandomStringUtils.random(6, true, false)));
+                    toAdd.setName(RandomStringUtils.random(6, true, false));
                     DataType dataType = DataType.values()[random.nextInt(DataType.values().length)];
                     toAdd.setDataType(dataType);
                     outputFields.add(toAdd);
@@ -368,7 +369,7 @@ public class KiePMMLUtilTest {
         assertThat(retrieved).isNotNull();
         assertThat(retrieved).hasSize(1);
         MiningField targetField = retrieved.get(0);
-        assertThat(targetField.getName().getValue()).isEqualTo("car_location");
+        assertThat(targetField.getName()).isEqualTo("car_location");
         assertThat(targetField.getUsageType().value()).isEqualTo("target");
     }
 
@@ -381,11 +382,11 @@ public class KiePMMLUtilTest {
         assertThat(retrieved).isNotNull();
         assertThat(retrieved).hasSize(1);
         MiningField targetField = retrieved.get(0);
-        assertThat(targetField.getName().getValue()).isEqualTo("car_location");
+        assertThat(targetField.getName()).isEqualTo("car_location");
         assertThat(targetField.getUsageType().value()).isEqualTo("target");
     }
 
-    private void commonLoadString(String fileName) throws IOException, JAXBException, SAXException {
+    private void commonLoadString(String fileName) throws IOException, JAXBException, SAXException, ParserConfigurationException {
         InputStream inputStream = getFileInputStream(fileName);
 
         StringBuilder textBuilder = new StringBuilder();
@@ -400,7 +401,8 @@ public class KiePMMLUtilTest {
         commonValidatePMML(retrieved);
     }
 
-    private void commonLoadFile(String fileName) throws IOException, JAXBException, SAXException {
+    private void commonLoadFile(String fileName) throws IOException, JAXBException, SAXException,
+            ParserConfigurationException {
         PMML retrieved = KiePMMLUtil.load(getFileInputStream(fileName), fileName);
         commonValidatePMML(retrieved);
     }
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-core/src/test/java/org/kie/pmml/compiler/testingutils/TestingModel.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-core/src/test/java/org/kie/pmml/compiler/testingutils/TestingModel.java
index 626fd4316e..1b79e8ad06 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-core/src/test/java/org/kie/pmml/compiler/testingutils/TestingModel.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-core/src/test/java/org/kie/pmml/compiler/testingutils/TestingModel.java
@@ -100,6 +100,16 @@ public class TestingModel extends Model {
         return this;
     }
 
+    @Override
+    public MiningFunction requireMiningFunction() {
+        return null;
+    }
+
+    @Override
+    public MiningSchema requireMiningSchema() {
+        return null;
+    }
+
     public String getModelName() {
         return modelName;
     }
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/main/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/main/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactory.java
index 7b7ca55b9e..e760d10cfb 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/main/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactory.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/main/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactory.java
@@ -170,7 +170,7 @@ public class KiePMMLClusteringModelFactory {
         boolean isCenterField =
                 clusteringField.getCenterField() == null || clusteringField.getCenterField() == ClusteringField.CenterField.TRUE;
         KiePMMLCompareFunction kiePMMLCompareFunction = clusteringField.getCompareFunction() != null ? compareFunctionFrom(clusteringField.getCompareFunction()) : null;
-        return new KiePMMLClusteringField(clusteringField.getField().getValue(), fieldWeight, isCenterField,
+        return new KiePMMLClusteringField(clusteringField.getField(), fieldWeight, isCenterField,
                                           kiePMMLCompareFunction, null);
     }
 
@@ -250,7 +250,7 @@ public class KiePMMLClusteringModelFactory {
                 clusteringField.getCenterField() == null || clusteringField.getCenterField() == ClusteringField.CenterField.TRUE;
 
         NodeList<Expression> arguments = new NodeList<>();
-        arguments.add(literalExprFrom(clusteringField.getField().getValue()));
+        arguments.add(literalExprFrom(clusteringField.getField()));
         arguments.add(new DoubleLiteralExpr(fieldWeight));
         arguments.add(new BooleanLiteralExpr(isCenterField));
         arguments.add(clusteringField.getCompareFunction() == null ? new NullLiteralExpr() :
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/test/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/test/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactoryTest.java
index 5fbfa7f31d..ed667d82fd 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/test/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/test/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactoryTest.java
@@ -35,7 +35,6 @@ import org.dmg.pmml.DataDictionary;
 import org.dmg.pmml.DataField;
 import org.dmg.pmml.DataType;
 import org.dmg.pmml.Euclidean;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.MiningField;
 import org.dmg.pmml.MiningFunction;
 import org.dmg.pmml.MiningSchema;
@@ -105,7 +104,7 @@ public class KiePMMLClusteringModelFactoryTest {
         IntStream.range(0, 3).forEach(i -> {
             ClusteringField clusteringField = getRandomClusteringField();
             clusteringFields.add(clusteringField);
-            fieldNames.add(clusteringField.getField().getValue());
+            fieldNames.add(clusteringField.getField());
             clusters.add(getRandomCluster());
         });
 
@@ -190,7 +189,7 @@ public class KiePMMLClusteringModelFactoryTest {
     void getKiePMMLClusteringField() {
         ClusteringField clusteringField = new ClusteringField();
         final Random random = new Random();
-        clusteringField.setField(FieldName.create("TEXT"));
+        clusteringField.setField("TEXT");
         clusteringField.setFieldWeight(random.nextDouble());
         clusteringField.setCenterField(getRandomEnum(ClusteringField.CenterField.values()));
         clusteringField.setCompareFunction(getRandomEnum(CompareFunction.values()));
@@ -253,7 +252,7 @@ public class KiePMMLClusteringModelFactoryTest {
 
         String expectedCompareFunction =
                 KiePMMLCompareFunction.class.getCanonicalName() + "." + comparisonMeasure.getCompareFunction().name();
-        String expectedTargetField = targetMiningField.getName().getValue();
+        String expectedTargetField = targetMiningField.getName();
 
         KiePMMLClusteringModelFactory.setStaticGetter(compilationDTO,
                 modelTemplate);
@@ -282,7 +281,7 @@ public class KiePMMLClusteringModelFactoryTest {
                                                       ClusteringField clusteringField) {
         assertThat(retrieved).isNotNull();
         boolean isCenterField = clusteringField.getCenterField() == ClusteringField.CenterField.TRUE;
-        assertThat(retrieved.getField()).isEqualTo(clusteringField.getField().getValue());
+        assertThat(retrieved.getField()).isEqualTo(clusteringField.getField());
         assertThat(retrieved.getFieldWeight()).isEqualTo(clusteringField.getFieldWeight());
         assertThat(retrieved.getCenterField()).isEqualTo(isCenterField);
         assertThat(retrieved.getCompareFunction()).isPresent();
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactory.java
index 06274037a0..7fb9b2133b 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactory.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactory.java
@@ -63,8 +63,8 @@ public class KiePMMLDataDictionaryASTFactory {
      * @param field
      */
     public KiePMMLDroolsType declareType(Field field) {
-        String generatedType = getGeneratedClassName(field.getName().getValue());
-        String fieldName = field.getName().getValue();
+        String generatedType = getGeneratedClassName(field.getName());
+        String fieldName = field.getName();
         String fieldType = field.getDataType().value();
         fieldTypeMap.put(fieldName, new KiePMMLOriginalTypeGeneratedType(fieldType, generatedType));
         return new KiePMMLDroolsType(generatedType, DATA_TYPE.byName(fieldType).getMappedClass().getSimpleName());
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactory.java
index e66d696e1c..54eb310615 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactory.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactory.java
@@ -60,8 +60,8 @@ public class KiePMMLDerivedFieldASTFactory {
      * @param derivedField
      */
     public KiePMMLDroolsType declareType(DerivedField derivedField) {
-        String generatedType = getSanitizedClassName(derivedField.getName().getValue().toUpperCase());
-        String fieldName = derivedField.getName().getValue();
+        String generatedType = getSanitizedClassName(derivedField.getName().toUpperCase());
+        String fieldName = derivedField.getName();
         String fieldType = derivedField.getDataType().value();
         fieldTypeMap.put(fieldName, new KiePMMLOriginalTypeGeneratedType(fieldType, generatedType));
         return new KiePMMLDroolsType(generatedType, DATA_TYPE.byName(fieldType).getMappedClass().getSimpleName());
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactory.java
index 45091cb9c4..0ca5223391 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactory.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactory.java
@@ -55,7 +55,7 @@ public class KiePMMLSimplePredicateASTFactory extends KiePMMLAbstractPredicateAS
             final KiePMMLReasonCodeAndValue reasonCodeAndValue,
             final boolean isLastCharacteristic) {
         logger.trace("declareRuleFromSimplePredicateSurrogate {} {} {} {}", agendaActivationGroup, toAccumulate, statusToSet, isLastCharacteristic);
-        String fieldName = predicateASTFactoryData.getFieldTypeMap().get(((SimplePredicate) predicateASTFactoryData.getPredicate()).getField().getValue()).getGeneratedType();
+        String fieldName = predicateASTFactoryData.getFieldTypeMap().get(((SimplePredicate) predicateASTFactoryData.getPredicate()).getField()).getGeneratedType();
         String surrogateCurrentRule = String.format(KiePMMLAbstractModelASTFactory.SURROGATE_RULENAME_PATTERN, predicateASTFactoryData.getCurrentRule(), fieldName);
         final List<KiePMMLFieldOperatorValue> constraints = Collections.singletonList(KiePMMLASTFactoryUtils.getConstraintEntryFromSimplePredicates(fieldName, BOOLEAN_OPERATOR.SURROGATE, Collections.singletonList((SimplePredicate) predicateASTFactoryData.getPredicate()), predicateASTFactoryData.getFieldTypeMap()));
         // Create "TRUE" matcher
@@ -79,7 +79,7 @@ public class KiePMMLSimplePredicateASTFactory extends KiePMMLAbstractPredicateAS
             final Object result,
             boolean isFinalLeaf) {
         logger.trace("declareRuleFromSimplePredicateSurrogate {} {} {}", agendaActivationGroup, result, isFinalLeaf);
-        String fieldName = predicateASTFactoryData.getFieldTypeMap().get(((SimplePredicate) predicateASTFactoryData.getPredicate()).getField().getValue()).getGeneratedType();
+        String fieldName = predicateASTFactoryData.getFieldTypeMap().get(((SimplePredicate) predicateASTFactoryData.getPredicate()).getField()).getGeneratedType();
         String surrogateCurrentRule = String.format(KiePMMLAbstractModelASTFactory.SURROGATE_RULENAME_PATTERN, predicateASTFactoryData.getCurrentRule(), fieldName);
         final List<KiePMMLFieldOperatorValue> constraints = Collections.singletonList(KiePMMLASTFactoryUtils.getConstraintEntryFromSimplePredicates(fieldName, BOOLEAN_OPERATOR.SURROGATE, Collections.singletonList((SimplePredicate) predicateASTFactoryData.getPredicate()), predicateASTFactoryData.getFieldTypeMap()));
         String statusToSet = isFinalLeaf ? DONE : predicateASTFactoryData.getCurrentRule();
@@ -215,7 +215,7 @@ public class KiePMMLSimplePredicateASTFactory extends KiePMMLAbstractPredicateAS
     protected KiePMMLDroolsRule.Builder getBuilderForSimplePredicate(final String statusToSet) {
         logger.trace("getBuilderForSimplePredicate {}", statusToSet);
         String statusConstraint = StringUtils.isEmpty(predicateASTFactoryData.getParentPath()) ? KiePMMLAbstractModelASTFactory.STATUS_NULL : String.format(STATUS_PATTERN, predicateASTFactoryData.getParentPath());
-        String key = predicateASTFactoryData.getFieldTypeMap().get(((SimplePredicate) predicateASTFactoryData.getPredicate()).getField().getValue()).getGeneratedType();
+        String key = predicateASTFactoryData.getFieldTypeMap().get(((SimplePredicate) predicateASTFactoryData.getPredicate()).getField()).getGeneratedType();
         OPERATOR operator = OPERATOR.byName(((SimplePredicate) predicateASTFactoryData.getPredicate()).getOperator().value());
         Object value = KiePMMLASTFactoryUtils.getCorrectlyFormattedObject(((SimplePredicate) predicateASTFactoryData.getPredicate()), predicateASTFactoryData.getFieldTypeMap());
         List<KiePMMLFieldOperatorValue> andConstraints = Collections.singletonList(new KiePMMLFieldOperatorValue(key, BOOLEAN_OPERATOR.AND, Collections.singletonList(new KiePMMLOperatorValue(operator, value)), null));
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateASTFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateASTFactory.java
index 3cd8657705..6f7028f782 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateASTFactory.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateASTFactory.java
@@ -72,11 +72,11 @@ public class KiePMMLSimpleSetPredicateASTFactory extends KiePMMLAbstractPredicat
         logger.trace("declareRuleFromSimpleSetPredicate {}", statusToSet);
         String statusConstraint = StringUtils.isEmpty(predicateASTFactoryData.getParentPath()) ? STATUS_NULL : String.format(STATUS_PATTERN, predicateASTFactoryData.getParentPath());
         SimpleSetPredicate simpleSetPredicate = (SimpleSetPredicate) predicateASTFactoryData.getPredicate();
-        String key = predicateASTFactoryData.getFieldTypeMap().get(simpleSetPredicate.getField().getValue()).getGeneratedType();
+        String key = predicateASTFactoryData.getFieldTypeMap().get(simpleSetPredicate.getField()).getGeneratedType();
         String stringValue = (String) simpleSetPredicate.getArray().getValue();
         String[] valuesArray = stringValue.split(" ");
         List<Object> value = Arrays.stream(valuesArray).map(rawValue -> {
-            String originalType = predicateASTFactoryData.getFieldTypeMap().get(simpleSetPredicate.getField().getValue()).getOriginalType();
+            String originalType = predicateASTFactoryData.getFieldTypeMap().get(simpleSetPredicate.getField()).getOriginalType();
             switch (originalType) {
                 case "string":
                     return "\"" + rawValue + "\"";
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtils.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtils.java
index 491df26632..35b5ffa32e 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtils.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtils.java
@@ -55,7 +55,7 @@ public class KiePMMLASTFactoryUtils {
         }
         final Map<String, List<SimplePredicate>> predicatesByField = simplePredicates.stream()
                 .map(child -> (SimplePredicate) child)
-                .collect(groupingBy(child -> fieldTypeMap.get(child.getField().getValue()).getGeneratedType()));
+                .collect(groupingBy(child -> fieldTypeMap.get(child.getField()).getGeneratedType()));
         final List<KiePMMLFieldOperatorValue> toReturn = new LinkedList<>();
         populateKiePMMLFieldOperatorValueListWithSimplePredicates(toReturn, compoundPredicate.getBooleanOperator(), predicatesByField, fieldTypeMap);
         final List<CompoundPredicate> compoundPredicates = compoundPredicate.getPredicates().stream()
@@ -113,7 +113,7 @@ public class KiePMMLASTFactoryUtils {
                 .filter(predicate -> predicate instanceof SimplePredicate)
                 .map(predicate -> {
                     SimplePredicate simplePredicate = (SimplePredicate) predicate;
-                    String fieldName = fieldTypeMap.get(simplePredicate.getField().getValue()).getGeneratedType();
+                    String fieldName = fieldTypeMap.get(simplePredicate.getField()).getGeneratedType();
                     OPERATOR operator = OPERATOR.byName(simplePredicate.getOperator().value());
                     Object value = getCorrectlyFormattedObject(simplePredicate, fieldTypeMap);
                     return new KiePMMLFieldOperatorValue(fieldName, null, Collections.singletonList(new KiePMMLOperatorValue(operator, value)), null);
@@ -121,7 +121,7 @@ public class KiePMMLASTFactoryUtils {
     }
 
     public static Object getCorrectlyFormattedObject(final SimplePredicate simplePredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {
-        DATA_TYPE dataType = DATA_TYPE.byName(fieldTypeMap.get(simplePredicate.getField().getValue()).getOriginalType());
+        DATA_TYPE dataType = DATA_TYPE.byName(fieldTypeMap.get(simplePredicate.getField()).getOriginalType());
         return getCorrectlyFormattedResult(simplePredicate.getValue(), dataType);
     }
 
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLCompoundPredicateASTFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLCompoundPredicateASTFactoryTest.java
index 7f39b545f3..874ffd5b6b 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLCompoundPredicateASTFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLCompoundPredicateASTFactoryTest.java
@@ -170,7 +170,7 @@ public class KiePMMLCompoundPredicateASTFactoryTest {
                         .findFirst();
                 if (fieldName.isPresent()) {
                     SimplePredicate mappedPredicate = predicates.stream()
-                            .filter(pred -> fieldName.get().equals(pred.getField().getValue()))
+                            .filter(pred -> fieldName.get().equals(pred.getField()))
                             .findFirst()
                             .orElse(null);
                     assertThat(mappedPredicate).isNotNull();
@@ -235,7 +235,7 @@ public class KiePMMLCompoundPredicateASTFactoryTest {
                         .findFirst();
                 if (fieldName.isPresent()) {
                     SimplePredicate mappedPredicate = predicates.stream()
-                            .filter(pred -> fieldName.get().equals(pred.getField().getValue())).findFirst().orElse(null);
+                            .filter(pred -> fieldName.get().equals(pred.getField())).findFirst().orElse(null);
                     assertThat(mappedPredicate).isNotNull();
                     assertThat(retrieved.getStatusConstraint()).isNull();
                     assertThat(retrieved.getActivationGroup()).isEqualTo(agendaActivationGroup);
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactoryTest.java
index 7425a8e4d1..14ae0fae86 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactoryTest.java
@@ -40,7 +40,8 @@ public class KiePMMLDataDictionaryASTFactoryTest {
     @Test
     void declareTypes() {
         List<DataField> dataFields = Arrays.asList(getTypeDataField(), getDottedTypeDataField(), getTypeDataField(), getDottedTypeDataField());
-        DataDictionary dataDictionary = new DataDictionary(dataFields);
+        DataDictionary dataDictionary = new DataDictionary();
+        dataDictionary.addDataFields(dataFields.toArray(new DataField[0]));
         final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();
         List<KiePMMLDroolsType> retrieved = KiePMMLDataDictionaryASTFactory.factory(fieldTypeMap).declareTypes(getFieldsFromDataDictionary(dataDictionary));
         assertThat(retrieved).isNotNull();
@@ -58,12 +59,12 @@ public class KiePMMLDataDictionaryASTFactoryTest {
     }
 
     private void commonVerifyTypeDeclarationDescr(DataField dataField, Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final KiePMMLDroolsType kiePMMLDroolsType) {
-        String expectedGeneratedType = getSanitizedClassName(dataField.getName().getValue());
+        String expectedGeneratedType = getSanitizedClassName(dataField.getName());
         String expectedMappedOriginalType = DATA_TYPE.byName(dataField.getDataType().value()).getMappedClass().getSimpleName();
         assertThat(kiePMMLDroolsType.getName()).startsWith(expectedGeneratedType);
         assertThat(kiePMMLDroolsType.getType()).isEqualTo(expectedMappedOriginalType);
-        assertThat(fieldTypeMap).containsKey(dataField.getName().getValue());
-        KiePMMLOriginalTypeGeneratedType kiePMMLOriginalTypeGeneratedType = fieldTypeMap.get(dataField.getName().getValue());
+        assertThat(fieldTypeMap).containsKey(dataField.getName());
+        KiePMMLOriginalTypeGeneratedType kiePMMLOriginalTypeGeneratedType = fieldTypeMap.get(dataField.getName());
         assertThat(kiePMMLOriginalTypeGeneratedType.getOriginalType()).isEqualTo(dataField.getDataType().value());
         assertThat(kiePMMLOriginalTypeGeneratedType.getGeneratedType()).startsWith(expectedGeneratedType);
     }
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactoryTest.java
index cb32a1c418..380954b52b 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactoryTest.java
@@ -25,7 +25,6 @@ import java.util.stream.IntStream;
 
 import org.dmg.pmml.DataType;
 import org.dmg.pmml.DerivedField;
-import org.dmg.pmml.FieldName;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.kie.pmml.api.enums.DATA_TYPE;
@@ -67,7 +66,7 @@ public class KiePMMLDerivedFieldASTFactoryTest {
     }
 
     private void commonValidateKiePMMLDroolsType(KiePMMLDroolsType toValidate, DerivedField derivedField) {
-        String derivedFieldName = derivedField.getName().getValue();
+        String derivedFieldName = derivedField.getName();
         String expectedName = getSanitizedClassName(derivedFieldName.toUpperCase());
         assertThat(toValidate.getName()).isEqualTo(expectedName);
         String expectedType = DATA_TYPE.byName(derivedField.getDataType().value()).getMappedClass().getSimpleName();
@@ -80,7 +79,7 @@ public class KiePMMLDerivedFieldASTFactoryTest {
 
     private DerivedField getDerivedField(String fieldName) {
         DerivedField toReturn = new DerivedField();
-        toReturn.setName(FieldName.create(fieldName));
+        toReturn.setName(fieldName);
         final DATA_TYPE[] values = DATA_TYPE.values();
         int rndInt = new Random().nextInt(values.length - 1);
         DATA_TYPE dataType = values[rndInt];
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactoryTest.java
index eda072a71e..08fbb62ee3 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactoryTest.java
@@ -65,7 +65,7 @@ public class KiePMMLSimplePredicateASTFactoryTest {
         assertThat(retrieved).isNotNull();
         String baseExpectedRule = String.format(KiePMMLAbstractModelASTFactory.SURROGATE_RULENAME_PATTERN,
                 currentRule,
-                fieldTypeMap.get(simplePredicate.getField().getValue()).getGeneratedType());
+                fieldTypeMap.get(simplePredicate.getField()).getGeneratedType());
         String expectedRule = baseExpectedRule + "_TRUE";
         assertThat(retrieved.getName()).isEqualTo(expectedRule);
         assertThat(retrieved.getStatusToSet()).isEqualTo(DONE);
@@ -133,7 +133,7 @@ public class KiePMMLSimplePredicateASTFactoryTest {
         assertThat(retrieved).isNotNull();
         String baseExpectedRule = String.format(KiePMMLAbstractModelASTFactory.SURROGATE_RULENAME_PATTERN,
                 currentRule,
-                fieldTypeMap.get(simplePredicate.getField().getValue()).getGeneratedType());
+                fieldTypeMap.get(simplePredicate.getField()).getGeneratedType());
         String expectedRule = baseExpectedRule + "_TRUE";
         assertThat(retrieved.getName()).isEqualTo(expectedRule);
         assertThat(retrieved.getStatusToSet()).isEqualTo(currentRule);
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactoryTest.java
index 1c5c90e631..1d3192f47b 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactoryTest.java
@@ -20,7 +20,6 @@ import java.util.Collections;
 import java.util.List;
 import java.util.StringJoiner;
 
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.OutputField;
 import org.dmg.pmml.ResultFeature;
 import org.drools.drl.ast.dsl.DescrFactory;
@@ -164,7 +163,7 @@ public class KiePMMLDescrRhsFactoryTest {
         String outputFieldName = "OUTPUTFIELDNAME";
         Object result = "RESULT";
         OutputField outputField = new OutputField();
-        outputField.setName(FieldName.create(outputFieldName));
+        outputField.setName(outputFieldName);
         outputField.setResultFeature(ResultFeature.PREDICTED_VALUE);
         List<OutputField> outputFields = Collections.singletonList(outputField);
         KiePMMLDroolsRule.Builder builder = KiePMMLDroolsRule.builder(ruleName, statusToSet, outputFields);
@@ -209,7 +208,7 @@ public class KiePMMLDescrRhsFactoryTest {
         String outputFieldName = "OUTPUTFIELDNAME";
         Object result = "RESULT";
         OutputField outputField = new OutputField();
-        outputField.setName(FieldName.create(outputFieldName));
+        outputField.setName(outputFieldName);
         outputField.setResultFeature(ResultFeature.PREDICTED_VALUE);
         List<OutputField> outputFields = Collections.singletonList(outputField);
         StringJoiner joiner = new StringJoiner("");
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/provider/DroolsModelProviderTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/provider/DroolsModelProviderTest.java
index 5d2096f1d8..4461cfb39e 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/provider/DroolsModelProviderTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/provider/DroolsModelProviderTest.java
@@ -181,7 +181,7 @@ public class DroolsModelProviderTest {
     private void commonVerifyTypesList(Field<?> toVerify, final List<KiePMMLDroolsType> types) {
         assertThat(types.stream()
                            .anyMatch(type -> {
-                               String expectedName = getSanitizedClassName(toVerify.getName().getValue());
+                               String expectedName = getSanitizedClassName(toVerify.getName());
                                if (!type.getName().startsWith(expectedName)) {
                                    return false;
                                }
@@ -206,13 +206,13 @@ public class DroolsModelProviderTest {
                                           final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {
         assertThat(fieldTypeMap.entrySet().stream()
                            .anyMatch(entry -> {
-                               if (!entry.getKey().equals(toVerify.getName().getValue())) {
+                               if (!entry.getKey().equals(toVerify.getName())) {
                                    return false;
                                }
                                KiePMMLOriginalTypeGeneratedType value = entry.getValue();
                                assertThat(value.getOriginalType()).isEqualTo(toVerify.getDataType().value());
                                String expectedGeneratedType =
-                                       getSanitizedClassName(toVerify.getName().getValue());
+                                       getSanitizedClassName(toVerify.getName());
                                assertThat(value.getGeneratedType()).startsWith(expectedGeneratedType);
                                return true;
                            })).isTrue();
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtilsTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtilsTest.java
index e0c824f1d3..ddfa79ee1b 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtilsTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtilsTest.java
@@ -195,7 +195,7 @@ public class KiePMMLASTFactoryUtilsTest {
                             kiePMMLFieldOperatorValue.getKiePMMLOperatorValues().get(0);
                     SimplePredicate simplePredicate = nestedPredicates.stream()
                             .map(predicate -> (SimplePredicate) predicate)
-                            .filter(predicate -> predicate.getField().getValue().equals(getOriginalPredicateName(kiePMMLFieldOperatorValue.getName())))
+                            .filter(predicate -> predicate.getField().equals(getOriginalPredicateName(kiePMMLFieldOperatorValue.getName())))
                             .findFirst()
                             .orElseThrow(() -> new RuntimeException("Failed to find SimplePredicate for " + kiePMMLFieldOperatorValue.getName()));
                     commonVerifyKiePMMLOperatorValue(kiePMMLOperatorValue, simplePredicate);
@@ -208,7 +208,7 @@ public class KiePMMLASTFactoryUtilsTest {
 
     private void commonPopulateKiePMMLFieldOperatorValueListWithSimplePredicates(CompoundPredicate.BooleanOperator compoundBooleanOperator, BOOLEAN_OPERATOR booleanOperator) {
         final Map<String, List<SimplePredicate>> predicatesByField = simplePredicates.stream()
-                .collect(groupingBy(child -> fieldTypeMap.get(child.getField().getValue()).getGeneratedType()));
+                .collect(groupingBy(child -> fieldTypeMap.get(child.getField()).getGeneratedType()));
         final List<KiePMMLFieldOperatorValue> toPopulate = new ArrayList<>();
         KiePMMLASTFactoryUtils.populateKiePMMLFieldOperatorValueListWithSimplePredicates(toPopulate,
                                                                                          compoundBooleanOperator,
@@ -258,7 +258,7 @@ public class KiePMMLASTFactoryUtilsTest {
     private SimplePredicate getSimplePredicate(String generatedType) {
         String predicateName = getOriginalPredicateName(generatedType);
         return simplePredicates.stream()
-                .filter(simplePredicate -> simplePredicate.getField().getValue().equals(predicateName))
+                .filter(simplePredicate -> simplePredicate.getField().equals(predicateName))
                 .findFirst()
                 .orElseThrow(() -> new RuntimeException("Failed to find SimplePredicate for " + predicateName));
     }
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTTestUtils.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTTestUtils.java
index 3e160ea62a..488c28cc07 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTTestUtils.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTTestUtils.java
@@ -22,7 +22,6 @@ import java.util.Map;
 import org.dmg.pmml.DataDictionary;
 import org.dmg.pmml.DataField;
 import org.dmg.pmml.DataType;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.LocalTransformations;
 import org.dmg.pmml.OpType;
 import org.dmg.pmml.OutputField;
@@ -67,7 +66,7 @@ public class KiePMMLASTTestUtils {
         DataField toReturn = new DataField();
         toReturn.setOpType(OpType.CONTINUOUS);
         toReturn.setDataType(DataType.DATE);
-        toReturn.setName(FieldName.create("dataField"));
+        toReturn.setName("dataField");
         return toReturn;
     }
 
@@ -75,7 +74,7 @@ public class KiePMMLASTTestUtils {
         DataField toReturn = new DataField();
         toReturn.setOpType(OpType.CONTINUOUS);
         toReturn.setDataType(DataType.BOOLEAN);
-        toReturn.setName(FieldName.create("dotted.field"));
+        toReturn.setName("dotted.field");
         return toReturn;
     }
 
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLDroolsModelFactoryUtilsTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLDroolsModelFactoryUtilsTest.java
index 28fdafd02a..c0def4217e 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLDroolsModelFactoryUtilsTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLDroolsModelFactoryUtilsTest.java
@@ -42,7 +42,6 @@ import com.github.javaparser.ast.stmt.Statement;
 import org.dmg.pmml.DataDictionary;
 import org.dmg.pmml.DataField;
 import org.dmg.pmml.DataType;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.MiningField;
 import org.dmg.pmml.MiningFunction;
 import org.dmg.pmml.MiningSchema;
@@ -84,13 +83,12 @@ public class KiePMMLDroolsModelFactoryUtilsTest {
     void getKiePMMLModelCompilationUnit() {
         DataDictionary dataDictionary = new DataDictionary();
         String targetFieldString = "target.field";
-        FieldName targetFieldName = FieldName.create(targetFieldString);
-        dataDictionary.addDataFields(new DataField(targetFieldName, OpType.CONTINUOUS, DataType.DOUBLE));
+        dataDictionary.addDataFields(new DataField(targetFieldString, OpType.CONTINUOUS, DataType.DOUBLE));
         String modelName = "ModelName";
         TreeModel model = new TreeModel();
         model.setModelName(modelName);
         model.setMiningFunction(MiningFunction.CLASSIFICATION);
-        MiningField targetMiningField = new MiningField(targetFieldName);
+        MiningField targetMiningField = new MiningField(targetFieldString);
         targetMiningField.setUsageType(MiningField.UsageType.TARGET);
         MiningSchema miningSchema = new MiningSchema();
         miningSchema.addMiningFields(targetMiningField);
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/test/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelCharacteristicASTFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/test/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelCharacteristicASTFactoryTest.java
index 16d50cd211..da91f6748f 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/test/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelCharacteristicASTFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/test/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelCharacteristicASTFactoryTest.java
@@ -368,7 +368,7 @@ public class KiePMMLScorecardModelCharacteristicASTFactoryTest {
         DATA_TYPE dataType = dataDictionary.getDataFields().stream().filter(dataField -> dataField.getName().equals(simplePredicate.getField()))
                 .map(dataField -> DATA_TYPE.byName(dataField.getDataType().value()))
                 .findFirst()
-                .orElseThrow(() -> new RuntimeException("Failed to find DataField for " + simplePredicate.getField().getValue()));
+                .orElseThrow(() -> new RuntimeException("Failed to find DataField for " + simplePredicate.getField()));
         return getCorrectlyFormattedResult(simplePredicate.getValue(), dataType);
     }
 
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/test/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/test/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactoryTest.java
index 22d3cb65c1..d48aff5c66 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/test/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/test/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactoryTest.java
@@ -98,7 +98,7 @@ public class KiePMMLTreeModelFactoryTest {
         assertThat(retrieved).isNotNull();
         List<DataField> dataFields = dataDictionary.getDataFields();
         assertThat(fieldTypeMap).hasSameSizeAs(dataFields);
-        dataFields.forEach(dataField -> assertThat(fieldTypeMap).containsKey(dataField.getName().getValue()));
+        dataFields.forEach(dataField -> assertThat(fieldTypeMap).containsKey(dataField.getName()));
     }
 
     @Test
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/AbstractKiePMMLFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/AbstractKiePMMLFactoryTest.java
index 393c4f4343..83e43e92e4 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/AbstractKiePMMLFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/AbstractKiePMMLFactoryTest.java
@@ -20,6 +20,8 @@ import java.io.FileInputStream;
 import java.io.IOException;
 import java.util.List;
 
+import javax.xml.parsers.ParserConfigurationException;
+
 import jakarta.xml.bind.JAXBException;
 
 import org.dmg.pmml.DataDictionary;
@@ -54,7 +56,7 @@ public abstract class AbstractKiePMMLFactoryTest {
     protected static List<DerivedField> DERIVED_FIELDS;
     protected static String targetFieldName;
 
-    protected static void innerSetup() throws JAXBException, SAXException, IOException {
+    protected static void innerSetup() throws JAXBException, SAXException, IOException, ParserConfigurationException {
         FileInputStream fis = FileUtils.getFileInputStream(SOURCE_MIXED);
         pmml = KiePMMLUtil.load(fis, SOURCE_MIXED);
         assertThat(pmml).isNotNull();
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactoryTest.java
index 2554e57472..e44e4ffc3e 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactoryTest.java
@@ -22,6 +22,8 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+import javax.xml.parsers.ParserConfigurationException;
+
 import jakarta.xml.bind.JAXBException;
 
 import com.github.javaparser.ast.CompilationUnit;
@@ -60,7 +62,7 @@ public class KiePMMLMiningModelFactoryTest extends AbstractKiePMMLFactoryTest {
     private static ClassOrInterfaceDeclaration MODEL_TEMPLATE;
 
     @BeforeAll
-    public static void setup() throws IOException, JAXBException, SAXException {
+    public static void setup() throws IOException, JAXBException, SAXException, ParserConfigurationException {
         innerSetup();
         COMPILATION_UNIT = getFromFileName(TEMPLATE_SOURCE);
         MODEL_TEMPLATE = COMPILATION_UNIT.getClassByName(TEMPLATE_CLASS_NAME).get();
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentFactoryTest.java
index dea1cd9abd..d3289ec7d0 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentFactoryTest.java
@@ -22,6 +22,8 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+import javax.xml.parsers.ParserConfigurationException;
+
 import jakarta.xml.bind.JAXBException;
 
 import com.github.javaparser.ast.CompilationUnit;
@@ -65,7 +67,7 @@ public class KiePMMLSegmentFactoryTest extends AbstractKiePMMLFactoryTest {
     private static ClassOrInterfaceDeclaration MODEL_TEMPLATE;
 
     @BeforeAll
-    public static void setup() throws IOException, JAXBException, SAXException {
+    public static void setup() throws IOException, JAXBException, SAXException, ParserConfigurationException {
         innerSetup();
         COMPILATION_UNIT_BASE = getFromFileName(KIE_PMML_SEGMENT_TEMPLATE_JAVA);
     }
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentationFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentationFactoryTest.java
index bbd01cae21..6022822bca 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentationFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentationFactoryTest.java
@@ -21,6 +21,8 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 
+import javax.xml.parsers.ParserConfigurationException;
+
 import jakarta.xml.bind.JAXBException;
 
 import org.dmg.pmml.mining.MiningModel;
@@ -38,7 +40,7 @@ import static org.kie.pmml.commons.Constants.PACKAGE_NAME;
 public class KiePMMLSegmentationFactoryTest extends AbstractKiePMMLFactoryTest {
 
     @BeforeAll
-    public static void setup() throws IOException, JAXBException, SAXException {
+    public static void setup() throws IOException, JAXBException, SAXException, ParserConfigurationException {
         innerSetup();
     }
 
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java
index d843728fb0..7bad53f380 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java
@@ -191,7 +191,7 @@ public class RegressionModelImplementationProvider implements ModelImplementatio
         if (targetFields.size() != 1) {
             throw new KiePMMLException("Expected one target field, retrieved " + targetFields.size());
         }
-        if (toValidate.getTargetField() != null && !(Objects.equals(toValidate.getTargetField().getValue(),
+        if (toValidate.getTargetField() != null && !(Objects.equals(toValidate.getTargetField(),
                                                                     targetFields.get(0).getName()))) {
             throw new KiePMMLException(String.format("Not-matching target fields: %s %s", toValidate.getTargetField()
                     , targetFields.get(0).getName()));
@@ -206,7 +206,7 @@ public class RegressionModelImplementationProvider implements ModelImplementatio
         return fields.stream()
                 .filter(DataField.class::isInstance)
                 .map(DataField.class::cast)
-                .filter(dataField -> Objects.equals(dataField.getName().getValue(), categoricalFieldName)).mapToDouble(dataField -> dataField.getValues().size())
+                .filter(dataField -> Objects.equals(dataField.getName(), categoricalFieldName)).mapToDouble(dataField -> dataField.getValues().size())
                 .findFirst().orElse(0) == 2;
     }
 
@@ -214,7 +214,7 @@ public class RegressionModelImplementationProvider implements ModelImplementatio
         List<KiePMMLNameOpType> targetFields = getTargetFields(fields, toValidate);
         final List<String> categoricalFields = fields.stream()
                 .filter(dataField -> OpType.CATEGORICAL.equals(dataField.getOpType()))
-                .map(dataField -> dataField.getName().getValue())
+                .map(dataField -> dataField.getName())
                 .collect(Collectors.toList());
         final List<KiePMMLNameOpType> categoricalNameTypes =
                 targetFields.stream().filter(targetField -> categoricalFields.contains(targetField.getName())).collect(Collectors.toList());
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactory.java
index fcffd3bb09..dda96e7873 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactory.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactory.java
@@ -203,7 +203,7 @@ public class KiePMMLRegressionTableFactory {
      */
     static Map<String, SerializableFunction<Double, Double>> getNumericPredictorsMap(final List<NumericPredictor> numericPredictors) {
         return numericPredictors.stream()
-                .collect(Collectors.toMap(numericPredictor -> numericPredictor.getName().getValue(),
+                .collect(Collectors.toMap(numericPredictor -> numericPredictor.getField(),
                                           KiePMMLRegressionTableFactory::getNumericPredictorEntry));
     }
 
@@ -232,7 +232,7 @@ public class KiePMMLRegressionTableFactory {
      */
     static Map<String, SerializableFunction<String, Double>> getCategoricalPredictorsMap(final List<CategoricalPredictor> categoricalPredictors) {
         final Map<String, List<CategoricalPredictor>> groupedCollectors = categoricalPredictors.stream()
-                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField().getValue()));
+                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField()));
         return groupedCollectors.entrySet().stream()
                 .map(entry -> {
                     Map<String, Double> groupedCategoricalPredictorMap =
@@ -273,7 +273,7 @@ public class KiePMMLRegressionTableFactory {
         return predictorTerms.stream()
                 .map(predictorTerm -> {
                     int arity = predictorsArity.addAndGet(1);
-                    String variableName = predictorTerm.getName() != null ? predictorTerm.getName().getValue() :
+                    String variableName = predictorTerm.getName() != null ? predictorTerm.getName() :
                             "predictorTermFunction" + arity;
                     return new AbstractMap.SimpleEntry<>(variableName,
                                                          getPredictorTermSerializableFunction(predictorTerm));
@@ -292,7 +292,7 @@ public class KiePMMLRegressionTableFactory {
         return resultMap -> {
             final AtomicReference<Double> result = new AtomicReference<>(1.0);
             final List<String> fieldRefs = predictorTerm.getFieldRefs().stream()
-                    .map(fieldRef -> fieldRef.getField().getValue())
+                    .map(fieldRef -> fieldRef.getField())
                     .collect(Collectors.toList());
             for (Map.Entry<String, Object> entry : resultMap.entrySet()) {
                 if (fieldRefs.contains(entry.getKey())) {
@@ -440,7 +440,7 @@ public class KiePMMLRegressionTableFactory {
      */
     static Map<String, Expression> getNumericPredictorsExpressions(final List<NumericPredictor> numericPredictors) {
         return numericPredictors.stream()
-                .collect(Collectors.toMap(numericPredictor -> numericPredictor.getName().getValue(),
+                .collect(Collectors.toMap(numericPredictor -> numericPredictor.getField(),
                                           KiePMMLRegressionTableFactory::getNumericPredictorExpression));
     }
 
@@ -489,7 +489,7 @@ public class KiePMMLRegressionTableFactory {
      */
     static Map<String, Expression> getCategoricalPredictorsExpressions(final List<CategoricalPredictor> categoricalPredictors, final BlockStmt body, final String variableName) {
         final Map<String, List<CategoricalPredictor>> groupedCollectors = categoricalPredictors.stream()
-                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField().getValue()));
+                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField()));
         final String categoricalPredictorMapNameBase = getSanitizedVariableName(String.format("%sMap", variableName));
         final AtomicInteger counter = new AtomicInteger();
         return groupedCollectors.entrySet().stream()
@@ -578,7 +578,7 @@ public class KiePMMLRegressionTableFactory {
         return predictorTerms.stream()
                 .map(predictorTerm -> {
                     int arity = predictorsArity.addAndGet(1);
-                    String variableName = predictorTerm.getName() != null ? predictorTerm.getName().getValue() :
+                    String variableName = predictorTerm.getName() != null ? predictorTerm.getName() :
                             "predictorTermFunction" + arity;
                     return new AbstractMap.SimpleEntry<>(variableName,
                                                          getPredictorTermFunction(predictorTerm));
@@ -627,7 +627,7 @@ public class KiePMMLRegressionTableFactory {
                     .orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_VARIABLE_IN_BODY,
                                                                                   "fieldRefs", body)));
             final List<Expression> nodeList = predictorTerm.getFieldRefs().stream()
-                    .map(fieldRef -> new StringLiteralExpr(fieldRef.getField().getValue()))
+                    .map(fieldRef -> new StringLiteralExpr(fieldRef.getField()))
                     .collect(Collectors.toList());
             NodeList<Expression> expressions = NodeList.nodeList(nodeList);
             MethodCallExpr methodCallExpr = new MethodCallExpr(new NameExpr("Arrays"), "asList", expressions);
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/AbstractKiePMMLRegressionTableRegressionFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/AbstractKiePMMLRegressionTableRegressionFactoryTest.java
index 3e609be3e3..7f2102ba0b 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/AbstractKiePMMLRegressionTableRegressionFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/AbstractKiePMMLRegressionTableRegressionFactoryTest.java
@@ -64,8 +64,8 @@ public abstract class AbstractKiePMMLRegressionTableRegressionFactoryTest {
             IntStream.range(0, 2).forEach(j -> categoricalPredictors.add(getCategoricalPredictor("CatPred-" + i, 27.12, 3.46)));
             numericPredictors.add(getNumericPredictor("NumPred-" + i, 2, 13.11));
             predictorTerms.add(getPredictorTerm("PredTerm-" + i, 32.29,
-                                                Arrays.asList(categoricalPredictors.get(0).getName().getValue(),
-                                                              numericPredictors.get(0).getName().getValue())));
+                                                Arrays.asList(categoricalPredictors.get(0).getField(),
+                                                              numericPredictors.get(0).getField())));
         });
         return PMMLModelTestUtils.getRegressionTable(categoricalPredictors, numericPredictors, predictorTerms, intercept, targetCategory);
     }
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLClassificationTableFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLClassificationTableFactoryTest.java
index 20c679fb09..f49fff8e01 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLClassificationTableFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLClassificationTableFactoryTest.java
@@ -28,7 +28,6 @@ import com.github.javaparser.ast.expr.Expression;
 import com.github.javaparser.ast.expr.MethodReferenceExpr;
 import org.dmg.pmml.DataDictionary;
 import org.dmg.pmml.DataField;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.MiningField;
 import org.dmg.pmml.MiningSchema;
 import org.dmg.pmml.OpType;
@@ -88,7 +87,7 @@ public class KiePMMLClassificationTableFactoryTest extends AbstractKiePMMLRegres
 
         String targetField = "targetField";
         DataField dataField = new DataField();
-        dataField.setName(FieldName.create(targetField));
+        dataField.setName(targetField);
         dataField.setOpType(OpType.CATEGORICAL);
         DataDictionary dataDictionary = new DataDictionary();
         dataDictionary.addDataFields(dataField);
@@ -129,7 +128,7 @@ public class KiePMMLClassificationTableFactoryTest extends AbstractKiePMMLRegres
         boolean isBinary = regressionModel.getRegressionTables().size() == 2;
         assertThat(retrieved.isBinary()).isEqualTo(isBinary);
         assertThat(retrieved.isBinary()).isEqualTo(isBinary);
-        assertThat(retrieved.getTargetField()).isEqualTo(targetMiningField.getName().getValue());
+        assertThat(retrieved.getTargetField()).isEqualTo(targetMiningField.getName());
     }
 
     @Test
@@ -142,7 +141,7 @@ public class KiePMMLClassificationTableFactoryTest extends AbstractKiePMMLRegres
 
         String targetField = "targetField";
         DataField dataField = new DataField();
-        dataField.setName(FieldName.create(targetField));
+        dataField.setName(targetField);
         dataField.setOpType(OpType.CATEGORICAL);
         DataDictionary dataDictionary = new DataDictionary();
         dataDictionary.addDataFields(dataField);
@@ -193,7 +192,7 @@ public class KiePMMLClassificationTableFactoryTest extends AbstractKiePMMLRegres
 
         String targetField = "targetField";
         DataField dataField = new DataField();
-        dataField.setName(FieldName.create(targetField));
+        dataField.setName(targetField);
         dataField.setOpType(OpType.CATEGORICAL);
         DataDictionary dataDictionary = new DataDictionary();
         dataDictionary.addDataFields(dataField);
@@ -279,7 +278,7 @@ public class KiePMMLClassificationTableFactoryTest extends AbstractKiePMMLRegres
 
         String targetField = "targetField";
         DataField dataField = new DataField();
-        dataField.setName(FieldName.create(targetField));
+        dataField.setName(targetField);
         dataField.setOpType(OpType.CATEGORICAL);
         DataDictionary dataDictionary = new DataDictionary();
         dataDictionary.addDataFields(dataField);
@@ -371,10 +370,10 @@ public class KiePMMLClassificationTableFactoryTest extends AbstractKiePMMLRegres
 
     private OutputField getOutputField(String name, ResultFeature resultFeature, String targetField) {
         OutputField toReturn = new OutputField();
-        toReturn.setName(FieldName.create(name));
+        toReturn.setName(name);
         toReturn.setResultFeature(resultFeature);
         if (targetField != null) {
-            toReturn.setTargetField(FieldName.create(targetField));
+            toReturn.setTargetField(targetField);
         }
         return toReturn;
     }
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java
index c5ef91a5eb..2bd3a8a9dc 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java
@@ -164,7 +164,7 @@ public class KiePMMLRegressionModelFactoryTest {
         assertThat(retrieved).isNotNull();
         assertThat(retrieved.getName()).isEqualTo(regressionModel.getModelName());
         assertThat(retrieved.getMiningFunction()).isEqualTo(MINING_FUNCTION.byName(regressionModel.getMiningFunction().value()));
-        assertThat(retrieved.getTargetField()).isEqualTo(miningFields.get(0).getName().getValue());
+        assertThat(retrieved.getTargetField()).isEqualTo(miningFields.get(0).getName());
         final AbstractKiePMMLTable regressionTable = retrieved.getRegressionTable();
         assertThat(regressionTable).isNotNull();
         assertThat(regressionTable).isInstanceOf(KiePMMLClassificationTable.class);
@@ -225,7 +225,7 @@ public class KiePMMLRegressionModelFactoryTest {
         Map<Integer, Expression> superInvocationExpressionsMap = new HashMap<>();
         superInvocationExpressionsMap.put(0, new NameExpr(String.format("\"%s\"", regressionModel.getModelName())));
         Map<String, Expression> assignExpressionMap = new HashMap<>();
-        assignExpressionMap.put("targetField", new StringLiteralExpr(targetMiningField.getName().getValue()));
+        assignExpressionMap.put("targetField", new StringLiteralExpr(targetMiningField.getName()));
         assignExpressionMap.put("miningFunction",
                 new NameExpr(miningFunction.getClass().getName() + "." + miningFunction.name()));
         assignExpressionMap.put("pmmlMODEL",
@@ -258,17 +258,17 @@ public class KiePMMLRegressionModelFactoryTest {
         final Map<String, SerializableFunction<Double, Double>> numericFunctionMap =
                 regressionTable.getNumericFunctionMap();
         for (NumericPredictor numericPredictor : originalRegressionTable.getNumericPredictors()) {
-            assertThat(numericFunctionMap).containsKey(numericPredictor.getName().getValue());
+            assertThat(numericFunctionMap).containsKey(numericPredictor.getField());
         }
         final Map<String, SerializableFunction<String, Double>> categoricalFunctionMap =
                 regressionTable.getCategoricalFunctionMap();
         for (CategoricalPredictor categoricalPredictor : originalRegressionTable.getCategoricalPredictors()) {
-        	assertThat(categoricalFunctionMap).containsKey(categoricalPredictor.getName().getValue());
+        	assertThat(categoricalFunctionMap).containsKey(categoricalPredictor.getField());
         }
         final Map<String, SerializableFunction<Map<String, Object>, Double>> predictorTermsFunctionMap =
                 regressionTable.getPredictorTermsFunctionMap();
         for (PredictorTerm predictorTerm : originalRegressionTable.getPredictorTerms()) {
-        	assertThat(predictorTermsFunctionMap).containsKey(predictorTerm.getName().getValue());
+        	assertThat(predictorTermsFunctionMap).containsKey(predictorTerm.getName());
         }
     }
 }
\ No newline at end of file
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactoryTest.java
index ba88fb6bd1..15535e60db 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactoryTest.java
@@ -41,7 +41,6 @@ import com.github.javaparser.ast.stmt.ExpressionStmt;
 import org.assertj.core.data.Offset;
 import org.dmg.pmml.DataDictionary;
 import org.dmg.pmml.DataField;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.MiningField;
 import org.dmg.pmml.MiningSchema;
 import org.dmg.pmml.OpType;
@@ -111,7 +110,7 @@ public class KiePMMLRegressionTableFactoryTest extends AbstractKiePMMLRegression
         regressionModel.setModelName(getGeneratedClassName("RegressionModel"));
         String targetField = "targetField";
         DataField dataField = new DataField();
-        dataField.setName(FieldName.create(targetField));
+        dataField.setName(targetField);
         dataField.setOpType(OpType.CATEGORICAL);
         DataDictionary dataDictionary = new DataDictionary();
         dataDictionary.addDataFields(dataField);
@@ -154,7 +153,7 @@ public class KiePMMLRegressionTableFactoryTest extends AbstractKiePMMLRegression
         regressionModel.setModelName(getGeneratedClassName("RegressionModel"));
         String targetField = "targetField";
         DataField dataField = new DataField();
-        dataField.setName(FieldName.create(targetField));
+        dataField.setName(targetField);
         dataField.setOpType(OpType.CATEGORICAL);
         DataDictionary dataDictionary = new DataDictionary();
         dataDictionary.addDataFields(dataField);
@@ -192,7 +191,7 @@ public class KiePMMLRegressionTableFactoryTest extends AbstractKiePMMLRegression
         regressionModel.setModelName(getGeneratedClassName("RegressionModel"));
         String targetField = "targetField";
         DataField dataField = new DataField();
-        dataField.setName(FieldName.create(targetField));
+        dataField.setName(targetField);
         dataField.setOpType(OpType.CATEGORICAL);
         DataDictionary dataDictionary = new DataDictionary();
         dataDictionary.addDataFields(dataField);
@@ -231,7 +230,7 @@ public class KiePMMLRegressionTableFactoryTest extends AbstractKiePMMLRegression
         regressionModel.setModelName(getGeneratedClassName("RegressionModel"));
         String targetField = "targetField";
         DataField dataField = new DataField();
-        dataField.setName(FieldName.create(targetField));
+        dataField.setName(targetField);
         dataField.setOpType(OpType.CATEGORICAL);
         DataDictionary dataDictionary = new DataDictionary();
         dataDictionary.addDataFields(dataField);
@@ -316,7 +315,7 @@ public class KiePMMLRegressionTableFactoryTest extends AbstractKiePMMLRegression
         Map<String, SerializableFunction<String, Double>> retrieved =
                 KiePMMLRegressionTableFactory.getCategoricalPredictorsMap(categoricalPredictors);
         final Map<String, List<CategoricalPredictor>> groupedCollectors = categoricalPredictors.stream()
-                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField().getValue()));
+                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField()));
         assertThat(retrieved).hasSameSizeAs(groupedCollectors);
         groupedCollectors.keySet().forEach(predictName -> assertThat(retrieved).containsKey(predictName));
     }
@@ -355,7 +354,7 @@ public class KiePMMLRegressionTableFactoryTest extends AbstractKiePMMLRegression
         assertThat(retrieved).hasSameSizeAs(predictorTerms);
         IntStream.range(0, predictorTerms.size()).forEach(index -> {
             PredictorTerm predictorTerm = predictorTerms.get(index);
-            assertThat(retrieved).containsKey(predictorTerm.getName().getValue());
+            assertThat(retrieved).containsKey(predictorTerm.getName());
         });
     }
 
@@ -392,7 +391,7 @@ public class KiePMMLRegressionTableFactoryTest extends AbstractKiePMMLRegression
         regressionModel.setModelName(getGeneratedClassName("RegressionModel"));
         String targetField = "targetField";
         DataField dataField = new DataField();
-        dataField.setName(FieldName.create(targetField));
+        dataField.setName(targetField);
         dataField.setOpType(OpType.CATEGORICAL);
         DataDictionary dataDictionary = new DataDictionary();
         dataDictionary.addDataFields(dataField);
@@ -531,7 +530,7 @@ public class KiePMMLRegressionTableFactoryTest extends AbstractKiePMMLRegression
                         "variableName");
         assertThat(retrieved).hasSize(3);
         final Map<String, List<CategoricalPredictor>> groupedCollectors = categoricalPredictors.stream()
-                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField().getValue()));
+                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField()));
 
         groupedCollectors.values().forEach(categoricalPredictors12 -> commonEvaluateCategoryPredictors(body,
                 categoricalPredictors12, "variableName"));
@@ -586,7 +585,7 @@ public class KiePMMLRegressionTableFactoryTest extends AbstractKiePMMLRegression
         assertThat(retrieved).hasSameSizeAs(predictorTerms);
         IntStream.range(0, predictorTerms.size()).forEach(index -> {
             PredictorTerm predictorTerm = predictorTerms.get(index);
-            assertThat(retrieved).containsKey(predictorTerm.getName().getValue());
+            assertThat(retrieved).containsKey(predictorTerm.getName());
         });
     }
 
@@ -607,17 +606,17 @@ public class KiePMMLRegressionTableFactoryTest extends AbstractKiePMMLRegression
     private void commonEvaluateRegressionTable(KiePMMLRegressionTable retrieved, RegressionTable source) {
         Map<String, SerializableFunction<Double, Double>> numericFunctionMap = retrieved.getNumericFunctionMap();
         assertThat(numericFunctionMap).hasSameSizeAs(source.getNumericPredictors());
-        source.getNumericPredictors().forEach(numericPredictor -> assertThat(numericFunctionMap).containsKey(numericPredictor.getName().getValue()));
+        source.getNumericPredictors().forEach(numericPredictor -> assertThat(numericFunctionMap).containsKey(numericPredictor.getField()));
         Map<String, SerializableFunction<String, Double>> categoricalFunctionMap =
                 retrieved.getCategoricalFunctionMap();
         Map<String, List<CategoricalPredictor>> groupedCollectors = categoricalPredictors.stream()
-                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField().getValue()));
+                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField()));
         assertThat(categoricalFunctionMap).hasSameSizeAs(groupedCollectors);
         groupedCollectors.keySet().forEach(categorical -> assertThat(categoricalFunctionMap).containsKey(categorical));
         Map<String, SerializableFunction<Map<String, Object>, Double>> predictorTermsFunctionMap =
                 retrieved.getPredictorTermsFunctionMap();
         assertThat(predictorTermsFunctionMap).hasSameSizeAs(source.getPredictorTerms());
-        source.getPredictorTerms().forEach(predictorTerm -> assertThat(predictorTermsFunctionMap).containsKey(predictorTerm.getName().getValue()));
+        source.getPredictorTerms().forEach(predictorTerm -> assertThat(predictorTermsFunctionMap).containsKey(predictorTerm.getName()));
     }
 
     private void commonEvaluateCategoryPredictors(final BlockStmt toVerify,
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-scorecard/kie-pmml-models-scorecard-compiler/src/test/java/org/kie/pmml/models/scorecard/compiler/factories/KiePMMLComplexPartialScoreFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-scorecard/kie-pmml-models-scorecard-compiler/src/test/java/org/kie/pmml/models/scorecard/compiler/factories/KiePMMLComplexPartialScoreFactoryTest.java
index f39bd5ffe9..caa052c97b 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-scorecard/kie-pmml-models-scorecard-compiler/src/test/java/org/kie/pmml/models/scorecard/compiler/factories/KiePMMLComplexPartialScoreFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-scorecard/kie-pmml-models-scorecard-compiler/src/test/java/org/kie/pmml/models/scorecard/compiler/factories/KiePMMLComplexPartialScoreFactoryTest.java
@@ -24,7 +24,6 @@ import com.github.javaparser.ast.stmt.BlockStmt;
 import com.github.javaparser.ast.stmt.Statement;
 import org.dmg.pmml.Apply;
 import org.dmg.pmml.Constant;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.FieldRef;
 import org.dmg.pmml.scorecard.ComplexPartialScore;
 import org.junit.jupiter.api.Test;
@@ -69,14 +68,14 @@ public class KiePMMLComplexPartialScoreFactoryTest {
     void getComplexPartialScoreVariableDeclarationWithFieldRef() throws IOException {
         final String variableName = "variableName";
         FieldRef fieldRef = new FieldRef();
-        fieldRef.setField(FieldName.create("FIELD_REF"));
+        fieldRef.setField("FIELD_REF");
         ComplexPartialScore complexPartialScore = new ComplexPartialScore();
         complexPartialScore.setExpression(fieldRef);
         BlockStmt retrieved =
                 KiePMMLComplexPartialScoreFactory.getComplexPartialScoreVariableDeclaration(variableName,
                         complexPartialScore);
         String text = getFileContent(TEST_02_SOURCE);
-        Statement expected = JavaParserUtils.parseBlock(String.format(text, fieldRef.getField().getValue(),
+        Statement expected = JavaParserUtils.parseBlock(String.format(text, fieldRef.getField(),
                 variableName));
         assertThat(retrieved).isEqualTo(expected);
         List<Class<?>> imports = Arrays.asList(KiePMMLFieldRef.class,
@@ -91,7 +90,7 @@ public class KiePMMLComplexPartialScoreFactoryTest {
         Constant constant = new Constant();
         constant.setValue(value1);
         FieldRef fieldRef = new FieldRef();
-        fieldRef.setField(FieldName.create("FIELD_REF"));
+        fieldRef.setField("FIELD_REF");
         Apply apply = new Apply();
         apply.setFunction("/");
         apply.addExpressions(constant, fieldRef);
@@ -103,7 +102,7 @@ public class KiePMMLComplexPartialScoreFactoryTest {
         String text = getFileContent(TEST_03_SOURCE);
         Statement expected = JavaParserUtils.parseBlock(String.format(text,
                 constant.getValue(),
-                fieldRef.getField().getValue(),
+                fieldRef.getField(),
                 apply.getFunction(),
                 apply.getInvalidValueTreatment().value(),
                 variableName));
diff --git a/kie-test-util/pom.xml b/kie-test-util/pom.xml
index ad36ad2be7..b30b3206db 100644
--- a/kie-test-util/pom.xml
+++ b/kie-test-util/pom.xml
@@ -32,6 +32,12 @@
         <artifactId>simple-jndi</artifactId>
         <version>${version.simple-jndi}</version>
       </dependency>
+
+      <dependency>
+        <groupId>org.jboss.narayana.jta</groupId>
+        <artifactId>narayana-jta-jakarta</artifactId>
+        <version>${version.org.jboss.narayana.jta.narayana-jta-jakarta}</version>
+      </dependency>
     </dependencies>
   </dependencyManagement>
 
@@ -64,7 +70,6 @@
     <dependency>
       <groupId>org.jboss.narayana.jta</groupId>
       <artifactId>narayana-jta-jakarta</artifactId>
-      <version>5.13.1.Final</version>
     </dependency>
     <dependency>
       <groupId>org.jboss</groupId>
diff --git a/update_quarkus3_issues_56_PMML-trusty_code_fixing.patch b/update_quarkus3_issues_56_PMML-trusty_code_fixing.patch
new file mode 100644
index 0000000000..e2b663421a
--- /dev/null
+++ b/update_quarkus3_issues_56_PMML-trusty_code_fixing.patch
@@ -0,0 +1,3412 @@
+Subject: [PATCH] [kie-issues#56] PMML-trusty code fixing
+---
+Index: kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/enums/builtinfunctions/StringFunctions.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/enums/builtinfunctions/StringFunctions.java b/kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/enums/builtinfunctions/StringFunctions.java
+--- a/kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/enums/builtinfunctions/StringFunctions.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/enums/builtinfunctions/StringFunctions.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -17,6 +17,7 @@
+ 
+ import java.util.Arrays;
+ import java.util.Date;
++import java.util.Locale;
+ import java.util.regex.Pattern;
+ import java.util.stream.Collectors;
+ 
+@@ -154,7 +155,7 @@
+         checkString(inputData[1]);
+         Number input = (Number) inputData[0];
+         String pattern = ((String) inputData[1]);
+-        return String.format(pattern, input);
++        return String.format(Locale.US, pattern, input);
+     }
+ 
+     private String formatDatetime(final Object[] inputData) {
+Index: kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/expressions/KiePMMLApply.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/expressions/KiePMMLApply.java b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/expressions/KiePMMLApply.java
+--- a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/expressions/KiePMMLApply.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/expressions/KiePMMLApply.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -36,8 +36,8 @@
+ 
+     private static final long serialVersionUID = -6975232157053159223L;
+     private final String function;
+-    private String mapMissingTo;
+-    private String defaultValue;
++    private Object mapMissingTo;
++    private Object defaultValue;
+     private INVALID_VALUE_TREATMENT_METHOD invalidValueTreatmentMethod;
+     private List<KiePMMLExpression> kiePMMLExpressions;
+ 
+@@ -84,11 +84,11 @@
+         return function;
+     }
+ 
+-    public String getMapMissingTo() {
++    public Object getMapMissingTo() {
+         return mapMissingTo;
+     }
+ 
+-    public String getDefaultValue() {
++    public Object getDefaultValue() {
+         return defaultValue;
+     }
+ 
+@@ -138,14 +138,14 @@
+             super("Apply-", () -> new KiePMMLApply(name, extensions, function));
+         }
+ 
+-        public Builder withMapMissingTo(String mapMissingTo) {
++        public Builder withMapMissingTo(Object mapMissingTo) {
+             if (mapMissingTo != null) {
+                 toBuild.mapMissingTo = mapMissingTo;
+             }
+             return this;
+         }
+ 
+-        public Builder withDefaultValue(String defaultValue) {
++        public Builder withDefaultValue(Object defaultValue) {
+             if (defaultValue != null) {
+                 toBuild.defaultValue = defaultValue;
+             }
+Index: kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/expressions/KiePMMLFieldRef.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/expressions/KiePMMLFieldRef.java b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/expressions/KiePMMLFieldRef.java
+--- a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/expressions/KiePMMLFieldRef.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/expressions/KiePMMLFieldRef.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -30,14 +30,14 @@
+ public class KiePMMLFieldRef extends AbstractKiePMMLComponent implements KiePMMLExpression {
+ 
+     private static final long serialVersionUID = 4576394527423997787L;
+-    private String mapMissingTo;
++    private Object mapMissingTo;
+ 
+-    public KiePMMLFieldRef(String name, List<KiePMMLExtension> extensions, String mapMissingTo) {
++    public KiePMMLFieldRef(String name, List<KiePMMLExtension> extensions, Object mapMissingTo) {
+         super(name, extensions);
+         this.mapMissingTo = mapMissingTo;
+     }
+ 
+-    public String getMapMissingTo() {
++    public Object getMapMissingTo() {
+         return mapMissingTo;
+     }
+ 
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/dto/CommonCompilationDTO.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/dto/CommonCompilationDTO.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/dto/CommonCompilationDTO.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/dto/CommonCompilationDTO.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/dto/CommonCompilationDTO.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -116,7 +116,7 @@
+             targetDataField = this.fields.stream()
+                     .filter(DataField.class::isInstance)
+                     .map(DataField.class::cast)
+-                    .filter(field -> Objects.equals(getTargetFieldName(), field.getName().getValue()))
++                    .filter(field -> Objects.equals(getTargetFieldName(), field.getName()))
+                     .findFirst().orElse(null);
+         } else {
+             targetDataField = null;
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/utils/ModelUtils.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/utils/ModelUtils.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/utils/ModelUtils.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/utils/ModelUtils.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/utils/ModelUtils.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -48,8 +48,8 @@
+ import org.dmg.pmml.Targets;
+ import org.dmg.pmml.TransformationDictionary;
+ import org.dmg.pmml.Value;
+-import org.jpmml.model.inlinetable.InputCell;
+-import org.jpmml.model.inlinetable.OutputCell;
++import org.jpmml.model.cells.InputCell;
++import org.jpmml.model.cells.OutputCell;
+ import org.kie.pmml.api.enums.CAST_INTEGER;
+ import org.kie.pmml.api.enums.DATA_TYPE;
+ import org.kie.pmml.api.enums.FIELD_USAGE_TYPE;
+@@ -120,8 +120,8 @@
+         if (model.getMiningSchema() != null && model.getMiningSchema().getMiningFields() != null) {
+             for (MiningField miningField : model.getMiningSchema().getMiningFields()) {
+                 if (MiningField.UsageType.TARGET.equals(miningField.getUsageType()) || MiningField.UsageType.PREDICTED.equals(miningField.getUsageType())) {
+-                    OP_TYPE opType = getOpType(fields, model, miningField.getName().getValue());
+-                    toReturn.add(new KiePMMLNameOpType(miningField.getName().getValue(), opType));
++                    OP_TYPE opType = getOpType(fields, model, miningField.getName());
++                    toReturn.add(new KiePMMLNameOpType(miningField.getName(), opType));
+                 }
+             }
+         }
+@@ -142,8 +142,8 @@
+         if (model.getMiningSchema() != null && model.getMiningSchema().getMiningFields() != null) {
+             for (MiningField miningField : model.getMiningSchema().getMiningFields()) {
+                 if (MiningField.UsageType.TARGET.equals(miningField.getUsageType()) || MiningField.UsageType.PREDICTED.equals(miningField.getUsageType())) {
+-                    toReturn.put(miningField.getName().getValue(), getDATA_TYPE(fields,
+-                                                                                miningField.getName().getValue()));
++                    toReturn.put(miningField.getName(), getDATA_TYPE(fields,
++                                                                                miningField.getName()));
+                 }
+             }
+         }
+@@ -179,7 +179,7 @@
+                                                         final String fieldName) {
+         return fields == null ? Optional.empty() :
+                 fields.stream()
+-                        .filter(dataField -> Objects.equals(fieldName, dataField.getName().getValue()) && dataField.getOpType() != null)
++                        .filter(dataField -> Objects.equals(fieldName, dataField.getName()) && dataField.getOpType() != null)
+                         .map(dataField -> OP_TYPE.byName(dataField.getOpType().value()))
+                         .findFirst();
+     }
+@@ -193,7 +193,7 @@
+     public static Optional<OP_TYPE> getOpTypeFromMiningFields(MiningSchema miningSchema, String fieldName) {
+         if (miningSchema != null && miningSchema.getMiningFields() != null) {
+             return miningSchema.getMiningFields().stream()
+-                    .filter(miningField -> Objects.equals(fieldName, miningField.getName().getValue()) && miningField.getOpType() != null)
++                    .filter(miningField -> Objects.equals(fieldName, miningField.getName()) && miningField.getOpType() != null)
+                     .findFirst()
+                     .map(dataField -> OP_TYPE.byName(dataField.getOpType().value()));
+         } else {
+@@ -210,7 +210,7 @@
+     public static Optional<OP_TYPE> getOpTypeFromTargets(Targets targets, String fieldName) {
+         if (targets != null && targets.getTargets() != null) {
+             return targets.getTargets().stream()
+-                    .filter(target -> Objects.equals(fieldName, target.getField().getValue()) && target.getOpType() != null)
++                    .filter(target -> Objects.equals(fieldName, target.getField()) && target.getOpType() != null)
+                     .findFirst()
+                     .map(dataField -> OP_TYPE.byName(dataField.getOpType().value()));
+         } else {
+@@ -228,7 +228,7 @@
+     public static DataType getDataType(final List<Field<?>> fields,
+                                        final String fieldName) {
+         return fields.stream()
+-                .filter(fld -> Objects.equals(fieldName, fld.getName().getValue()))
++                .filter(fld -> Objects.equals(fieldName, fld.getName()))
+                 .map(Field::getDataType)
+                 .findFirst()
+                 .orElseThrow(() -> new KiePMMLInternalException(String.format("Failed to find DataType for " +
+@@ -244,7 +244,7 @@
+      */
+     public static DATA_TYPE getDATA_TYPE(final List<Field<?>> fields, String fieldName) {
+         Optional<DATA_TYPE> toReturn = fields.stream()
+-                .filter(fld -> Objects.equals(fieldName, fld.getName().getValue()))
++                .filter(fld -> Objects.equals(fieldName, fld.getName()))
+                 .findFirst()
+                 .map(dataField -> DATA_TYPE.byName(dataField.getDataType().value()));
+         return toReturn.orElseThrow(() -> new KiePMMLInternalException(String.format("Failed to find DATA_TYPE for " +
+@@ -328,7 +328,7 @@
+      */
+     public static org.kie.pmml.api.models.MiningField convertToKieMiningField(final MiningField toConvert,
+                                                                               final Field<?> field) {
+-        final String name = toConvert.getName() != null ? toConvert.getName().getValue() : null;
++        final String name = toConvert.getName() != null ? toConvert.getName() : null;
+         final FIELD_USAGE_TYPE fieldUsageType = toConvert.getUsageType() != null ?
+                 FIELD_USAGE_TYPE.byName(toConvert.getUsageType().value()) : null;
+         final OP_TYPE opType = toConvert.getOpType() != null ? OP_TYPE.byName(toConvert.getOpType().value()) : null;
+@@ -405,13 +405,13 @@
+      */
+     public static org.kie.pmml.api.models.OutputField convertToKieOutputField(final OutputField toConvert,
+                                                                               final Field<?> field) {
+-        final String name = toConvert.getName() != null ? toConvert.getName().getValue() : null;
++        final String name = toConvert.getName() != null ? toConvert.getName() : null;
+         final OP_TYPE opType = toConvert.getOpType() != null ? OP_TYPE.byName(toConvert.getOpType().value()) : null;
+         final DATA_TYPE dataFieldDataType = field != null ? DATA_TYPE.byName(field.getDataType().value()) :
+                 null;
+         final DATA_TYPE dataType = toConvert.getDataType() != null ?
+                 DATA_TYPE.byName(toConvert.getDataType().value()) : dataFieldDataType;
+-        final String targetField = toConvert.getTargetField() != null ? toConvert.getTargetField().getValue() : null;
++        final String targetField = toConvert.getTargetField() != null ? toConvert.getTargetField() : null;
+         final RESULT_FEATURE resultFeature = toConvert.getResultFeature() != null ?
+                 RESULT_FEATURE.byName(toConvert.getResultFeature().value()) : null;
+         final List<String> allowedValues = field instanceof DataField ?
+@@ -457,7 +457,7 @@
+         final Double rescaleFactor = toConvert.getRescaleFactor() != null ? toConvert.getRescaleFactor().doubleValue() : null;
+         return new TargetField(targetValues,
+                                opType,
+-                               toConvert.getField().getValue(),
++                               toConvert.getField(),
+                                castInteger,
+                                min,
+                                max,
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/mocks/TestModel.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/mocks/TestModel.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/mocks/TestModel.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/mocks/TestModel.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/mocks/TestModel.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -64,6 +64,16 @@
+         return this;
+     }
+ 
++    @Override
++    public MiningFunction requireMiningFunction() {
++        return null;
++    }
++
++    @Override
++    public MiningSchema requireMiningSchema() {
++        return null;
++    }
++
+     public String getAlgorithmName() {
+         return this.algorithmName;
+     }
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/PMMLModelTestUtils.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/PMMLModelTestUtils.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/PMMLModelTestUtils.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/PMMLModelTestUtils.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/PMMLModelTestUtils.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -28,6 +28,7 @@
+ import org.dmg.pmml.Array;
+ import org.dmg.pmml.CompareFunction;
+ import org.dmg.pmml.ComparisonMeasure;
++import org.dmg.pmml.ComplexScoreDistribution;
+ import org.dmg.pmml.CompoundPredicate;
+ import org.dmg.pmml.Constant;
+ import org.dmg.pmml.DataDictionary;
+@@ -40,7 +41,6 @@
+ import org.dmg.pmml.Euclidean;
+ import org.dmg.pmml.Field;
+ import org.dmg.pmml.FieldColumnPair;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.FieldRef;
+ import org.dmg.pmml.InlineTable;
+ import org.dmg.pmml.Interval;
+@@ -64,6 +64,7 @@
+ import org.dmg.pmml.ResultFeature;
+ import org.dmg.pmml.Row;
+ import org.dmg.pmml.ScoreDistribution;
++import org.dmg.pmml.ScoreProbability;
+ import org.dmg.pmml.SimplePredicate;
+ import org.dmg.pmml.SimpleSetPredicate;
+ import org.dmg.pmml.TableLocator;
+@@ -86,8 +87,8 @@
+ import org.dmg.pmml.regression.PredictorTerm;
+ import org.dmg.pmml.regression.RegressionModel;
+ import org.dmg.pmml.regression.RegressionTable;
+-import org.jpmml.model.inlinetable.InputCell;
+-import org.jpmml.model.inlinetable.OutputCell;
++import org.jpmml.model.cells.InputCell;
++import org.jpmml.model.cells.OutputCell;
+ import org.kie.pmml.api.enums.DATA_TYPE;
+ import org.kie.pmml.api.enums.Named;
+ import org.kie.pmml.api.enums.RESULT_FEATURE;
+@@ -191,7 +192,7 @@
+         miningSchema.addMiningFields(predictedMiningField);
+         Output output = new Output();
+         OutputField outputField = new OutputField();
+-        outputField.setName(FieldName.create("OUTPUT_" + lastDataField.getName().getValue()));
++        outputField.setName("OUTPUT_" + lastDataField.getName());
+         outputField.setDataType(lastDataField.getDataType());
+         outputField.setOpType(getRandomOpType());
+         toReturn.setModelName(RandomStringUtils.random(6, true, false));
+@@ -219,7 +220,7 @@
+         miningSchema.addMiningFields(predictedMiningField);
+         Output output = new Output();
+         OutputField outputField = new OutputField();
+-        outputField.setName(FieldName.create("OUTPUT_" + lastDataField.getName().getValue()));
++        outputField.setName("OUTPUT_" + lastDataField.getName());
+         outputField.setDataType(lastDataField.getDataType());
+         outputField.setOpType(getRandomOpType());
+         toReturn.setModelName(RandomStringUtils.random(6, true, false));
+@@ -279,7 +280,7 @@
+ 
+     public static CategoricalPredictor getCategoricalPredictor(String name, double value, double coefficient) {
+         CategoricalPredictor toReturn = new CategoricalPredictor();
+-        toReturn.setField(FieldName.create(name));
++        toReturn.setField(name);
+         toReturn.setValue(value);
+         toReturn.setCoefficient(coefficient);
+         return toReturn;
+@@ -287,7 +288,7 @@
+ 
+     public static NumericPredictor getNumericPredictor(String name, int exponent, double coefficient) {
+         NumericPredictor toReturn = new NumericPredictor();
+-        toReturn.setField(FieldName.create(name));
++        toReturn.setField(name);
+         toReturn.setExponent(exponent);
+         toReturn.setCoefficient(coefficient);
+         return toReturn;
+@@ -295,7 +296,7 @@
+ 
+     public static PredictorTerm getPredictorTerm(String name, double coefficient, List<String> fieldRefNames) {
+         PredictorTerm toReturn = new PredictorTerm();
+-        toReturn.setName(FieldName.create(name));
++        toReturn.setName(name);
+         toReturn.setCoefficient(coefficient);
+         toReturn.addFieldRefs(fieldRefNames.stream().map(PMMLModelTestUtils::getFieldRef).toArray(FieldRef[]::new));
+         return toReturn;
+@@ -320,7 +321,7 @@
+ 
+     public static DataField getDataField(String fieldName, OpType opType) {
+         DataField toReturn = new DataField();
+-        toReturn.setName(FieldName.create(fieldName));
++        toReturn.setName(fieldName);
+         toReturn.setOpType(opType);
+         return toReturn;
+     }
+@@ -333,14 +334,14 @@
+ 
+     public static MiningField getMiningField(String fieldName, MiningField.UsageType usageType) {
+         MiningField toReturn = getRandomMiningField();
+-        toReturn.setName(FieldName.create(fieldName));
++        toReturn.setName(fieldName);
+         toReturn.setUsageType(usageType);
+         return toReturn;
+     }
+ 
+     public static Target getTarget(String fieldTarget, OpType opType) {
+         Target toReturn = new Target();
+-        toReturn.setField(FieldName.create(fieldTarget));
++        toReturn.setField(fieldTarget);
+         toReturn.setOpType(opType);
+         return toReturn;
+     }
+@@ -359,7 +360,7 @@
+ 
+     public static DerivedField getDerivedField(String fieldName) {
+         DerivedField toReturn = new DerivedField();
+-        toReturn.setName(FieldName.create(fieldName));
++        toReturn.setName(fieldName);
+         toReturn.setDataType(getRandomDataType());
+         toReturn.setOpType(getRandomOpType());
+         Constant expression = new Constant(5);
+@@ -383,7 +384,7 @@
+ 
+     public static DataField getRandomDataField() {
+         DataField toReturn = new DataField();
+-        toReturn.setName(FieldName.create(RandomStringUtils.random(6, true, false)));
++        toReturn.setName(RandomStringUtils.random(6, true, false));
+         toReturn.setDataType(getRandomDataType());
+         toReturn.setOpType(getRandomOpType());
+         IntStream.range(0, 3).forEach(i -> {
+@@ -410,7 +411,7 @@
+ 
+     public static MiningField getRandomMiningField() {
+         Random random = new Random();
+-        MiningField toReturn = new MiningField(FieldName.create(RandomStringUtils.random(6, true, false)));
++        MiningField toReturn = new MiningField(RandomStringUtils.random(6, true, false));
+         toReturn.setInvalidValueTreatment(getRandomInvalidValueTreatmentMethod());
+         toReturn.setMissingValueTreatment(getRandomMissingValueTreatmentMethod());
+         toReturn.setOutlierTreatment(getRandomOutlierTreatmentMethod());
+@@ -433,13 +434,13 @@
+     }
+ 
+     public static OutputField getRandomOutputField() {
+-        FieldName fieldName = FieldName.create(RandomStringUtils.random(6, true, false));
++        String fieldName = RandomStringUtils.random(6, true, false);
+         OutputField toReturn = new OutputField();
+         toReturn.setName(fieldName);
+         toReturn.setOpType(getRandomOpType());
+         toReturn.setDataType(getRandomDataType());
+         toReturn.setValue(getRandomValue(toReturn.getDataType()));
+-        fieldName = FieldName.create(RandomStringUtils.random(6, true, false));
++        fieldName = RandomStringUtils.random(6, true, false);
+         toReturn.setTargetField(fieldName);
+         toReturn.setResultFeature(getRandomResultFeature());
+         toReturn.setExpression(getRandomConstant());
+@@ -449,7 +450,7 @@
+     public static Target getRandomTarget() {
+         Random random = new Random();
+         Target toReturn = new Target();
+-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
++        toReturn.setField(RandomStringUtils.random(6, true, false));
+         toReturn.setOpType(getRandomOpType());
+         toReturn.setMax(random.nextInt(234));
+         toReturn.setMin(random.nextInt(23));
+@@ -473,7 +474,7 @@
+ 
+     public static FieldColumnPair getRandomFieldColumnPair() {
+         FieldColumnPair toReturn = new FieldColumnPair();
+-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
++        toReturn.setField(RandomStringUtils.random(6, true, false));
+         toReturn.setColumn(RandomStringUtils.random(6, true, false));
+         return toReturn;
+     }
+@@ -490,7 +491,7 @@
+         Random random = new Random();
+         ClusteringField toReturn = new ClusteringField();
+         toReturn.setCenterField(getRandomClusteringFieldCenterField());
+-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
++        toReturn.setField(RandomStringUtils.random(6, true, false));
+         toReturn.setCompareFunction(getRandomCompareFunction());
+         toReturn.setFieldWeight(random.nextDouble());
+         toReturn.setComparisons(getRandomComparisons());
+@@ -528,7 +529,7 @@
+         Discretize toReturn = new Discretize();
+         toReturn.setDataType(getRandomDataType());
+         toReturn.setDefaultValue(RandomStringUtils.random(6, true, false));
+-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
++        toReturn.setField(RandomStringUtils.random(6, true, false));
+         toReturn.setMapMissingTo(RandomStringUtils.random(6, true, false));
+         IntStream.range(0, 3).forEach(i -> toReturn.addDiscretizeBins(getRandomDiscretizeBin()));
+         return toReturn;
+@@ -536,7 +537,7 @@
+ 
+     public static FieldRef getRandomFieldRef() {
+         FieldRef toReturn = new FieldRef();
+-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
++        toReturn.setField(RandomStringUtils.random(6, true, false));
+         toReturn.setMapMissingTo(RandomStringUtils.random(6, true, false));
+         return toReturn;
+     }
+@@ -562,7 +563,7 @@
+         double mapMissingTo = random.nextInt(100) / 10;
+         NormContinuous toReturn = new NormContinuous();
+         IntStream.range(0, 3).forEach(i -> toReturn.addLinearNorms(getRandomLinearNorm()));
+-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
++        toReturn.setField(RandomStringUtils.random(6, true, false));
+         toReturn.setOutliers(getRandomOutlierTreatmentMethod());
+         toReturn.setMapMissingTo(mapMissingTo);
+         return toReturn;
+@@ -570,7 +571,7 @@
+ 
+     public static NormDiscrete getRandomNormDiscrete() {
+         NormDiscrete toReturn = new NormDiscrete();
+-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
++        toReturn.setField(RandomStringUtils.random(6, true, false));
+         toReturn.setValue(getRandomObject(DataType.INTEGER));
+         toReturn.setMapMissingTo((Number) getRandomObject(DataType.INTEGER));
+         toReturn.setMethod(getRandomMethod());
+@@ -580,14 +581,14 @@
+     public static TextIndex getRandomTextIndex() {
+         Random random = new Random();
+         TextIndex toReturn = new TextIndex();
+-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
++        toReturn.setField(RandomStringUtils.random(6, true, false));
+         toReturn.setExpression(getRandomFieldRef());
+         toReturn.setLocalTermWeights(getRandomLocalTermWeights());
+         toReturn.setWordSeparatorCharacterRE(RandomStringUtils.random(1, true, false));
+         toReturn.setTokenize(true);
+         toReturn.setCaseSensitive(false);
+         toReturn.setMaxLevenshteinDistance(random.nextInt(10));
+-        toReturn.setTextField(FieldName.create(RandomStringUtils.random(6, true, false)));
++        toReturn.setTextField(RandomStringUtils.random(6, true, false));
+         IntStream.range(0, 3).forEach(i -> toReturn.addTextIndexNormalizations(getRandomTextIndexNormalization()));
+         return toReturn;
+     }
+@@ -600,7 +601,7 @@
+     }
+ 
+     public static ParameterField getParameterField(String fieldName) {
+-        ParameterField toReturn = new ParameterField(FieldName.create(fieldName));
++        ParameterField toReturn = new ParameterField(fieldName);
+         toReturn.setDataType(getRandomDataType());
+         toReturn.setOpType(getRandomOpType());
+         toReturn.setDisplayName("Display-" + fieldName);
+@@ -608,7 +609,7 @@
+     }
+ 
+     public static ParameterField getParameterField(String fieldName, DataType dataType) {
+-        ParameterField toReturn = new ParameterField(FieldName.create(fieldName));
++        ParameterField toReturn = new ParameterField(fieldName);
+         toReturn.setDataType(dataType);
+         return toReturn;
+     }
+@@ -635,7 +636,7 @@
+     public static SimplePredicate getSimplePredicate(final String predicateName,
+                                                      final Object value,
+                                                      final SimplePredicate.Operator operator) {
+-        FieldName fieldName = FieldName.create(predicateName);
++        String fieldName = predicateName;
+         SimplePredicate toReturn = new SimplePredicate();
+         toReturn.setField(fieldName);
+         toReturn.setOperator(operator);
+@@ -654,7 +655,7 @@
+                                                            final Array.Type arrayType,
+                                                            final List<String> values,
+                                                            final SimpleSetPredicate.BooleanOperator booleanOperator) {
+-        FieldName fieldName = FieldName.create(predicateName);
++        String fieldName = predicateName;
+         SimpleSetPredicate toReturn = new SimpleSetPredicate();
+         toReturn.setField(fieldName);
+         toReturn.setBooleanOperator(booleanOperator);
+@@ -671,7 +672,7 @@
+     }
+ 
+     public static FieldRef getFieldRef(final String fieldName) {
+-        return new FieldRef(FieldName.create(fieldName));
++        return new FieldRef(fieldName);
+     }
+ 
+     public static Object getRandomObject(DataType dataType) {
+@@ -873,7 +874,7 @@
+ 
+     public static ScoreDistribution getRandomPMMLScoreDistribution(Double probability) {
+         Random random = new Random();
+-        ScoreDistribution toReturn = new ScoreDistribution();
++        ScoreDistribution toReturn = new ComplexScoreDistribution();
+         toReturn.setValue(RandomStringUtils.random(6, true, false));
+         toReturn.setRecordCount(random.nextInt(100));
+         toReturn.setConfidence((double) random.nextInt(1) / 100);
+@@ -925,7 +926,7 @@
+     }
+ 
+     public static SimplePredicate getRandomSimplePredicate() {
+-        FieldName fieldName = FieldName.create(RandomStringUtils.random(6, true, false));
++        String fieldName = RandomStringUtils.random(6, true, false);
+         SimplePredicate toReturn = new SimplePredicate();
+         toReturn.setField(fieldName);
+         toReturn.setOperator(getRandomSimplePredicateOperator());
+@@ -945,7 +946,7 @@
+     }
+ 
+     public static SimpleSetPredicate getRandomSimpleSetPredicate() {
+-        FieldName fieldName = FieldName.create(RandomStringUtils.random(6, true, false));
++        String fieldName = RandomStringUtils.random(6, true, false);
+         SimpleSetPredicate toReturn = new SimpleSetPredicate();
+         toReturn.setField(fieldName);
+         toReturn.setBooleanOperator(getRandomSimpleSetPredicateOperator());
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/TestUtils.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/TestUtils.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/TestUtils.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/TestUtils.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/TestUtils.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -19,6 +19,8 @@
+ import java.io.IOException;
+ import java.io.InputStream;
+ 
++import javax.xml.parsers.ParserConfigurationException;
++
+ import jakarta.xml.bind.JAXBException;
+ 
+ import org.dmg.pmml.PMML;
+@@ -35,7 +37,8 @@
+      * @throws JAXBException
+      * @throws IOException
+      */
+-    public static PMML loadFromFile(String fileName) throws SAXException, JAXBException, IOException {
++    public static PMML loadFromFile(String fileName) throws SAXException, JAXBException, IOException,
++            ParserConfigurationException {
+         return loadFromInputStream(FileUtils.getFileInputStream(fileName));
+     }
+ 
+@@ -46,7 +49,8 @@
+      * @throws SAXException
+      * @throws JAXBException
+      */
+-    public static PMML loadFromSource(String xmlSource) throws SAXException, JAXBException {
++    public static PMML loadFromSource(String xmlSource) throws SAXException, JAXBException,
++            ParserConfigurationException {
+         return loadFromInputStream(new ByteArrayInputStream(xmlSource.getBytes()));
+     }
+ 
+@@ -58,7 +62,7 @@
+      * @throws JAXBException
+      * @see org.jpmml.model.PMMLUtil#unmarshal(InputStream)
+      */
+-    public static PMML loadFromInputStream(InputStream is) throws SAXException, JAXBException {
++    public static PMML loadFromInputStream(InputStream is) throws SAXException, JAXBException, ParserConfigurationException {
+         return org.jpmml.model.PMMLUtil.unmarshal(is);
+     }
+ 
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/utils/ModelUtilsTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/utils/ModelUtilsTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/utils/ModelUtilsTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/utils/ModelUtilsTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/utils/ModelUtilsTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -34,7 +34,6 @@
+ import org.dmg.pmml.DataType;
+ import org.dmg.pmml.DerivedField;
+ import org.dmg.pmml.Field;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.MiningField;
+ import org.dmg.pmml.MiningSchema;
+ import org.dmg.pmml.Model;
+@@ -45,8 +44,8 @@
+ import org.dmg.pmml.Target;
+ import org.dmg.pmml.Targets;
+ import org.dmg.pmml.regression.RegressionModel;
+-import org.jpmml.model.inlinetable.InputCell;
+-import org.jpmml.model.inlinetable.OutputCell;
++import org.jpmml.model.cells.InputCell;
++import org.jpmml.model.cells.OutputCell;
+ import org.junit.jupiter.api.Test;
+ import org.kie.pmml.api.enums.DATA_TYPE;
+ import org.kie.pmml.api.enums.FIELD_USAGE_TYPE;
+@@ -196,10 +195,10 @@
+         retrieved.forEach(kiePMMLNameOpType -> {
+             assertThat(miningSchema.getMiningFields()
+                                .stream()
+-                               .anyMatch(fld -> kiePMMLNameOpType.getName().equals(fld.getName().getValue()))).isTrue();
++                               .anyMatch(fld -> kiePMMLNameOpType.getName().equals(fld.getName()))).isTrue();
+             Optional<DataField> optionalDataField = dataDictionary.getDataFields()
+                     .stream()
+-                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getName().getValue()))
++                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getName()))
+                     .findFirst();
+             assertThat(optionalDataField).isPresent();
+             DataField dataField = optionalDataField.get();
+@@ -228,7 +227,7 @@
+         retrieved.forEach(kiePMMLNameOpType -> {
+             Optional<MiningField> optionalMiningField = miningSchema.getMiningFields()
+                     .stream()
+-                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getName().getValue()))
++                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getName()))
+                     .findFirst();
+             assertThat(optionalMiningField).isPresent();
+             MiningField miningField = optionalMiningField.get();
+@@ -261,7 +260,7 @@
+         retrieved.forEach(kiePMMLNameOpType -> {
+             Optional<MiningField> optionalMiningField = miningSchema.getMiningFields()
+                     .stream()
+-                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getName().getValue()))
++                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getName()))
+                     .findFirst();
+             assertThat(optionalMiningField).isPresent();
+             MiningField miningField = optionalMiningField.get();
+@@ -294,7 +293,7 @@
+         retrieved.forEach(kiePMMLNameOpType -> {
+             Optional<Target> optionalTarget = targets.getTargets()
+                     .stream()
+-                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getField().getValue()))
++                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getField()))
+                     .findFirst();
+             assertThat(optionalTarget).isPresent();
+             Target target = optionalTarget.get();
+@@ -311,7 +310,7 @@
+         IntStream.range(0, 3).forEach(i -> {
+             final DataField dataField = getRandomDataField();
+             dataDictionary.addDataFields(dataField);
+-            final MiningField miningField = getMiningField(dataField.getName().getValue(),
++            final MiningField miningField = getMiningField(dataField.getName(),
+                                                            MiningField.UsageType.PREDICTED);
+             miningSchema.addMiningFields(miningField);
+         });
+@@ -341,7 +340,7 @@
+         IntStream.range(0, 3).forEach(i -> {
+             final DataField dataField = getRandomDataField();
+             dataDictionary.addDataFields(dataField);
+-            final MiningField miningField = getMiningField(dataField.getName().getValue(),
++            final MiningField miningField = getMiningField(dataField.getName(),
+                                                            MiningField.UsageType.ACTIVE);
+             miningSchema.addMiningFields(miningField);
+         });
+@@ -360,10 +359,10 @@
+         IntStream.range(0, 3).forEach(i -> {
+             final DataField dataField = getRandomDataField();
+             dataDictionary.addDataFields(dataField);
+-            final MiningField miningField = getMiningField(dataField.getName().getValue(),
++            final MiningField miningField = getMiningField(dataField.getName(),
+                                                            MiningField.UsageType.ACTIVE);
+             miningSchema.addMiningFields(miningField);
+-            final Target targetField = getTarget(dataField.getName().getValue(), null);
++            final Target targetField = getTarget(dataField.getName(), null);
+             targets.addTargets(targetField);
+         });
+         model.setMiningSchema(miningSchema);
+@@ -387,7 +386,7 @@
+             OP_TYPE retrieved =
+                     org.kie.pmml.compiler.api.utils.ModelUtils.getOpType(getFieldsFromDataDictionary(dataDictionary),
+                                                                          model,
+-                                                                                     dataField.getName().getValue());
++                                                                                     dataField.getName());
+             assertThat(retrieved).isNotNull();
+             OP_TYPE expected = OP_TYPE.byName(dataField.getOpType().value());
+             assertThat(retrieved).isEqualTo(expected);
+@@ -402,7 +401,7 @@
+             IntStream.range(0, 3).forEach(i -> {
+                 String fieldName = "field" + i;
+                 final DataField dataField = getRandomDataField();
+-                dataField.setName(FieldName.create(fieldName));
++                dataField.setName(fieldName);
+                 dataDictionary.addDataFields(dataField);
+             });
+             org.kie.pmml.compiler.api.utils.ModelUtils.getOpType(getFieldsFromDataDictionary(dataDictionary), model,
+@@ -427,7 +426,7 @@
+             OP_TYPE retrieved =
+                     org.kie.pmml.compiler.api.utils.ModelUtils.getOpType(getFieldsFromDataDictionary(dataDictionary),
+                                                                          model,
+-                                                                                     miningField.getName().getValue());
++                                                                                     miningField.getName());
+             assertThat(retrieved).isNotNull();
+             OP_TYPE expected = OP_TYPE.byName(miningField.getOpType().value());
+             assertThat(retrieved).isEqualTo(expected);
+@@ -443,7 +442,7 @@
+             IntStream.range(0, 3).forEach(i -> {
+                 String fieldName = "field" + i;
+                 final DataField dataField = getRandomDataField();
+-                dataField.setName(FieldName.create(fieldName));
++                dataField.setName(fieldName);
+                 dataDictionary.addDataFields(dataField);
+                 final MiningField miningField = getRandomMiningField();
+                 miningField.setName(dataField.getName());
+@@ -478,7 +477,7 @@
+             OP_TYPE retrieved =
+                     org.kie.pmml.compiler.api.utils.ModelUtils.getOpType(getFieldsFromDataDictionary(dataDictionary),
+                                                                          model,
+-                                                                                     target.getField().getValue());
++                                                                                     target.getField());
+             assertThat(retrieved).isNotNull();
+             OP_TYPE expected = OP_TYPE.byName(target.getOpType().value());
+             assertThat(retrieved).isEqualTo(expected);
+@@ -495,7 +494,7 @@
+             IntStream.range(0, 3).forEach(i -> {
+                 String fieldName = "field" + i;
+                 final DataField dataField = getRandomDataField();
+-                dataField.setName(FieldName.create(fieldName));
++                dataField.setName(fieldName);
+                 dataDictionary.addDataFields(dataField);
+                 final MiningField miningField = getRandomMiningField();
+                 miningField.setName(dataField.getName());
+@@ -529,7 +528,7 @@
+         fields.addAll(getFieldsFromDataDictionary(dataDictionary));
+         dataDictionary.getDataFields().forEach(dataField -> {
+             Optional<OP_TYPE> retrieved = org.kie.pmml.compiler.api.utils.ModelUtils.getOpTypeFromFields(fields,
+-                                                                                                         dataField.getName().getValue());
++                                                                                                         dataField.getName());
+             assertThat(retrieved).isNotNull();
+             assertThat(retrieved).isPresent();
+             OP_TYPE expected = OP_TYPE.byName(dataField.getOpType().value());
+@@ -553,7 +552,7 @@
+         miningSchema.getMiningFields().forEach(miningField -> {
+             Optional<OP_TYPE> retrieved =
+                     org.kie.pmml.compiler.api.utils.ModelUtils.getOpTypeFromMiningFields(miningSchema,
+-                                                                                         miningField.getName().getValue());
++                                                                                         miningField.getName());
+             assertThat(retrieved).isNotNull();
+             assertThat(retrieved).isPresent();
+             OP_TYPE expected = OP_TYPE.byName(miningField.getOpType().value());
+@@ -576,7 +575,7 @@
+         });
+         targets.getTargets().forEach(target -> {
+             Optional<OP_TYPE> retrieved = org.kie.pmml.compiler.api.utils.ModelUtils.getOpTypeFromTargets(targets,
+-                                                                                                          target.getField().getValue());
++                                                                                                          target.getField());
+             assertThat(retrieved).isNotNull();
+             assertThat(retrieved).isPresent();
+             OP_TYPE expected = OP_TYPE.byName(target.getOpType().value());
+@@ -595,7 +594,7 @@
+                 .stream()
+                 .map(dataField -> {
+                     DerivedField toReturn = new DerivedField();
+-                    toReturn.setName(FieldName.create("DER_" + dataField.getName().getValue()));
++                    toReturn.setName("DER_" + dataField.getName());
+                     DataType dataType = getRandomDataType();
+                     while (dataType.equals(dataField.getDataType())) {
+                         dataType = getRandomDataType();
+@@ -612,14 +611,14 @@
+                 .map(Field.class::cast)
+                 .forEach(fields::add);
+         dataDictionary.getDataFields().forEach(dataField -> {
+-            String fieldName = dataField.getName().getValue();
++            String fieldName = dataField.getName();
+             DataType retrieved = org.kie.pmml.compiler.api.utils.ModelUtils.getDataType(fields, fieldName);
+             assertThat(retrieved).isNotNull();
+             DataType expected = dataField.getDataType();
+             assertThat(retrieved).isEqualTo(expected);
+         });
+         derivedFields.forEach(derivedField -> {
+-            String fieldName = derivedField.getName().getValue();
++            String fieldName = derivedField.getName();
+             DataType retrieved = org.kie.pmml.compiler.api.utils.ModelUtils.getDataType(fields, fieldName);
+             assertThat(retrieved).isNotNull();
+             DataType expected = derivedField.getDataType();
+@@ -636,7 +635,7 @@
+         });
+         dataDictionary.getDataFields().forEach(dataField -> {
+             DATA_TYPE retrieved =
+-                    org.kie.pmml.compiler.api.utils.ModelUtils.getDATA_TYPE(getFieldsFromDataDictionary(dataDictionary), dataField.getName().getValue());
++                    org.kie.pmml.compiler.api.utils.ModelUtils.getDATA_TYPE(getFieldsFromDataDictionary(dataDictionary), dataField.getName());
+             assertThat(retrieved).isNotNull();
+             DATA_TYPE expected = DATA_TYPE.byName(dataField.getDataType().value());
+             assertThat(retrieved).isEqualTo(expected);
+@@ -650,7 +649,7 @@
+             IntStream.range(0, 3).forEach(i -> {
+                 String fieldName = "field" + i;
+                 final DataField dataField = getRandomDataField();
+-                dataField.setName(FieldName.create(fieldName));
++                dataField.setName(fieldName);
+                 dataDictionary.addDataFields(dataField);
+             });
+             org.kie.pmml.compiler.api.utils.ModelUtils.getDATA_TYPE(getFieldsFromDataDictionary(dataDictionary),
+@@ -716,12 +715,12 @@
+         org.kie.pmml.api.models.OutputField retrieved =
+                 org.kie.pmml.compiler.api.utils.ModelUtils.convertToKieOutputField(toConvert, null);
+         assertThat(retrieved).isNotNull();
+-        assertThat(retrieved.getName()).isEqualTo(toConvert.getName().getValue());
++        assertThat(retrieved.getName()).isEqualTo(toConvert.getName());
+         OP_TYPE expectedOpType = OP_TYPE.byName(toConvert.getOpType().value());
+         assertThat(retrieved.getOpType()).isEqualTo(expectedOpType);
+         DATA_TYPE expectedDataType = DATA_TYPE.byName(toConvert.getDataType().value());
+         assertThat(retrieved.getDataType()).isEqualTo(expectedDataType);
+-        assertThat(retrieved.getTargetField()).isEqualTo(toConvert.getTargetField().getValue());
++        assertThat(retrieved.getTargetField()).isEqualTo(toConvert.getTargetField());
+         RESULT_FEATURE expectedResultFeature = RESULT_FEATURE.byName(toConvert.getResultFeature().value());
+         assertThat(retrieved.getResultFeature()).isEqualTo(expectedResultFeature);
+         toConvert.setOpType(null);
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -81,7 +81,7 @@
+         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
+         final Expression dataTypeExpression = getExpressionForDataType(derivedField.getDataType());
+         final Expression opTypeExpression = getExpressionForOpType(derivedField.getOpType());
+-        builder.setArgument(0, new StringLiteralExpr(derivedField.getName().getValue()));
++        builder.setArgument(0, new StringLiteralExpr(derivedField.getName()));
+         builder.setArgument(2, dataTypeExpression);
+         builder.setArgument(3, opTypeExpression);
+         builder.setArgument(4, new NameExpr(nestedVariableName));
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -85,7 +85,7 @@
+                 .orElseThrow(() -> new KiePMMLException(String.format(MISSING_VARIABLE_INITIALIZER_TEMPLATE,
+                                                                       DISCRETIZE, toReturn)))
+                 .asObjectCreationExpr();
+-        final Expression nameExpr = new StringLiteralExpr(discretize.getField().getValue());
++        final Expression nameExpr = new StringLiteralExpr(discretize.getField());
+         final Expression mapMissingToExpr = getExpressionForObject(discretize.getMapMissingTo());
+         final Expression defaultValueExpr = getExpressionForObject(discretize.getDefaultValue());
+ 
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -68,7 +68,7 @@
+         final ObjectCreationExpr objectCreationExpr = variableDeclarator.getInitializer()
+                 .orElseThrow(() -> new KiePMMLException(String.format(MISSING_VARIABLE_INITIALIZER_TEMPLATE, FIELDCOLUMNPAIR, toReturn)))
+         .asObjectCreationExpr();
+-        objectCreationExpr.getArguments().set(0, new StringLiteralExpr(fieldColumnPair.getField().getValue()));
++        objectCreationExpr.getArguments().set(0, new StringLiteralExpr(fieldColumnPair.getField()));
+         objectCreationExpr.getArguments().set(2, new StringLiteralExpr(fieldColumnPair.getColumn()));
+         return toReturn;
+     }
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -70,7 +70,7 @@
+                                                                       FIELD_REF, toReturn)))
+                 .asObjectCreationExpr();
+ 
+-        final StringLiteralExpr nameExpr = new StringLiteralExpr(fieldRef.getField().getValue());
++        final StringLiteralExpr nameExpr = new StringLiteralExpr(fieldRef.getField());
+         final Expression mapMissingToExpr = getExpressionForObject(fieldRef.getMapMissingTo());
+         objectCreationExpr.getArguments().set(0, nameExpr);
+         objectCreationExpr.getArguments().set(2, mapMissingToExpr);
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -85,7 +85,7 @@
+                                                                       MININGFIELD, toReturn)))
+                 .asMethodCallExpr();
+         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
+-        final StringLiteralExpr nameExpr = new StringLiteralExpr(miningField.getName().getValue());
++        final StringLiteralExpr nameExpr = new StringLiteralExpr(miningField.getName());
+         Expression fieldUsageTypeExpr;
+         if (miningField.getUsageType() != null) {
+             final FIELD_USAGE_TYPE fieldUsageType = FIELD_USAGE_TYPE.byName(miningField.getUsageType().value());
+@@ -100,8 +100,8 @@
+         } else {
+             opTypeExpr = new NullLiteralExpr();
+         }
+-        final List<Field<?>> mappedFields = getMappedFields(fields, miningField.getName().getValue());
+-        final DataType dataType = getDataType(mappedFields, miningField.getName().getValue());
++        final List<Field<?>> mappedFields = getMappedFields(fields, miningField.getName());
++        final DataType dataType = getDataType(mappedFields, miningField.getName());
+         final DATA_TYPE data_TYPE = DATA_TYPE.byName(dataType.value());
+         Expression dataTypeExpr = new NameExpr(DATA_TYPE.class.getName() + "." + data_TYPE.name());
+         Expression missingValueTreatmentMethodExpr;
+@@ -169,7 +169,7 @@
+     private static List<Field<?>> getMappedFields(final List<Field<?>> fields,
+                                                   final String fieldName) {
+         return fields.stream()
+-                .filter(fld -> Objects.equals(fieldName, fld.getName().getValue()))
++                .filter(fld -> Objects.equals(fieldName, fld.getName()))
+                 .collect(Collectors.toList());
+     }
+ 
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLModelFactoryUtils.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLModelFactoryUtils.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLModelFactoryUtils.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLModelFactoryUtils.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLModelFactoryUtils.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -611,7 +611,7 @@
+         BlockStmt body = new BlockStmt();
+         NodeList<Expression> arguments = new NodeList<>();
+         for (org.dmg.pmml.MiningField miningField : miningFields) {
+-            String miningFieldVariableName = getSanitizedVariableName(miningField.getName().getValue()).toLowerCase();
++            String miningFieldVariableName = getSanitizedVariableName(miningField.getName()).toLowerCase();
+             BlockStmt toAdd = getMiningFieldVariableDeclaration(miningFieldVariableName, miningField, fields);
+             toAdd.getStatements().forEach(body::addStatement);
+             arguments.add(new NameExpr(miningFieldVariableName));
+@@ -631,7 +631,7 @@
+         BlockStmt body = new BlockStmt();
+         NodeList<Expression> arguments = new NodeList<>();
+         for (org.dmg.pmml.OutputField outputField : outputFields) {
+-            String outputFieldVariableName = getSanitizedVariableName(outputField.getName().getValue()).toLowerCase();
++            String outputFieldVariableName = getSanitizedVariableName(outputField.getName()).toLowerCase();
+             BlockStmt toAdd = getOutputFieldVariableDeclaration(outputFieldVariableName, outputField);
+             toAdd.getStatements().forEach(body::addStatement);
+             arguments.add(new NameExpr(outputFieldVariableName));
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -77,7 +77,7 @@
+                                                                       NORM_CONTINUOUS, toReturn)))
+                 .asObjectCreationExpr();
+ 
+-        final StringLiteralExpr nameExpr = new StringLiteralExpr(normContinuous.getField().getValue());
++        final StringLiteralExpr nameExpr = new StringLiteralExpr(normContinuous.getField());
+         final OUTLIER_TREATMENT_METHOD outlierTreatmentMethod =
+                 OUTLIER_TREATMENT_METHOD.byName(normContinuous.getOutliers().value());
+         final NameExpr outlierTreatmentMethodExpr =
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -71,7 +71,7 @@
+                                                                       NORM_DISCRETE, toReturn)))
+                 .asObjectCreationExpr();
+ 
+-        final StringLiteralExpr nameExpr = new StringLiteralExpr(normDiscrete.getField().getValue());
++        final StringLiteralExpr nameExpr = new StringLiteralExpr(normDiscrete.getField());
+ 
+         final Expression mapMissingToExpr = getExpressionForObject(normDiscrete.getMapMissingTo());
+         objectCreationExpr.getArguments().set(0, nameExpr);
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLOutputFieldFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLOutputFieldFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLOutputFieldFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLOutputFieldFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLOutputFieldFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -78,10 +78,10 @@
+                 .orElseThrow(() -> new KiePMMLException(String.format(MISSING_VARIABLE_INITIALIZER_TEMPLATE, OUTPUTFIELD, toReturn)))
+                 .asMethodCallExpr();
+         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
+-        final StringLiteralExpr nameExpr = new StringLiteralExpr(outputField.getName().getValue());
++        final StringLiteralExpr nameExpr = new StringLiteralExpr(outputField.getName());
+         final RESULT_FEATURE resultFeature = RESULT_FEATURE.byName(outputField.getResultFeature().value());
+         final NameExpr resultFeatureExpr = new NameExpr(RESULT_FEATURE.class.getName() + "." + resultFeature.name());
+-        final Expression targetFieldExpr = outputField.getTargetField() != null ? getExpressionForObject(outputField.getTargetField().getValue()) : new NullLiteralExpr();
++        final Expression targetFieldExpr = outputField.getTargetField() != null ? getExpressionForObject(outputField.getTargetField()) : new NullLiteralExpr();
+         final Expression valueExpr = outputField.getValue() != null ? getExpressionForObject(outputField.getValue()) : new NullLiteralExpr();
+         final Expression dataTypeExpression = getExpressionForDataType(outputField.getDataType());
+         final Expression rankExpr = outputField.getRank() != null ? getExpressionForObject(outputField.getRank()) : new NullLiteralExpr();
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -70,7 +70,7 @@
+                 .orElseThrow(() -> new KiePMMLException(String.format(MISSING_VARIABLE_INITIALIZER_TEMPLATE, PARAMETER_FIELD, toReturn)))
+                 .asMethodCallExpr();
+         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
+-        builder.setArgument(0, new StringLiteralExpr(parameterField.getName().getValue()));
++        builder.setArgument(0, new StringLiteralExpr(parameterField.getName()));
+         final Expression dataTypeExpression = getExpressionForDataType(parameterField.getDataType());
+         final Expression opTypeExpression = getExpressionForOpType(parameterField.getOpType());
+         getChainedMethodCallExprFrom("withDataType", initializer).setArgument(0, dataTypeExpression);
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -82,9 +82,9 @@
+                 .orElseThrow(() -> new KiePMMLException(String.format(MISSING_VARIABLE_INITIALIZER_TEMPLATE, SIMPLE_PREDICATE, simplePredicateBody)))
+                 .asMethodCallExpr();
+         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
+-        builder.setArgument(0, new StringLiteralExpr(simplePredicate.getField().getValue()));
++        builder.setArgument(0, new StringLiteralExpr(simplePredicate.getField()));
+         builder.setArgument(2, operatorExpr);
+-        DataType dataType = getDataType(fields, simplePredicate.getField().getValue());
++        DataType dataType = getDataType(fields, simplePredicate.getField());
+         Object actualValue = DATA_TYPE.byName(dataType.value()).getActualValue(simplePredicate.getValue());
+         getChainedMethodCallExprFrom("withValue", initializer).setArgument(0, getExpressionForObject(actualValue));
+         simplePredicateBody.getStatements().forEach(toReturn::addStatement);
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -87,7 +87,7 @@
+                 .orElseThrow(() -> new KiePMMLException(String.format(MISSING_VARIABLE_INITIALIZER_TEMPLATE, SIMPLESET_PREDICATE, simpleSetPredicateBody)))
+                 .asMethodCallExpr();
+         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
+-        builder.setArgument(0, new StringLiteralExpr(simpleSetPredicate.getField().getValue()));
++        builder.setArgument(0, new StringLiteralExpr(simpleSetPredicate.getField()));
+         builder.setArgument(2, arrayTypeExpr);
+         builder.setArgument(3, inNotInExpr);
+         getChainedMethodCallExprFrom("asList", initializer).setArguments(arguments);
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -98,7 +98,7 @@
+                 TEXTINDEX, toReturn)))
+                 .asMethodCallExpr();
+         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
+-        final StringLiteralExpr nameExpr = new StringLiteralExpr(textIndex.getTextField().getValue());
++        final StringLiteralExpr nameExpr = new StringLiteralExpr(textIndex.getTextField());
+         final NameExpr expressionExpr = new NameExpr(expressionVariableName);
+         builder.setArgument(0, nameExpr);
+         builder.setArgument(2, expressionExpr);
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDerivedFieldInstanceFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDerivedFieldInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDerivedFieldInstanceFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDerivedFieldInstanceFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDerivedFieldInstanceFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -50,9 +50,9 @@
+     static KiePMMLDerivedField getKiePMMLDerivedField(final DerivedField derivedField,
+                                                       final List<Field<?>> fields) {
+         DataType dataType = derivedField.getDataType() != null ? derivedField.getDataType() : getDataType(fields,
+-                                                                                                          derivedField.getName().getValue());
++                                                                                                          derivedField.getName());
+         OP_TYPE opType = derivedField.getOpType() != null ? OP_TYPE.byName(derivedField.getOpType().value()) : null;
+-        return KiePMMLDerivedField.builder(derivedField.getName().getValue(),
++        return KiePMMLDerivedField.builder(derivedField.getName(),
+                                            getKiePMMLExtensions(derivedField.getExtensions()),
+                                            DATA_TYPE.byName(dataType.value()),
+                                            opType,
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDiscretizeInstanceFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDiscretizeInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDiscretizeInstanceFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDiscretizeInstanceFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDiscretizeInstanceFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -43,7 +43,7 @@
+         String defaultValue = discretize.getDefaultValue() != null ? discretize.getDefaultValue().toString() : null;
+         DATA_TYPE dataType = discretize.getDataType() != null ? DATA_TYPE.byName(discretize.getDataType().value()) :
+                 null;
+-        return new KiePMMLDiscretize(discretize.getField().getValue(),
++        return new KiePMMLDiscretize(discretize.getField(),
+                                      getKiePMMLExtensions(discretize.getExtensions()),
+                                      discretizeBins,
+                                      mapMissingTo,
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldColumnPairInstanceFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldColumnPairInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldColumnPairInstanceFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldColumnPairInstanceFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldColumnPairInstanceFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -38,7 +38,7 @@
+     }
+ 
+     static KiePMMLFieldColumnPair getKiePMMLFieldColumnPair(final FieldColumnPair fieldColumnPair) {
+-        return new KiePMMLFieldColumnPair(fieldColumnPair.getField().getValue(),
++        return new KiePMMLFieldColumnPair(fieldColumnPair.getField(),
+                                           getKiePMMLExtensions(fieldColumnPair.getExtensions()),
+                                           fieldColumnPair.getColumn());
+     }
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldRefInstanceFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldRefInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldRefInstanceFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldRefInstanceFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldRefInstanceFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -29,7 +29,7 @@
+     }
+ 
+     static KiePMMLFieldRef getKiePMMLFieldRef(final FieldRef fieldRef) {
+-        return new KiePMMLFieldRef(fieldRef.getField().getValue(),
++        return new KiePMMLFieldRef(fieldRef.getField(),
+                                    KiePMMLExtensionInstanceFactory.getKiePMMLExtensions(fieldRef.getExtensions()),
+                                    fieldRef.getMapMissingTo());
+     }
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLMiningFieldInstanceFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLMiningFieldInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLMiningFieldInstanceFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLMiningFieldInstanceFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLMiningFieldInstanceFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -42,7 +42,7 @@
+     }
+ 
+     public static KiePMMLMiningField getKiePMMLMiningField(final MiningField toConvert, final Field<?> field) {
+-        String name = toConvert.getName() != null ? toConvert.getName().getValue() : "" + toConvert.hashCode();
++        String name = toConvert.getName() != null ? toConvert.getName() : "" + toConvert.hashCode();
+         final FIELD_USAGE_TYPE fieldUsageType = toConvert.getUsageType() != null ?
+                 FIELD_USAGE_TYPE.byName(toConvert.getUsageType().value()) : null;
+         final OP_TYPE opType = toConvert.getOpType() != null ? OP_TYPE.byName(toConvert.getOpType().value()) : null;
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormContinuousInstanceFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormContinuousInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormContinuousInstanceFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormContinuousInstanceFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormContinuousInstanceFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -40,7 +40,7 @@
+         final List<KiePMMLLinearNorm> linearNorms = normContinuous.hasLinearNorms() ?
+                 getKiePMMLLinearNorms(normContinuous.getLinearNorms()) : Collections.emptyList();
+         final OUTLIER_TREATMENT_METHOD outlierTreatmentMethod = normContinuous.getOutliers() != null ? OUTLIER_TREATMENT_METHOD.byName(normContinuous.getOutliers().value()) : null;
+-        return new KiePMMLNormContinuous(normContinuous.getField().getValue(), getKiePMMLExtensions(normContinuous.getExtensions()), linearNorms, outlierTreatmentMethod, normContinuous.getMapMissingTo());
++        return new KiePMMLNormContinuous(normContinuous.getField(), getKiePMMLExtensions(normContinuous.getExtensions()), linearNorms, outlierTreatmentMethod, normContinuous.getMapMissingTo());
+     }
+ 
+ }
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormDiscreteInstanceFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormDiscreteInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormDiscreteInstanceFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormDiscreteInstanceFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormDiscreteInstanceFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -35,7 +35,7 @@
+ 
+     static KiePMMLNormDiscrete getKiePMMLNormDiscrete(final NormDiscrete normDiscrete) {
+         List<KiePMMLExtension> extensions = getKiePMMLExtensions(normDiscrete.getExtensions());
+-        return new KiePMMLNormDiscrete(normDiscrete.getField().getValue(),
++        return new KiePMMLNormDiscrete(normDiscrete.getField(),
+                                        extensions,
+                                        normDiscrete.getValue().toString(),
+                                        normDiscrete.getMapMissingTo());
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLOutputFieldInstanceFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLOutputFieldInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLOutputFieldInstanceFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLOutputFieldInstanceFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLOutputFieldInstanceFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -35,8 +35,8 @@
+     }
+ 
+     public static KiePMMLOutputField getKiePMMLOutputField(final OutputField outputField) {
+-        String name = outputField.getName() != null ? outputField.getName().getValue() : "" + outputField.hashCode();
+-        final String targetField = outputField.getTargetField() != null ? outputField.getTargetField().getValue() :
++        String name = outputField.getName() != null ? outputField.getName() : "" + outputField.hashCode();
++        final String targetField = outputField.getTargetField() != null ? outputField.getTargetField() :
+                 null;
+         final RESULT_FEATURE resultFeature = outputField.getResultFeature() != null ?
+                 RESULT_FEATURE.byName(outputField.getResultFeature().value()) : null;
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLParameterFieldInstanceFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLParameterFieldInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLParameterFieldInstanceFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLParameterFieldInstanceFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLParameterFieldInstanceFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -44,7 +44,7 @@
+         DATA_TYPE dataType = parameterField.getDataType() != null ?
+                 DATA_TYPE.byName(parameterField.getDataType().value()) : null;
+         OP_TYPE opType = parameterField.getOpType() != null ? OP_TYPE.byName(parameterField.getOpType().value()) : null;
+-        return KiePMMLParameterField.builder(parameterField.getName().getValue(),
++        return KiePMMLParameterField.builder(parameterField.getName(),
+                                              Collections.emptyList())
+                 .withDataType(dataType)
+                 .withOpType(opType)
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimplePredicateInstanceFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimplePredicateInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimplePredicateInstanceFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimplePredicateInstanceFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimplePredicateInstanceFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -41,9 +41,9 @@
+     static KiePMMLSimplePredicate getKiePMMLSimplePredicate(final SimplePredicate simplePredicate,
+                                                             final List<Field<?>> fields) {
+         final List<KiePMMLExtension> kiePMMLExtensions = getKiePMMLExtensions(simplePredicate.getExtensions());
+-        DataType dataType = getDataType(fields, simplePredicate.getField().getValue());
++        DataType dataType = getDataType(fields, simplePredicate.getField());
+         Object value = DATA_TYPE.byName(dataType.value()).getActualValue(simplePredicate.getValue());
+-        return KiePMMLSimplePredicate.builder(simplePredicate.getField().getValue(),
++        return KiePMMLSimplePredicate.builder(simplePredicate.getField(),
+                                               kiePMMLExtensions,
+                                               OPERATOR.byName(simplePredicate.getOperator().value()))
+                 .withValue(value)
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimpleSetPredicateInstanceFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimpleSetPredicateInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimpleSetPredicateInstanceFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimpleSetPredicateInstanceFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimpleSetPredicateInstanceFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -34,7 +34,7 @@
+     }
+ 
+     static KiePMMLSimpleSetPredicate getKiePMMLSimpleSetPredicate(final SimpleSetPredicate simpleSetPredicate) {
+-        return KiePMMLSimpleSetPredicate.builder(simpleSetPredicate.getField().getValue(),
++        return KiePMMLSimpleSetPredicate.builder(simpleSetPredicate.getField(),
+                                                  getKiePMMLExtensions(simpleSetPredicate.getExtensions()),
+                                                  ARRAY_TYPE.byName(simpleSetPredicate.getArray().getType().value()),
+                                                  IN_NOTIN.byName(simpleSetPredicate.getBooleanOperator().value()))
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTargetInstanceFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTargetInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTargetInstanceFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTargetInstanceFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTargetInstanceFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -42,7 +42,7 @@
+                 .map(KiePMMLTargetInstanceFactory::getKieTargetValue)
+                 .collect(Collectors.toList()) : Collections.emptyList();
+         final OP_TYPE opType = target.getOpType() != null ? OP_TYPE.byName(target.getOpType().value()) : null;
+-        final String field = target.getField() != null ? target.getField().getValue() : null;
++        final String field = target.getField() != null ? target.getField() : null;
+         final CAST_INTEGER castInteger = target.getCastInteger() != null ?
+                 CAST_INTEGER.byName(target.getCastInteger().value()) : null;
+         TargetField targetField = new TargetField(targetValues,
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTextIndexInstanceFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTextIndexInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTextIndexInstanceFactory.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTextIndexInstanceFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTextIndexInstanceFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -42,7 +42,7 @@
+                 COUNT_HITS.byName(textIndex.getCountHits().value()) : null;
+         final String wordSeparatorCharacterRE = textIndex.getWordSeparatorCharacterRE() != null ?
+                 StringEscapeUtils.escapeJava(textIndex.getWordSeparatorCharacterRE()) : null;
+-        return KiePMMLTextIndex.builder(textIndex.getTextField().getValue(),
++        return KiePMMLTextIndex.builder(textIndex.getTextField(),
+                                         getKiePMMLExtensions(textIndex.getExtensions()),
+                                         getKiePMMLExpression(textIndex.getExpression()))
+                 .withTextIndexNormalizations(getKiePMMLTextIndexNormalizations(textIndex.getTextIndexNormalizations()))
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtil.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtil.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtil.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtil.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtil.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -21,11 +21,12 @@
+ import java.util.Optional;
+ import java.util.stream.Collectors;
+ 
++import javax.xml.parsers.ParserConfigurationException;
++
+ import jakarta.xml.bind.JAXBException;
+ 
+ import org.dmg.pmml.DataField;
+ import org.dmg.pmml.DataType;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.MathContext;
+ import org.dmg.pmml.MiningField;
+ import org.dmg.pmml.MiningFunction;
+@@ -63,7 +64,7 @@
+      * @throws SAXException
+      * @throws JAXBException
+      */
+-    public static PMML load(String source) throws SAXException, JAXBException {
++    public static PMML load(String source) throws SAXException, JAXBException, ParserConfigurationException {
+         return load(new ByteArrayInputStream(source.getBytes()), "");
+     }
+ 
+@@ -74,7 +75,7 @@
+      * @throws JAXBException
+      * @see org.jpmml.model.PMMLUtil#unmarshal(InputStream)
+      */
+-    public static PMML load(final InputStream is, final String fileName) throws SAXException, JAXBException {
++    public static PMML load(final InputStream is, final String fileName) throws SAXException, JAXBException, ParserConfigurationException {
+         PMML toReturn = org.jpmml.model.PMMLUtil.unmarshal(is);
+         String cleanedFileName = fileName.contains(".") ? fileName.substring(0, fileName.indexOf('.')) : fileName;
+         List<DataField> dataFields = toReturn.getDataDictionary().getDataFields();
+@@ -163,7 +164,7 @@
+         String cleanedName = model.getModelName().replaceAll("[^A-Za-z0-9]", "");
+         String fieldName = String.format(TARGETFIELD_TEMPLATE, cleanedName);
+         DataField toReturn = new DataField();
+-        toReturn.setName(FieldName.create(fieldName));
++        toReturn.setName(fieldName);
+         toReturn.setOpType(targetOpType);
+         toReturn.setDataType(targetDataType);
+         return Optional.of(toReturn);
+@@ -335,7 +336,7 @@
+                                 .filter(targetField -> outputField.getTargetField().equals(targetField.getName()))
+                                 .findFirst()
+                                 .orElseThrow(() -> new KiePMMLException("Failed to find a target field for OutputField "
+-                                                                                + outputField.getName().getValue()));
++                                                                                + outputField.getName()));
+                     }
+                     if (referencedField == null && (outputField.getResultFeature() == null || outputField.getResultFeature().equals(ResultFeature.PREDICTED_VALUE))) { // default predictedValue
+                         referencedField = targetFields.stream()
+@@ -348,7 +349,7 @@
+                         return;
+                     }
+                     if (referencedField != null) {
+-                        FieldName targetFieldName = referencedField.getName();
++                        String targetFieldName = referencedField.getName();
+                         DataField dataField = dataFields.stream()
+                                 .filter(df -> df.getName().equals(targetFieldName))
+                                 .findFirst()
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLApplyFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLApplyFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLApplyFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLApplyFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLApplyFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -25,7 +25,6 @@
+ import com.github.javaparser.ast.stmt.Statement;
+ import org.dmg.pmml.Apply;
+ import org.dmg.pmml.Constant;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.FieldRef;
+ import org.dmg.pmml.InvalidValueTreatmentMethod;
+ import org.junit.jupiter.api.Test;
+@@ -89,9 +88,9 @@
+         InvalidValueTreatmentMethod invalidValueTreatmentMethod = InvalidValueTreatmentMethod.AS_MISSING;
+         apply.setInvalidValueTreatment(invalidValueTreatmentMethod);
+         FieldRef fieldRef1 = new FieldRef();
+-        fieldRef1.setField(FieldName.create(PARAM_1));
++        fieldRef1.setField(PARAM_1);
+         FieldRef fieldRef2 = new FieldRef();
+-        fieldRef2.setField(FieldName.create(PARAM_2));
++        fieldRef2.setField(PARAM_2);
+         apply.addExpressions(fieldRef1, fieldRef2);
+         BlockStmt retrieved =
+                 org.kie.pmml.compiler.commons.codegenfactories.KiePMMLApplyFactory.getApplyVariableDeclaration(variableName, apply);
+@@ -117,9 +116,9 @@
+         InvalidValueTreatmentMethod nestedInvalidValueTreatmentMethod = InvalidValueTreatmentMethod.AS_MISSING;
+         nestedApply.setInvalidValueTreatment(nestedInvalidValueTreatmentMethod);
+         FieldRef fieldRef1 = new FieldRef();
+-        fieldRef1.setField(FieldName.create(PARAM_1));
++        fieldRef1.setField(PARAM_1);
+         FieldRef fieldRef2 = new FieldRef();
+-        fieldRef2.setField(FieldName.create(PARAM_2));
++        fieldRef2.setField(PARAM_2);
+         nestedApply.addExpressions(fieldRef1, fieldRef2);
+         Apply apply = new Apply();
+         apply.setFunction(function);
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDefineFunctionFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDefineFunctionFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDefineFunctionFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDefineFunctionFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDefineFunctionFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -27,7 +27,6 @@
+ import org.dmg.pmml.Constant;
+ import org.dmg.pmml.DataType;
+ import org.dmg.pmml.DefineFunction;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.FieldRef;
+ import org.dmg.pmml.OpType;
+ import org.dmg.pmml.ParameterField;
+@@ -55,18 +54,18 @@
+ 
+     @Test
+     void getDefineFunctionVariableDeclaration() throws IOException {
+-        ParameterField parameterField1 = new ParameterField(FieldName.create(PARAM_1));
++        ParameterField parameterField1 = new ParameterField(PARAM_1);
+         parameterField1.setDataType(DataType.DOUBLE);
+         parameterField1.setOpType(OpType.CONTINUOUS);
+         parameterField1.setDisplayName("displayName1");
+-        ParameterField parameterField2 = new ParameterField(FieldName.create(PARAM_2));
++        ParameterField parameterField2 = new ParameterField(PARAM_2);
+         parameterField2.setDataType(DataType.DOUBLE);
+         parameterField2.setOpType(OpType.CONTINUOUS);
+         parameterField2.setDisplayName("displayName2");
+         Constant constant = new Constant();
+         constant.setValue(value1);
+         FieldRef fieldRef = new FieldRef();
+-        fieldRef.setField(FieldName.create("FIELD_REF"));
++        fieldRef.setField("FIELD_REF");
+         Apply apply = new Apply();
+         apply.setFunction("/");
+         apply.addExpressions(constant, fieldRef);
+@@ -86,16 +85,16 @@
+         String text = getFileContent(TEST_01_SOURCE);
+         Statement expected = JavaParserUtils
+                 .parseBlock(String.format(text,
+-                                          parameterField1.getName().getValue(),
++                                          parameterField1.getName(),
+                                           dataType1,
+                                           opType1,
+                                           parameterField1.getDisplayName(),
+-                                          parameterField2.getName().getValue(),
++                                          parameterField2.getName(),
+                                           dataType2,
+                                           opType2,
+                                           parameterField2.getDisplayName(),
+                                           constant.getValue(),
+-                                          fieldRef.getField().getValue(),
++                                          fieldRef.getField(),
+                                           apply.getFunction(),
+                                           apply.getInvalidValueTreatment().value(),
+                                           dataType3,
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -27,7 +27,6 @@
+ import org.dmg.pmml.Constant;
+ import org.dmg.pmml.DataType;
+ import org.dmg.pmml.DerivedField;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.FieldRef;
+ import org.dmg.pmml.OpType;
+ import org.junit.jupiter.api.Test;
+@@ -59,7 +58,7 @@
+         Constant constant = new Constant();
+         constant.setValue(value1);
+         DerivedField derivedField = new DerivedField();
+-        derivedField.setName(FieldName.create(PARAM_1));
++        derivedField.setName(PARAM_1);
+         derivedField.setDataType(DataType.DOUBLE);
+         derivedField.setOpType(OpType.CONTINUOUS);
+         derivedField.setExpression(constant);
+@@ -71,7 +70,7 @@
+         Statement expected = JavaParserUtils
+                 .parseBlock(String.format(text, constant.getValue(),
+                                           variableName,
+-                                          derivedField.getName().getValue(),
++                                          derivedField.getName(),
+                                           dataType,
+                                           opType));
+         assertThat(JavaParserUtils.equalsNode(expected, retrieved)).isTrue();
+@@ -85,9 +84,9 @@
+     void getDerivedFieldVariableDeclarationWithFieldRef() throws IOException {
+         final String variableName = "variableName";
+         FieldRef fieldRef = new FieldRef();
+-        fieldRef.setField(FieldName.create("FIELD_REF"));
++        fieldRef.setField("FIELD_REF");
+         DerivedField derivedField = new DerivedField();
+-        derivedField.setName(FieldName.create(PARAM_1));
++        derivedField.setName(PARAM_1);
+         derivedField.setDataType(DataType.DOUBLE);
+         derivedField.setOpType(OpType.CONTINUOUS);
+         derivedField.setExpression(fieldRef);
+@@ -97,9 +96,9 @@
+                 org.kie.pmml.compiler.commons.codegenfactories.KiePMMLDerivedFieldFactory.getDerivedFieldVariableDeclaration(variableName, derivedField);
+         String text = getFileContent(TEST_02_SOURCE);
+         Statement expected = JavaParserUtils
+-                .parseBlock(String.format(text, fieldRef.getField().getValue(),
++                .parseBlock(String.format(text, fieldRef.getField(),
+                                           variableName,
+-                                          derivedField.getName().getValue(),
++                                          derivedField.getName(),
+                                           dataType,
+                                           opType));
+         assertThat(JavaParserUtils.equalsNode(expected, retrieved)).isTrue();
+@@ -115,12 +114,12 @@
+         Constant constant = new Constant();
+         constant.setValue(value1);
+         FieldRef fieldRef = new FieldRef();
+-        fieldRef.setField(FieldName.create("FIELD_REF"));
++        fieldRef.setField("FIELD_REF");
+         Apply apply = new Apply();
+         apply.setFunction("/");
+         apply.addExpressions(constant, fieldRef);
+         DerivedField derivedField = new DerivedField();
+-        derivedField.setName(FieldName.create(PARAM_1));
++        derivedField.setName(PARAM_1);
+         derivedField.setDataType(DataType.DOUBLE);
+         derivedField.setOpType(OpType.CONTINUOUS);
+         derivedField.setExpression(apply);
+@@ -131,11 +130,11 @@
+         Statement expected = JavaParserUtils
+                 .parseBlock(String.format(text,
+                                           constant.getValue(),
+-                                          fieldRef.getField().getValue(),
++                                          fieldRef.getField(),
+                                           apply.getFunction(),
+                                           apply.getInvalidValueTreatment().value(),
+                                           variableName,
+-                                          derivedField.getName().getValue(),
++                                          derivedField.getName(),
+                                           dataType,
+                                           opType));
+         assertThat(JavaParserUtils.equalsNode(expected, retrieved)).isTrue();
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -26,7 +26,6 @@
+ import org.dmg.pmml.DataType;
+ import org.dmg.pmml.Discretize;
+ import org.dmg.pmml.DiscretizeBin;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.Interval;
+ import org.junit.jupiter.api.BeforeAll;
+ import org.junit.jupiter.api.Test;
+@@ -64,7 +63,7 @@
+     void getDiscretizeVariableDeclaration() throws IOException {
+         String variableName = "variableName";
+         Discretize discretize = new Discretize();
+-        discretize.setField(FieldName.create(NAME));
++        discretize.setField(NAME);
+         discretize.setDataType(dataType);
+         discretize.setMapMissingTo(MAP_MISSING_TO);
+         discretize.setDefaultValue(DEFAULTVALUE);
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -24,7 +24,6 @@
+ import com.github.javaparser.ast.stmt.BlockStmt;
+ import com.github.javaparser.ast.stmt.Statement;
+ import org.dmg.pmml.FieldColumnPair;
+-import org.dmg.pmml.FieldName;
+ import org.junit.jupiter.api.Test;
+ import org.kie.pmml.commons.model.expressions.KiePMMLFieldColumnPair;
+ import org.kie.pmml.compiler.commons.utils.JavaParserUtils;
+@@ -43,7 +42,7 @@
+         String fieldName = "fieldName";
+         String column = "column";
+         FieldColumnPair fieldColumnPair = new FieldColumnPair();
+-        fieldColumnPair.setField(FieldName.create(fieldName));
++        fieldColumnPair.setField(fieldName);
+         fieldColumnPair.setColumn(column);
+ 
+         BlockStmt retrieved = KiePMMLFieldColumnPairFactory.getFieldColumnPairVariableDeclaration(variableName,
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -23,7 +23,6 @@
+ 
+ import com.github.javaparser.ast.stmt.BlockStmt;
+ import com.github.javaparser.ast.stmt.Statement;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.FieldRef;
+ import org.junit.jupiter.api.Test;
+ import org.kie.pmml.commons.model.expressions.KiePMMLFieldRef;
+@@ -43,7 +42,7 @@
+         String fieldName = "fieldName";
+         String mapMissingTo = "mapMissingTo";
+         FieldRef fieldRef = new FieldRef();
+-        fieldRef.setField(FieldName.create(fieldName));
++        fieldRef.setField(fieldName);
+         fieldRef.setMapMissingTo(mapMissingTo);
+         BlockStmt retrieved = KiePMMLFieldRefFactory.getFieldRefVariableDeclaration(variableName, fieldRef);
+         String text = getFileContent(TEST_01_SOURCE);
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLInlineTableFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLInlineTableFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLInlineTableFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLInlineTableFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLInlineTableFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -55,7 +55,7 @@
+         DerivedField mapValued = pmmlModel.getTransformationDictionary()
+                 .getDerivedFields()
+                 .stream()
+-                .filter(derivedField -> MAPVALUED.equals(derivedField.getName().getValue()))
++                .filter(derivedField -> MAPVALUED.equals(derivedField.getName()))
+                 .findFirst()
+                 .orElseThrow(() -> new RuntimeException("Missing derived field " + MAPVALUED));
+         INLINETABLE = ((MapValues) mapValued.getExpression()).getInlineTable();
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLLocalTransformationsFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLLocalTransformationsFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLLocalTransformationsFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLLocalTransformationsFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLLocalTransformationsFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -27,7 +27,6 @@
+ import org.dmg.pmml.Constant;
+ import org.dmg.pmml.DataType;
+ import org.dmg.pmml.DerivedField;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.LocalTransformations;
+ import org.dmg.pmml.OpType;
+ import org.junit.jupiter.api.Test;
+@@ -78,7 +77,7 @@
+         Constant constant = new Constant();
+         constant.setValue(value1);
+         DerivedField toReturn = new DerivedField();
+-        toReturn.setName(FieldName.create(PARAM_2 + counter));
++        toReturn.setName(PARAM_2 + counter);
+         toReturn.setDataType(DataType.DOUBLE);
+         toReturn.setOpType(OpType.CONTINUOUS);
+         toReturn.setExpression(constant);
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMapValuesFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMapValuesFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMapValuesFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMapValuesFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMapValuesFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -56,7 +56,7 @@
+         DerivedField mapValued = pmmlModel.getTransformationDictionary()
+                 .getDerivedFields()
+                 .stream()
+-                .filter(derivedField -> MAPVALUED.equals(derivedField.getName().getValue()))
++                .filter(derivedField -> MAPVALUED.equals(derivedField.getName()))
+                 .findFirst()
+                 .orElseThrow(() -> new RuntimeException("Missing derived field " + MAPVALUED));
+         MAPVALUES = ((MapValues) mapValued.getExpression());
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -58,7 +58,7 @@
+                 DATA_TYPE.class.getName() + "." + DATA_TYPE.byName(dataField.getDataType().value()).name();
+         String text = getFileContent(TEST_01_SOURCE);
+         Statement expected = JavaParserUtils.parseBlock(String.format(text, VARIABLE_NAME,
+-                                                                      miningField.getName().getValue(),
++                                                                      miningField.getName(),
+                                                                       dataTypeString));
+         assertThat(JavaParserUtils.equalsNode(expected, retrieved)).isTrue();
+         List<Class<?>> imports = Arrays.asList(Arrays.class, Collections.class, KiePMMLInterval.class,
+@@ -80,7 +80,7 @@
+                 DATA_TYPE.class.getName() + "." + DATA_TYPE.byName(dataField.getDataType().value()).name();
+         String text = getFileContent(TEST_02_SOURCE);
+         Statement expected = JavaParserUtils.parseBlock(String.format(text, VARIABLE_NAME,
+-                                                                      miningField.getName().getValue(),
++                                                                      miningField.getName(),
+                                                                       dataTypeString,
+                                                                       dataField.getValues().get(0).getValue(),
+                                                                       dataField.getValues().get(1).getValue(),
+@@ -103,7 +103,7 @@
+                 DATA_TYPE.class.getName() + "." + DATA_TYPE.byName(dataField.getDataType().value()).name();
+         String text = getFileContent(TEST_03_SOURCE);
+         Statement expected = JavaParserUtils.parseBlock(String.format(text, VARIABLE_NAME,
+-                                                                      miningField.getName().getValue(),
++                                                                      miningField.getName(),
+                                                                       dataTypeString,
+                                                                       dataField.getValues().get(0).getValue(),
+                                                                       dataField.getValues().get(1).getValue(),
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -56,7 +56,7 @@
+                 OUTLIER_TREATMENT_METHOD.class.getName() + "." + OUTLIER_TREATMENT_METHOD.byName(normContinuous.getOutliers().value()).name();
+         String text = getFileContent(TEST_01_SOURCE);
+         Statement expected = JavaParserUtils.parseBlock(String.format(text, variableName,
+-                                                                      normContinuous.getField().getValue(),
++                                                                      normContinuous.getField(),
+                                                                       linearNorms.get(0).getOrig(),
+                                                                       linearNorms.get(0).getNorm(),
+                                                                       linearNorms.get(1).getOrig(),
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -23,7 +23,6 @@
+ 
+ import com.github.javaparser.ast.stmt.BlockStmt;
+ import com.github.javaparser.ast.stmt.Statement;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.NormDiscrete;
+ import org.junit.jupiter.api.Test;
+ import org.kie.pmml.commons.model.expressions.KiePMMLNormDiscrete;
+@@ -45,7 +44,7 @@
+         double mapMissingTo = 45.32;
+ 
+         NormDiscrete normDiscrete = new NormDiscrete();
+-        normDiscrete.setField(FieldName.create(fieldName));
++        normDiscrete.setField(fieldName);
+         normDiscrete.setValue(fieldValue);
+         normDiscrete.setMapMissingTo(mapMissingTo);
+ 
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -24,7 +24,6 @@
+ import com.github.javaparser.ast.stmt.BlockStmt;
+ import com.github.javaparser.ast.stmt.Statement;
+ import org.dmg.pmml.DataType;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.OpType;
+ import org.dmg.pmml.ParameterField;
+ import org.junit.jupiter.api.Test;
+@@ -44,7 +43,7 @@
+     @Test
+     void getParameterFieldVariableDeclaration() throws IOException {
+         String variableName = "variableName";
+-        ParameterField parameterField = new ParameterField(FieldName.create(variableName));
++        ParameterField parameterField = new ParameterField(variableName);
+         parameterField.setDataType(DataType.DOUBLE);
+         parameterField.setOpType(OpType.CONTINUOUS);
+         parameterField.setDisplayName("displayName");
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLRowFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLRowFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLRowFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLRowFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLRowFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -56,14 +56,14 @@
+         DerivedField mapValued = pmmlModel.getTransformationDictionary()
+                 .getDerivedFields()
+                 .stream()
+-                .filter(derivedField -> MAPVALUED.equals(derivedField.getName().getValue()))
++                .filter(derivedField -> MAPVALUED.equals(derivedField.getName()))
+                 .findFirst()
+                 .orElseThrow(() -> new RuntimeException("Missing derived field " + MAPVALUED));
+         MAPVALUED_ROW = ((MapValues) mapValued.getExpression()).getInlineTable().getRows().get(0);
+         DerivedField dataEncoded = pmmlModel.getTransformationDictionary()
+                 .getDerivedFields()
+                 .stream()
+-                .filter(derivedField -> DATAENCODED.equals(derivedField.getName().getValue()))
++                .filter(derivedField -> DATAENCODED.equals(derivedField.getName()))
+                 .findFirst()
+                 .orElseThrow(() -> new RuntimeException("Missing derived field " + MAPVALUED));
+         DATAENCODED_ROW = ((MapValues) dataEncoded.getExpression()).getInlineTable().getRows().get(0);
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -26,7 +26,6 @@
+ import org.dmg.pmml.DataDictionary;
+ import org.dmg.pmml.DataField;
+ import org.dmg.pmml.DataType;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.SimplePredicate;
+ import org.junit.jupiter.api.Test;
+ import org.kie.pmml.api.enums.OPERATOR;
+@@ -46,7 +45,7 @@
+     void getSimplePredicateVariableDeclaration() throws IOException {
+         String variableName = "variableName";
+         final SimplePredicate simplePredicate = new SimplePredicate();
+-        simplePredicate.setField(FieldName.create("CUSTOM_FIELD"));
++        simplePredicate.setField("CUSTOM_FIELD");
+         simplePredicate.setValue("235.435");
+         simplePredicate.setOperator(SimplePredicate.Operator.EQUAL);
+         String operatorString = OPERATOR.class.getName() + "." + OPERATOR.byName(simplePredicate.getOperator().value());
+@@ -59,7 +58,7 @@
+         BlockStmt retrieved = KiePMMLSimplePredicateFactory.getSimplePredicateVariableDeclaration(variableName, simplePredicate, getFieldsFromDataDictionary(dataDictionary));
+         String text = getFileContent(TEST_01_SOURCE);
+         Statement expected = JavaParserUtils.parseBlock(String.format(text, variableName,
+-                                                                      simplePredicate.getField().getValue(),
++                                                                      simplePredicate.getField(),
+                                                                       operatorString,
+                                                                       simplePredicate.getValue()));
+         assertThat(JavaParserUtils.equalsNode(expected, retrieved)).isTrue();
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -28,7 +28,6 @@
+ import org.dmg.pmml.DataDictionary;
+ import org.dmg.pmml.DataField;
+ import org.dmg.pmml.DataType;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.SimpleSetPredicate;
+ import org.junit.jupiter.api.Test;
+ import org.kie.pmml.api.enums.ARRAY_TYPE;
+@@ -72,7 +71,7 @@
+                                                                                                         simpleSetPredicate);
+         String text = getFileContent(TEST_01_SOURCE);
+         Statement expected = JavaParserUtils.parseBlock(String.format(text, variableName,
+-                                                                      simpleSetPredicate.getField().getValue(),
++                                                                      simpleSetPredicate.getField(),
+                                                                       arrayTypeString,
+                                                                       booleanOperatorString,
+                                                                       valuesString));
+@@ -85,7 +84,7 @@
+                                                            final SimpleSetPredicate.BooleanOperator inNotIn) {
+         Array array = getArray(arrayType, values);
+         SimpleSetPredicate toReturn = new SimpleSetPredicate();
+-        toReturn.setField(FieldName.create(SIMPLE_SET_PREDICATE_NAME));
++        toReturn.setField(SIMPLE_SET_PREDICATE_NAME);
+         toReturn.setBooleanOperator(inNotIn);
+         toReturn.setArray(array);
+         return toReturn;
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -70,7 +70,7 @@
+                                                                                       TEXTINDEX);
+         String text = getFileContent(TEST_01_SOURCE);
+         Statement expected = JavaParserUtils.parseBlock(String.format(text, variableName,
+-                                                                      TEXTINDEX.getTextField().getValue()));
++                                                                      TEXTINDEX.getTextField()));
+         assertThat(JavaParserUtils.equalsNode(expected, retrieved)).isTrue();
+         List<Class<?>> imports = Arrays.asList(Arrays.class, Collections.class, Collectors.class,
+                                                KiePMMLFieldRef.class, KiePMMLInlineTable.class,
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTransformationDictionaryFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTransformationDictionaryFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTransformationDictionaryFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTransformationDictionaryFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTransformationDictionaryFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -29,7 +29,6 @@
+ import org.dmg.pmml.DataType;
+ import org.dmg.pmml.DefineFunction;
+ import org.dmg.pmml.DerivedField;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.FieldRef;
+ import org.dmg.pmml.OpType;
+ import org.dmg.pmml.ParameterField;
+@@ -86,18 +85,18 @@
+     }
+ 
+     private DefineFunction getDefineFunction(int counter) {
+-        ParameterField parameterField1 = new ParameterField(FieldName.create(PARAM_1 + counter));
++        ParameterField parameterField1 = new ParameterField(PARAM_1 + counter);
+         parameterField1.setDataType(DataType.DOUBLE);
+         parameterField1.setOpType(OpType.CONTINUOUS);
+         parameterField1.setDisplayName("displayName1" + counter);
+-        ParameterField parameterField2 = new ParameterField(FieldName.create(PARAM_2 + counter));
++        ParameterField parameterField2 = new ParameterField(PARAM_2 + counter);
+         parameterField2.setDataType(DataType.DOUBLE);
+         parameterField2.setOpType(OpType.CONTINUOUS);
+         parameterField2.setDisplayName("displayName2" + counter);
+         Constant constant = new Constant();
+         constant.setValue(value1);
+         FieldRef fieldRef = new FieldRef();
+-        fieldRef.setField(FieldName.create("FIELD_REF" + counter));
++        fieldRef.setField("FIELD_REF" + counter);
+         Apply apply = new Apply();
+         apply.setFunction("/");
+         apply.addExpressions(constant, fieldRef);
+@@ -120,7 +119,7 @@
+         Constant constant = new Constant();
+         constant.setValue(value1);
+         DerivedField toReturn = new DerivedField();
+-        toReturn.setName(FieldName.create(PARAM_2 + counter));
++        toReturn.setName(PARAM_2 + counter);
+         toReturn.setDataType(DataType.DOUBLE);
+         toReturn.setOpType(OpType.CONTINUOUS);
+         toReturn.setExpression(constant);
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/InstanceFactoriesTestCommon.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/InstanceFactoriesTestCommon.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/InstanceFactoriesTestCommon.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/InstanceFactoriesTestCommon.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/InstanceFactoriesTestCommon.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -109,7 +109,7 @@
+         assertThat(toVerifyList).hasSameSizeAs(sourcesParameterFields);
+         sourcesParameterFields.forEach(paramSource -> {
+             Optional<KiePMMLParameterField> parameterToVerify =
+-                    toVerifyList.stream().filter(param -> param.getName().equals(paramSource.getName().getValue()))
++                    toVerifyList.stream().filter(param -> param.getName().equals(paramSource.getName()))
+                             .findFirst();
+             assertThat(parameterToVerify).isPresent();
+             commonVerifyKiePMMLParameterField(parameterToVerify.get(), paramSource);
+@@ -119,24 +119,24 @@
+     static void commonVerifyKiePMMLDerivedField(KiePMMLDerivedField toVerify,
+                                                 DerivedField source) {
+         assertThat(toVerify).isNotNull();
+-        assertThat(toVerify.getName()).isEqualTo(source.getName().getValue());
++        assertThat(toVerify.getName()).isEqualTo(source.getName());
+         DATA_TYPE expectedDataType = DATA_TYPE.byName(source.getDataType().value());
+         assertThat(toVerify.getDataType()).isEqualTo(expectedDataType);
+         OP_TYPE expectedOpType = OP_TYPE.byName(source.getOpType().value());
+         assertThat(toVerify.getOpType()).isEqualTo(expectedOpType);
+-        String expectedDisplayName = "Display-" + source.getName().getValue();
++        String expectedDisplayName = "Display-" + source.getName();
+         assertThat(toVerify.getDisplayName()).isEqualTo(expectedDisplayName);
+         commonVerifyKiePMMLExpression(toVerify.getKiePMMLExpression(), source.getExpression());
+     }
+ 
+     static void commonVerifyKiePMMLParameterField(KiePMMLParameterField toVerify, ParameterField source) {
+         assertThat(toVerify).isNotNull();
+-        assertThat(toVerify.getName()).isEqualTo(source.getName().getValue());
++        assertThat(toVerify.getName()).isEqualTo(source.getName());
+         DATA_TYPE expectedDataType = DATA_TYPE.byName(source.getDataType().value());
+         assertThat(toVerify.getDataType()).isEqualTo(expectedDataType);
+         OP_TYPE expectedOpType = OP_TYPE.byName(source.getOpType().value());
+         assertThat(toVerify.getOpType()).isEqualTo(expectedOpType);
+-        String expectedDisplayName = "Display-" + source.getName().getValue();
++        String expectedDisplayName = "Display-" + source.getName();
+         assertThat(toVerify.getDisplayName()).isEqualTo(expectedDisplayName);
+     }
+ 
+@@ -181,20 +181,20 @@
+                                                    DataField dataField) {
+         assertThat(toVerify).isNotNull();
+         Object value = DATA_TYPE.byName(dataField.getDataType().value()).getActualValue(source.getValue());
+-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
++        assertThat(toVerify.getName()).isEqualTo(source.getField());
+         assertThat(toVerify.getValue()).isEqualTo(value);
+         assertThat(toVerify.getOperator().getName()).isEqualTo(source.getOperator().value());
+     }
+ 
+     static void commonVerifyKiePMMLSimplePredicate(KiePMMLSimplePredicate toVerify, SimplePredicate source) {
+         assertThat(toVerify).isNotNull();
+-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
++        assertThat(toVerify.getName()).isEqualTo(source.getField());
+         assertThat(toVerify.getOperator().getName()).isEqualTo(source.getOperator().value());
+     }
+ 
+     static void commonVerifyKiePMMLSimpleSetPredicate(KiePMMLSimpleSetPredicate toVerify, SimpleSetPredicate source) {
+         assertThat(toVerify).isNotNull();
+-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
++        assertThat(toVerify.getName()).isEqualTo(source.getField());
+         Array array = source.getArray();
+         assertThat(toVerify.getArrayType().getName()).isEqualTo(array.getType().value());
+         assertThat(toVerify.getInNotIn().getName()).isEqualTo(source.getBooleanOperator().value());
+@@ -273,7 +273,7 @@
+ 
+     static void commonVerifyKiePMMLDiscretize(KiePMMLDiscretize toVerify, Discretize source) {
+         assertThat(toVerify).isNotNull();
+-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
++        assertThat(toVerify.getName()).isEqualTo(source.getField());
+         assertThat(toVerify.getMapMissingTo()).isEqualTo(source.getMapMissingTo());
+         assertThat(toVerify.getDefaultValue()).isEqualTo(source.getDefaultValue());
+         assertThat(toVerify.getDataType().getName()).isEqualTo(source.getDataType().value());
+@@ -283,7 +283,7 @@
+ 
+     static void commonVerifyKiePMMLFieldRef(KiePMMLFieldRef toVerify, FieldRef source) {
+         assertThat(toVerify).isNotNull();
+-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
++        assertThat(toVerify.getName()).isEqualTo(source.getField());
+         assertThat(toVerify.getMapMissingTo()).isEqualTo(source.getMapMissingTo());
+     }
+ 
+@@ -311,7 +311,7 @@
+ 
+     static void commonVerifyKiePMMLNormDiscrete(KiePMMLNormDiscrete toVerify, NormDiscrete source) {
+         assertThat(toVerify).isNotNull();
+-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
++        assertThat(toVerify.getName()).isEqualTo(source.getField());
+         assertThat(toVerify.getMapMissingTo()).isEqualTo(source.getMapMissingTo());
+         assertThat(toVerify.getValue()).isEqualTo(source.getValue().toString());
+     }
+@@ -347,7 +347,7 @@
+ 
+     static void commonVerifyKiePMMLFieldColumnPair(KiePMMLFieldColumnPair toVerify, FieldColumnPair source) {
+         assertThat(toVerify).isNotNull();
+-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
++        assertThat(toVerify.getName()).isEqualTo(source.getField());
+         assertThat(toVerify.getColumn()).isEqualTo(source.getColumn());
+     }
+ 
+@@ -366,7 +366,7 @@
+ 
+     static void commonVerifyKiePMMLMiningField(KiePMMLMiningField toVerify, MiningField source, DataField dataField) {
+         assertThat(toVerify).isNotNull();
+-        assertThat(toVerify.getName()).isEqualTo(source.getName().getValue());
++        assertThat(toVerify.getName()).isEqualTo(source.getName());
+         assertThat(toVerify.getOpType().getName()).isEqualTo(source.getOpType().value());
+         assertThat(toVerify.getFieldUsageType().getName()).isEqualTo(source.getUsageType().value());
+         assertThat(toVerify.getInvalidValueTreatmentMethod().getName()).isEqualTo(source.getInvalidValueTreatment().value());
+@@ -380,10 +380,10 @@
+ 
+     static void commonVerifyKiePMMLOutputField(KiePMMLOutputField toVerify, OutputField source) {
+         assertThat(toVerify).isNotNull();
+-        assertThat(toVerify.getName()).isEqualTo(source.getName().getValue());
++        assertThat(toVerify.getName()).isEqualTo(source.getName());
+         assertThat(toVerify.getValue()).isEqualTo(source.getValue());
+         assertThat(toVerify.getDataType().getName()).isEqualTo(source.getDataType().value());
+-        assertThat(toVerify.getTargetField().get()).isEqualTo(source.getTargetField().getValue());
++        assertThat(toVerify.getTargetField().get()).isEqualTo(source.getTargetField());
+         assertThat(toVerify.getResultFeature().getName()).isEqualTo(source.getResultFeature().value());
+         assertThat(toVerify.getRank()).isEqualTo(source.getRank());
+         assertThat(toVerify.getValue()).isEqualTo(source.getValue());
+@@ -395,7 +395,7 @@
+         assertThat(source.getTargetValues()).hasSameSizeAs(toVerify.getTargetValues());
+         OP_TYPE expectedOpType = OP_TYPE.byName(source.getOpType().value());
+         assertThat(toVerify.getOpType()).isEqualTo(expectedOpType);
+-        assertThat(toVerify.getField()).isEqualTo(source.getField().getValue());
++        assertThat(toVerify.getField()).isEqualTo(source.getField());
+         CAST_INTEGER expectedCastInteger = CAST_INTEGER.byName(source.getCastInteger().value());
+         assertThat(toVerify.getCastInteger()).isEqualTo(expectedCastInteger);
+         assertThat(toVerify.getMin()).isCloseTo(source.getMin().doubleValue(), Offset.offset(0.0));
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLLocalTransformationsInstanceFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLLocalTransformationsInstanceFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLLocalTransformationsInstanceFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLLocalTransformationsInstanceFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLLocalTransformationsInstanceFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -44,7 +44,7 @@
+         assertThat(derivedFieldsToVerify).hasSameSizeAs(derivedFields);
+         derivedFields.forEach(derivedFieldSource -> {
+             Optional<KiePMMLDerivedField> derivedFieldToVerify =
+-                    derivedFieldsToVerify.stream().filter(param -> param.getName().equals(derivedFieldSource.getName().getValue()))
++                    derivedFieldsToVerify.stream().filter(param -> param.getName().equals(derivedFieldSource.getName()))
+                             .findFirst();
+             assertThat(derivedFieldToVerify).isPresent();
+             commonVerifyKiePMMLDerivedField(derivedFieldToVerify.get(), derivedFieldSource);
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLTransformationDictionaryInstanceFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLTransformationDictionaryInstanceFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLTransformationDictionaryInstanceFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLTransformationDictionaryInstanceFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLTransformationDictionaryInstanceFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -47,7 +47,7 @@
+         assertThat(derivedFieldsToVerify).hasSameSizeAs(derivedFields);
+         derivedFields.forEach(derivedFieldSource -> {
+             Optional<KiePMMLDerivedField> derivedFieldToVerify =
+-                    derivedFieldsToVerify.stream().filter(param -> param.getName().equals(derivedFieldSource.getName().getValue()))
++                    derivedFieldsToVerify.stream().filter(param -> param.getName().equals(derivedFieldSource.getName()))
+                             .findFirst();
+             assertThat(derivedFieldToVerify).isPresent();
+             commonVerifyKiePMMLDerivedField(derivedFieldToVerify.get(), derivedFieldSource);
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtilTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtilTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtilTest.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtilTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtilTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -30,12 +30,13 @@
+ import java.util.stream.Collectors;
+ import java.util.stream.IntStream;
+ 
++import javax.xml.parsers.ParserConfigurationException;
++
+ import jakarta.xml.bind.JAXBException;
+ 
+ import org.apache.commons.lang3.RandomStringUtils;
+ import org.dmg.pmml.DataField;
+ import org.dmg.pmml.DataType;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.MathContext;
+ import org.dmg.pmml.MiningField;
+ import org.dmg.pmml.MiningFunction;
+@@ -70,14 +71,14 @@
+     private static final String MINING_WITH_SAME_NESTED_MODEL_NAMES = "MiningWithSameNestedModelNames.pmml";
+ 
+     @Test
+-    void loadString() throws IOException, JAXBException, SAXException {
++    void loadString() throws IOException, JAXBException, SAXException, ParserConfigurationException {
+         commonLoadString(NO_MODELNAME_SAMPLE_NAME);
+         commonLoadString(NO_MODELNAME_NO_SEGMENTID_SAMPLE_NAME);
+         commonLoadString(MINING_WITH_SAME_NESTED_MODEL_NAMES);
+     }
+ 
+     @Test
+-    void loadFile() throws JAXBException, IOException, SAXException {
++    void loadFile() throws JAXBException, IOException, SAXException, ParserConfigurationException {
+         commonLoadFile(NO_MODELNAME_SAMPLE_NAME);
+         commonLoadFile(NO_MODELNAME_NO_SEGMENTID_SAMPLE_NAME);
+         commonLoadFile(MINING_WITH_SAME_NESTED_MODEL_NAMES);
+@@ -140,7 +141,7 @@
+         assertThat(optionalDataField).isPresent();
+         DataField retrieved = optionalDataField.get();
+         String expected = String.format(TARGETFIELD_TEMPLATE, "golfing");
+-        assertThat(retrieved.getName().getValue()).isEqualTo(expected);
++        assertThat(retrieved.getName()).isEqualTo(expected);
+     }
+ 
+     @Test
+@@ -188,23 +189,23 @@
+     @Test
+     void getTargetMiningField() {
+         final DataField dataField = new DataField();
+-        dataField.setName(FieldName.create("FIELD_NAME"));
++        dataField.setName("FIELD_NAME");
+         final MiningField retrieved = KiePMMLUtil.getTargetMiningField(dataField);
+-        assertThat(retrieved.getName().getValue()).isEqualTo(dataField.getName().getValue());
++        assertThat(retrieved.getName()).isEqualTo(dataField.getName());
+         assertThat(retrieved.getUsageType()).isEqualTo(MiningField.UsageType.TARGET);
+     }
+ 
+     @Test
+     void correctTargetFields() {
+-        final MiningField miningField = new MiningField(FieldName.create("FIELD_NAME"));
++        final MiningField miningField = new MiningField("FIELD_NAME");
+         final Targets targets = new Targets();
+         final Target namedTarget = new Target();
+         String targetName = "TARGET_NAME";
+-        namedTarget.setField(FieldName.create(targetName));
++        namedTarget.setField(targetName);
+         final Target unnamedTarget = new Target();
+         targets.addTargets(namedTarget, unnamedTarget);
+         KiePMMLUtil.correctTargetFields(miningField, targets);
+-        assertThat(namedTarget.getField().getValue()).isEqualTo(targetName);
++        assertThat(namedTarget.getField()).isEqualTo(targetName);
+         assertThat(unnamedTarget.getField()).isEqualTo(miningField.getName());
+     }
+ 
+@@ -290,7 +291,7 @@
+         List<DataField> dataFields = fieldNames.stream()
+                 .map(fieldName -> {
+                     DataField toReturn = new DataField();
+-                    toReturn.setName(FieldName.create(fieldName));
++                    toReturn.setName(fieldName);
+                     DataType dataType = DataType.values()[random.nextInt(DataType.values().length)];
+                     toReturn.setDataType(dataType);
+                     return toReturn;
+@@ -300,40 +301,40 @@
+                 .mapToObj(dataFields::get)
+                 .map(dataField -> {
+                     MiningField toReturn = new MiningField();
+-                    toReturn.setName(FieldName.create(dataField.getName().getValue()));
++                    toReturn.setName(dataField.getName());
+                     toReturn.setUsageType(MiningField.UsageType.ACTIVE);
+                     return toReturn;
+                 })
+                 .collect(Collectors.toList());
+         DataField lastDataField = dataFields.get(dataFields.size() - 1);
+         MiningField targetMiningField = new MiningField();
+-        targetMiningField.setName(FieldName.create(lastDataField.getName().getValue()));
++        targetMiningField.setName(lastDataField.getName());
+         targetMiningField.setUsageType(MiningField.UsageType.TARGET);
+         miningFields.add(targetMiningField);
+         // Following OutputFields should be populated based on "ResultFeature.PROBABILITY"
+         List<OutputField> outputFields = IntStream.range(0, 3)
+                 .mapToObj(i -> {
+                     OutputField toReturn = new OutputField();
+-                    toReturn.setName(FieldName.create(RandomStringUtils.random(6, true, false)));
++                    toReturn.setName(RandomStringUtils.random(6, true, false));
+                     toReturn.setResultFeature(ResultFeature.PROBABILITY);
+                     return toReturn;
+                 })
+                 .collect(Collectors.toList());
+         // Following OutputField should be populated based on "ResultFeature.PREDICTED_VALUE"
+         OutputField targetOutputField = new OutputField();
+-        targetOutputField.setName(FieldName.create(RandomStringUtils.random(6, true, false)));
++        targetOutputField.setName(RandomStringUtils.random(6, true, false));
+         targetOutputField.setResultFeature(ResultFeature.PREDICTED_VALUE);
+         outputFields.add(targetOutputField);
+         // Following OutputField should be populated based on "TargetField" property
+         OutputField targetingOutputField = new OutputField();
+-        targetingOutputField.setName(FieldName.create(RandomStringUtils.random(6, true, false)));
+-        targetingOutputField.setTargetField(FieldName.create(targetMiningField.getName().getValue()));
++        targetingOutputField.setName(RandomStringUtils.random(6, true, false));
++        targetingOutputField.setTargetField(targetMiningField.getName());
+         outputFields.add(targetingOutputField);
+         outputFields.forEach(outputField -> assertThat(outputField.getDataType()).isNull());
+         IntStream.range(0, 2)
+                 .forEach(i -> {
+                     OutputField toAdd = new OutputField();
+-                    toAdd.setName(FieldName.create(RandomStringUtils.random(6, true, false)));
++                    toAdd.setName(RandomStringUtils.random(6, true, false));
+                     DataType dataType = DataType.values()[random.nextInt(DataType.values().length)];
+                     toAdd.setDataType(dataType);
+                     outputFields.add(toAdd);
+@@ -368,7 +369,7 @@
+         assertThat(retrieved).isNotNull();
+         assertThat(retrieved).hasSize(1);
+         MiningField targetField = retrieved.get(0);
+-        assertThat(targetField.getName().getValue()).isEqualTo("car_location");
++        assertThat(targetField.getName()).isEqualTo("car_location");
+         assertThat(targetField.getUsageType().value()).isEqualTo("target");
+     }
+ 
+@@ -381,11 +382,11 @@
+         assertThat(retrieved).isNotNull();
+         assertThat(retrieved).hasSize(1);
+         MiningField targetField = retrieved.get(0);
+-        assertThat(targetField.getName().getValue()).isEqualTo("car_location");
++        assertThat(targetField.getName()).isEqualTo("car_location");
+         assertThat(targetField.getUsageType().value()).isEqualTo("target");
+     }
+ 
+-    private void commonLoadString(String fileName) throws IOException, JAXBException, SAXException {
++    private void commonLoadString(String fileName) throws IOException, JAXBException, SAXException, ParserConfigurationException {
+         InputStream inputStream = getFileInputStream(fileName);
+ 
+         StringBuilder textBuilder = new StringBuilder();
+@@ -400,7 +401,8 @@
+         commonValidatePMML(retrieved);
+     }
+ 
+-    private void commonLoadFile(String fileName) throws IOException, JAXBException, SAXException {
++    private void commonLoadFile(String fileName) throws IOException, JAXBException, SAXException,
++            ParserConfigurationException {
+         PMML retrieved = KiePMMLUtil.load(getFileInputStream(fileName), fileName);
+         commonValidatePMML(retrieved);
+     }
+Index: kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-core/src/test/java/org/kie/pmml/compiler/testingutils/TestingModel.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-core/src/test/java/org/kie/pmml/compiler/testingutils/TestingModel.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-core/src/test/java/org/kie/pmml/compiler/testingutils/TestingModel.java
+--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-core/src/test/java/org/kie/pmml/compiler/testingutils/TestingModel.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-core/src/test/java/org/kie/pmml/compiler/testingutils/TestingModel.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -100,6 +100,16 @@
+         return this;
+     }
+ 
++    @Override
++    public MiningFunction requireMiningFunction() {
++        return null;
++    }
++
++    @Override
++    public MiningSchema requireMiningSchema() {
++        return null;
++    }
++
+     public String getModelName() {
+         return modelName;
+     }
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/main/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/main/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/main/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactory.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/main/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/main/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -170,7 +170,7 @@
+         boolean isCenterField =
+                 clusteringField.getCenterField() == null || clusteringField.getCenterField() == ClusteringField.CenterField.TRUE;
+         KiePMMLCompareFunction kiePMMLCompareFunction = clusteringField.getCompareFunction() != null ? compareFunctionFrom(clusteringField.getCompareFunction()) : null;
+-        return new KiePMMLClusteringField(clusteringField.getField().getValue(), fieldWeight, isCenterField,
++        return new KiePMMLClusteringField(clusteringField.getField(), fieldWeight, isCenterField,
+                                           kiePMMLCompareFunction, null);
+     }
+ 
+@@ -250,7 +250,7 @@
+                 clusteringField.getCenterField() == null || clusteringField.getCenterField() == ClusteringField.CenterField.TRUE;
+ 
+         NodeList<Expression> arguments = new NodeList<>();
+-        arguments.add(literalExprFrom(clusteringField.getField().getValue()));
++        arguments.add(literalExprFrom(clusteringField.getField()));
+         arguments.add(new DoubleLiteralExpr(fieldWeight));
+         arguments.add(new BooleanLiteralExpr(isCenterField));
+         arguments.add(clusteringField.getCompareFunction() == null ? new NullLiteralExpr() :
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/test/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/test/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/test/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/test/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/test/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -35,7 +35,6 @@
+ import org.dmg.pmml.DataField;
+ import org.dmg.pmml.DataType;
+ import org.dmg.pmml.Euclidean;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.MiningField;
+ import org.dmg.pmml.MiningFunction;
+ import org.dmg.pmml.MiningSchema;
+@@ -105,7 +104,7 @@
+         IntStream.range(0, 3).forEach(i -> {
+             ClusteringField clusteringField = getRandomClusteringField();
+             clusteringFields.add(clusteringField);
+-            fieldNames.add(clusteringField.getField().getValue());
++            fieldNames.add(clusteringField.getField());
+             clusters.add(getRandomCluster());
+         });
+ 
+@@ -190,7 +189,7 @@
+     void getKiePMMLClusteringField() {
+         ClusteringField clusteringField = new ClusteringField();
+         final Random random = new Random();
+-        clusteringField.setField(FieldName.create("TEXT"));
++        clusteringField.setField("TEXT");
+         clusteringField.setFieldWeight(random.nextDouble());
+         clusteringField.setCenterField(getRandomEnum(ClusteringField.CenterField.values()));
+         clusteringField.setCompareFunction(getRandomEnum(CompareFunction.values()));
+@@ -253,7 +252,7 @@
+ 
+         String expectedCompareFunction =
+                 KiePMMLCompareFunction.class.getCanonicalName() + "." + comparisonMeasure.getCompareFunction().name();
+-        String expectedTargetField = targetMiningField.getName().getValue();
++        String expectedTargetField = targetMiningField.getName();
+ 
+         KiePMMLClusteringModelFactory.setStaticGetter(compilationDTO,
+                 modelTemplate);
+@@ -282,7 +281,7 @@
+                                                       ClusteringField clusteringField) {
+         assertThat(retrieved).isNotNull();
+         boolean isCenterField = clusteringField.getCenterField() == ClusteringField.CenterField.TRUE;
+-        assertThat(retrieved.getField()).isEqualTo(clusteringField.getField().getValue());
++        assertThat(retrieved.getField()).isEqualTo(clusteringField.getField());
+         assertThat(retrieved.getFieldWeight()).isEqualTo(clusteringField.getFieldWeight());
+         assertThat(retrieved.getCenterField()).isEqualTo(isCenterField);
+         assertThat(retrieved.getCompareFunction()).isPresent();
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactory.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -63,8 +63,8 @@
+      * @param field
+      */
+     public KiePMMLDroolsType declareType(Field field) {
+-        String generatedType = getGeneratedClassName(field.getName().getValue());
+-        String fieldName = field.getName().getValue();
++        String generatedType = getGeneratedClassName(field.getName());
++        String fieldName = field.getName();
+         String fieldType = field.getDataType().value();
+         fieldTypeMap.put(fieldName, new KiePMMLOriginalTypeGeneratedType(fieldType, generatedType));
+         return new KiePMMLDroolsType(generatedType, DATA_TYPE.byName(fieldType).getMappedClass().getSimpleName());
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactory.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -60,8 +60,8 @@
+      * @param derivedField
+      */
+     public KiePMMLDroolsType declareType(DerivedField derivedField) {
+-        String generatedType = getSanitizedClassName(derivedField.getName().getValue().toUpperCase());
+-        String fieldName = derivedField.getName().getValue();
++        String generatedType = getSanitizedClassName(derivedField.getName().toUpperCase());
++        String fieldName = derivedField.getName();
+         String fieldType = derivedField.getDataType().value();
+         fieldTypeMap.put(fieldName, new KiePMMLOriginalTypeGeneratedType(fieldType, generatedType));
+         return new KiePMMLDroolsType(generatedType, DATA_TYPE.byName(fieldType).getMappedClass().getSimpleName());
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactory.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -55,7 +55,7 @@
+             final KiePMMLReasonCodeAndValue reasonCodeAndValue,
+             final boolean isLastCharacteristic) {
+         logger.trace("declareRuleFromSimplePredicateSurrogate {} {} {} {}", agendaActivationGroup, toAccumulate, statusToSet, isLastCharacteristic);
+-        String fieldName = predicateASTFactoryData.getFieldTypeMap().get(((SimplePredicate) predicateASTFactoryData.getPredicate()).getField().getValue()).getGeneratedType();
++        String fieldName = predicateASTFactoryData.getFieldTypeMap().get(((SimplePredicate) predicateASTFactoryData.getPredicate()).getField()).getGeneratedType();
+         String surrogateCurrentRule = String.format(KiePMMLAbstractModelASTFactory.SURROGATE_RULENAME_PATTERN, predicateASTFactoryData.getCurrentRule(), fieldName);
+         final List<KiePMMLFieldOperatorValue> constraints = Collections.singletonList(KiePMMLASTFactoryUtils.getConstraintEntryFromSimplePredicates(fieldName, BOOLEAN_OPERATOR.SURROGATE, Collections.singletonList((SimplePredicate) predicateASTFactoryData.getPredicate()), predicateASTFactoryData.getFieldTypeMap()));
+         // Create "TRUE" matcher
+@@ -79,7 +79,7 @@
+             final Object result,
+             boolean isFinalLeaf) {
+         logger.trace("declareRuleFromSimplePredicateSurrogate {} {} {}", agendaActivationGroup, result, isFinalLeaf);
+-        String fieldName = predicateASTFactoryData.getFieldTypeMap().get(((SimplePredicate) predicateASTFactoryData.getPredicate()).getField().getValue()).getGeneratedType();
++        String fieldName = predicateASTFactoryData.getFieldTypeMap().get(((SimplePredicate) predicateASTFactoryData.getPredicate()).getField()).getGeneratedType();
+         String surrogateCurrentRule = String.format(KiePMMLAbstractModelASTFactory.SURROGATE_RULENAME_PATTERN, predicateASTFactoryData.getCurrentRule(), fieldName);
+         final List<KiePMMLFieldOperatorValue> constraints = Collections.singletonList(KiePMMLASTFactoryUtils.getConstraintEntryFromSimplePredicates(fieldName, BOOLEAN_OPERATOR.SURROGATE, Collections.singletonList((SimplePredicate) predicateASTFactoryData.getPredicate()), predicateASTFactoryData.getFieldTypeMap()));
+         String statusToSet = isFinalLeaf ? DONE : predicateASTFactoryData.getCurrentRule();
+@@ -215,7 +215,7 @@
+     protected KiePMMLDroolsRule.Builder getBuilderForSimplePredicate(final String statusToSet) {
+         logger.trace("getBuilderForSimplePredicate {}", statusToSet);
+         String statusConstraint = StringUtils.isEmpty(predicateASTFactoryData.getParentPath()) ? KiePMMLAbstractModelASTFactory.STATUS_NULL : String.format(STATUS_PATTERN, predicateASTFactoryData.getParentPath());
+-        String key = predicateASTFactoryData.getFieldTypeMap().get(((SimplePredicate) predicateASTFactoryData.getPredicate()).getField().getValue()).getGeneratedType();
++        String key = predicateASTFactoryData.getFieldTypeMap().get(((SimplePredicate) predicateASTFactoryData.getPredicate()).getField()).getGeneratedType();
+         OPERATOR operator = OPERATOR.byName(((SimplePredicate) predicateASTFactoryData.getPredicate()).getOperator().value());
+         Object value = KiePMMLASTFactoryUtils.getCorrectlyFormattedObject(((SimplePredicate) predicateASTFactoryData.getPredicate()), predicateASTFactoryData.getFieldTypeMap());
+         List<KiePMMLFieldOperatorValue> andConstraints = Collections.singletonList(new KiePMMLFieldOperatorValue(key, BOOLEAN_OPERATOR.AND, Collections.singletonList(new KiePMMLOperatorValue(operator, value)), null));
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateASTFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateASTFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateASTFactory.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateASTFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateASTFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -72,11 +72,11 @@
+         logger.trace("declareRuleFromSimpleSetPredicate {}", statusToSet);
+         String statusConstraint = StringUtils.isEmpty(predicateASTFactoryData.getParentPath()) ? STATUS_NULL : String.format(STATUS_PATTERN, predicateASTFactoryData.getParentPath());
+         SimpleSetPredicate simpleSetPredicate = (SimpleSetPredicate) predicateASTFactoryData.getPredicate();
+-        String key = predicateASTFactoryData.getFieldTypeMap().get(simpleSetPredicate.getField().getValue()).getGeneratedType();
++        String key = predicateASTFactoryData.getFieldTypeMap().get(simpleSetPredicate.getField()).getGeneratedType();
+         String stringValue = (String) simpleSetPredicate.getArray().getValue();
+         String[] valuesArray = stringValue.split(" ");
+         List<Object> value = Arrays.stream(valuesArray).map(rawValue -> {
+-            String originalType = predicateASTFactoryData.getFieldTypeMap().get(simpleSetPredicate.getField().getValue()).getOriginalType();
++            String originalType = predicateASTFactoryData.getFieldTypeMap().get(simpleSetPredicate.getField()).getOriginalType();
+             switch (originalType) {
+                 case "string":
+                     return "\"" + rawValue + "\"";
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtils.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtils.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtils.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtils.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtils.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -55,7 +55,7 @@
+         }
+         final Map<String, List<SimplePredicate>> predicatesByField = simplePredicates.stream()
+                 .map(child -> (SimplePredicate) child)
+-                .collect(groupingBy(child -> fieldTypeMap.get(child.getField().getValue()).getGeneratedType()));
++                .collect(groupingBy(child -> fieldTypeMap.get(child.getField()).getGeneratedType()));
+         final List<KiePMMLFieldOperatorValue> toReturn = new LinkedList<>();
+         populateKiePMMLFieldOperatorValueListWithSimplePredicates(toReturn, compoundPredicate.getBooleanOperator(), predicatesByField, fieldTypeMap);
+         final List<CompoundPredicate> compoundPredicates = compoundPredicate.getPredicates().stream()
+@@ -113,7 +113,7 @@
+                 .filter(predicate -> predicate instanceof SimplePredicate)
+                 .map(predicate -> {
+                     SimplePredicate simplePredicate = (SimplePredicate) predicate;
+-                    String fieldName = fieldTypeMap.get(simplePredicate.getField().getValue()).getGeneratedType();
++                    String fieldName = fieldTypeMap.get(simplePredicate.getField()).getGeneratedType();
+                     OPERATOR operator = OPERATOR.byName(simplePredicate.getOperator().value());
+                     Object value = getCorrectlyFormattedObject(simplePredicate, fieldTypeMap);
+                     return new KiePMMLFieldOperatorValue(fieldName, null, Collections.singletonList(new KiePMMLOperatorValue(operator, value)), null);
+@@ -121,7 +121,7 @@
+     }
+ 
+     public static Object getCorrectlyFormattedObject(final SimplePredicate simplePredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {
+-        DATA_TYPE dataType = DATA_TYPE.byName(fieldTypeMap.get(simplePredicate.getField().getValue()).getOriginalType());
++        DATA_TYPE dataType = DATA_TYPE.byName(fieldTypeMap.get(simplePredicate.getField()).getOriginalType());
+         return getCorrectlyFormattedResult(simplePredicate.getValue(), dataType);
+     }
+ 
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLCompoundPredicateASTFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLCompoundPredicateASTFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLCompoundPredicateASTFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLCompoundPredicateASTFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLCompoundPredicateASTFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -170,7 +170,7 @@
+                         .findFirst();
+                 if (fieldName.isPresent()) {
+                     SimplePredicate mappedPredicate = predicates.stream()
+-                            .filter(pred -> fieldName.get().equals(pred.getField().getValue()))
++                            .filter(pred -> fieldName.get().equals(pred.getField()))
+                             .findFirst()
+                             .orElse(null);
+                     assertThat(mappedPredicate).isNotNull();
+@@ -235,7 +235,7 @@
+                         .findFirst();
+                 if (fieldName.isPresent()) {
+                     SimplePredicate mappedPredicate = predicates.stream()
+-                            .filter(pred -> fieldName.get().equals(pred.getField().getValue())).findFirst().orElse(null);
++                            .filter(pred -> fieldName.get().equals(pred.getField())).findFirst().orElse(null);
+                     assertThat(mappedPredicate).isNotNull();
+                     assertThat(retrieved.getStatusConstraint()).isNull();
+                     assertThat(retrieved.getActivationGroup()).isEqualTo(agendaActivationGroup);
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -40,7 +40,8 @@
+     @Test
+     void declareTypes() {
+         List<DataField> dataFields = Arrays.asList(getTypeDataField(), getDottedTypeDataField(), getTypeDataField(), getDottedTypeDataField());
+-        DataDictionary dataDictionary = new DataDictionary(dataFields);
++        DataDictionary dataDictionary = new DataDictionary();
++        dataDictionary.addDataFields(dataFields.toArray(new DataField[0]));
+         final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();
+         List<KiePMMLDroolsType> retrieved = KiePMMLDataDictionaryASTFactory.factory(fieldTypeMap).declareTypes(getFieldsFromDataDictionary(dataDictionary));
+         assertThat(retrieved).isNotNull();
+@@ -58,12 +59,12 @@
+     }
+ 
+     private void commonVerifyTypeDeclarationDescr(DataField dataField, Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final KiePMMLDroolsType kiePMMLDroolsType) {
+-        String expectedGeneratedType = getSanitizedClassName(dataField.getName().getValue());
++        String expectedGeneratedType = getSanitizedClassName(dataField.getName());
+         String expectedMappedOriginalType = DATA_TYPE.byName(dataField.getDataType().value()).getMappedClass().getSimpleName();
+         assertThat(kiePMMLDroolsType.getName()).startsWith(expectedGeneratedType);
+         assertThat(kiePMMLDroolsType.getType()).isEqualTo(expectedMappedOriginalType);
+-        assertThat(fieldTypeMap).containsKey(dataField.getName().getValue());
+-        KiePMMLOriginalTypeGeneratedType kiePMMLOriginalTypeGeneratedType = fieldTypeMap.get(dataField.getName().getValue());
++        assertThat(fieldTypeMap).containsKey(dataField.getName());
++        KiePMMLOriginalTypeGeneratedType kiePMMLOriginalTypeGeneratedType = fieldTypeMap.get(dataField.getName());
+         assertThat(kiePMMLOriginalTypeGeneratedType.getOriginalType()).isEqualTo(dataField.getDataType().value());
+         assertThat(kiePMMLOriginalTypeGeneratedType.getGeneratedType()).startsWith(expectedGeneratedType);
+     }
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -25,7 +25,6 @@
+ 
+ import org.dmg.pmml.DataType;
+ import org.dmg.pmml.DerivedField;
+-import org.dmg.pmml.FieldName;
+ import org.junit.jupiter.api.BeforeEach;
+ import org.junit.jupiter.api.Test;
+ import org.kie.pmml.api.enums.DATA_TYPE;
+@@ -67,7 +66,7 @@
+     }
+ 
+     private void commonValidateKiePMMLDroolsType(KiePMMLDroolsType toValidate, DerivedField derivedField) {
+-        String derivedFieldName = derivedField.getName().getValue();
++        String derivedFieldName = derivedField.getName();
+         String expectedName = getSanitizedClassName(derivedFieldName.toUpperCase());
+         assertThat(toValidate.getName()).isEqualTo(expectedName);
+         String expectedType = DATA_TYPE.byName(derivedField.getDataType().value()).getMappedClass().getSimpleName();
+@@ -80,7 +79,7 @@
+ 
+     private DerivedField getDerivedField(String fieldName) {
+         DerivedField toReturn = new DerivedField();
+-        toReturn.setName(FieldName.create(fieldName));
++        toReturn.setName(fieldName);
+         final DATA_TYPE[] values = DATA_TYPE.values();
+         int rndInt = new Random().nextInt(values.length - 1);
+         DATA_TYPE dataType = values[rndInt];
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -65,7 +65,7 @@
+         assertThat(retrieved).isNotNull();
+         String baseExpectedRule = String.format(KiePMMLAbstractModelASTFactory.SURROGATE_RULENAME_PATTERN,
+                 currentRule,
+-                fieldTypeMap.get(simplePredicate.getField().getValue()).getGeneratedType());
++                fieldTypeMap.get(simplePredicate.getField()).getGeneratedType());
+         String expectedRule = baseExpectedRule + "_TRUE";
+         assertThat(retrieved.getName()).isEqualTo(expectedRule);
+         assertThat(retrieved.getStatusToSet()).isEqualTo(DONE);
+@@ -133,7 +133,7 @@
+         assertThat(retrieved).isNotNull();
+         String baseExpectedRule = String.format(KiePMMLAbstractModelASTFactory.SURROGATE_RULENAME_PATTERN,
+                 currentRule,
+-                fieldTypeMap.get(simplePredicate.getField().getValue()).getGeneratedType());
++                fieldTypeMap.get(simplePredicate.getField()).getGeneratedType());
+         String expectedRule = baseExpectedRule + "_TRUE";
+         assertThat(retrieved.getName()).isEqualTo(expectedRule);
+         assertThat(retrieved.getStatusToSet()).isEqualTo(currentRule);
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -20,7 +20,6 @@
+ import java.util.List;
+ import java.util.StringJoiner;
+ 
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.OutputField;
+ import org.dmg.pmml.ResultFeature;
+ import org.drools.drl.ast.dsl.DescrFactory;
+@@ -164,7 +163,7 @@
+         String outputFieldName = "OUTPUTFIELDNAME";
+         Object result = "RESULT";
+         OutputField outputField = new OutputField();
+-        outputField.setName(FieldName.create(outputFieldName));
++        outputField.setName(outputFieldName);
+         outputField.setResultFeature(ResultFeature.PREDICTED_VALUE);
+         List<OutputField> outputFields = Collections.singletonList(outputField);
+         KiePMMLDroolsRule.Builder builder = KiePMMLDroolsRule.builder(ruleName, statusToSet, outputFields);
+@@ -209,7 +208,7 @@
+         String outputFieldName = "OUTPUTFIELDNAME";
+         Object result = "RESULT";
+         OutputField outputField = new OutputField();
+-        outputField.setName(FieldName.create(outputFieldName));
++        outputField.setName(outputFieldName);
+         outputField.setResultFeature(ResultFeature.PREDICTED_VALUE);
+         List<OutputField> outputFields = Collections.singletonList(outputField);
+         StringJoiner joiner = new StringJoiner("");
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/provider/DroolsModelProviderTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/provider/DroolsModelProviderTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/provider/DroolsModelProviderTest.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/provider/DroolsModelProviderTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/provider/DroolsModelProviderTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -181,7 +181,7 @@
+     private void commonVerifyTypesList(Field<?> toVerify, final List<KiePMMLDroolsType> types) {
+         assertThat(types.stream()
+                            .anyMatch(type -> {
+-                               String expectedName = getSanitizedClassName(toVerify.getName().getValue());
++                               String expectedName = getSanitizedClassName(toVerify.getName());
+                                if (!type.getName().startsWith(expectedName)) {
+                                    return false;
+                                }
+@@ -206,13 +206,13 @@
+                                           final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {
+         assertThat(fieldTypeMap.entrySet().stream()
+                            .anyMatch(entry -> {
+-                               if (!entry.getKey().equals(toVerify.getName().getValue())) {
++                               if (!entry.getKey().equals(toVerify.getName())) {
+                                    return false;
+                                }
+                                KiePMMLOriginalTypeGeneratedType value = entry.getValue();
+                                assertThat(value.getOriginalType()).isEqualTo(toVerify.getDataType().value());
+                                String expectedGeneratedType =
+-                                       getSanitizedClassName(toVerify.getName().getValue());
++                                       getSanitizedClassName(toVerify.getName());
+                                assertThat(value.getGeneratedType()).startsWith(expectedGeneratedType);
+                                return true;
+                            })).isTrue();
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtilsTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtilsTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtilsTest.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtilsTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtilsTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -195,7 +195,7 @@
+                             kiePMMLFieldOperatorValue.getKiePMMLOperatorValues().get(0);
+                     SimplePredicate simplePredicate = nestedPredicates.stream()
+                             .map(predicate -> (SimplePredicate) predicate)
+-                            .filter(predicate -> predicate.getField().getValue().equals(getOriginalPredicateName(kiePMMLFieldOperatorValue.getName())))
++                            .filter(predicate -> predicate.getField().equals(getOriginalPredicateName(kiePMMLFieldOperatorValue.getName())))
+                             .findFirst()
+                             .orElseThrow(() -> new RuntimeException("Failed to find SimplePredicate for " + kiePMMLFieldOperatorValue.getName()));
+                     commonVerifyKiePMMLOperatorValue(kiePMMLOperatorValue, simplePredicate);
+@@ -208,7 +208,7 @@
+ 
+     private void commonPopulateKiePMMLFieldOperatorValueListWithSimplePredicates(CompoundPredicate.BooleanOperator compoundBooleanOperator, BOOLEAN_OPERATOR booleanOperator) {
+         final Map<String, List<SimplePredicate>> predicatesByField = simplePredicates.stream()
+-                .collect(groupingBy(child -> fieldTypeMap.get(child.getField().getValue()).getGeneratedType()));
++                .collect(groupingBy(child -> fieldTypeMap.get(child.getField()).getGeneratedType()));
+         final List<KiePMMLFieldOperatorValue> toPopulate = new ArrayList<>();
+         KiePMMLASTFactoryUtils.populateKiePMMLFieldOperatorValueListWithSimplePredicates(toPopulate,
+                                                                                          compoundBooleanOperator,
+@@ -258,7 +258,7 @@
+     private SimplePredicate getSimplePredicate(String generatedType) {
+         String predicateName = getOriginalPredicateName(generatedType);
+         return simplePredicates.stream()
+-                .filter(simplePredicate -> simplePredicate.getField().getValue().equals(predicateName))
++                .filter(simplePredicate -> simplePredicate.getField().equals(predicateName))
+                 .findFirst()
+                 .orElseThrow(() -> new RuntimeException("Failed to find SimplePredicate for " + predicateName));
+     }
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTTestUtils.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTTestUtils.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTTestUtils.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTTestUtils.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTTestUtils.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -22,7 +22,6 @@
+ import org.dmg.pmml.DataDictionary;
+ import org.dmg.pmml.DataField;
+ import org.dmg.pmml.DataType;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.LocalTransformations;
+ import org.dmg.pmml.OpType;
+ import org.dmg.pmml.OutputField;
+@@ -67,7 +66,7 @@
+         DataField toReturn = new DataField();
+         toReturn.setOpType(OpType.CONTINUOUS);
+         toReturn.setDataType(DataType.DATE);
+-        toReturn.setName(FieldName.create("dataField"));
++        toReturn.setName("dataField");
+         return toReturn;
+     }
+ 
+@@ -75,7 +74,7 @@
+         DataField toReturn = new DataField();
+         toReturn.setOpType(OpType.CONTINUOUS);
+         toReturn.setDataType(DataType.BOOLEAN);
+-        toReturn.setName(FieldName.create("dotted.field"));
++        toReturn.setName("dotted.field");
+         return toReturn;
+     }
+ 
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLDroolsModelFactoryUtilsTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLDroolsModelFactoryUtilsTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLDroolsModelFactoryUtilsTest.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLDroolsModelFactoryUtilsTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLDroolsModelFactoryUtilsTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -42,7 +42,6 @@
+ import org.dmg.pmml.DataDictionary;
+ import org.dmg.pmml.DataField;
+ import org.dmg.pmml.DataType;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.MiningField;
+ import org.dmg.pmml.MiningFunction;
+ import org.dmg.pmml.MiningSchema;
+@@ -84,13 +83,12 @@
+     void getKiePMMLModelCompilationUnit() {
+         DataDictionary dataDictionary = new DataDictionary();
+         String targetFieldString = "target.field";
+-        FieldName targetFieldName = FieldName.create(targetFieldString);
+-        dataDictionary.addDataFields(new DataField(targetFieldName, OpType.CONTINUOUS, DataType.DOUBLE));
++        dataDictionary.addDataFields(new DataField(targetFieldString, OpType.CONTINUOUS, DataType.DOUBLE));
+         String modelName = "ModelName";
+         TreeModel model = new TreeModel();
+         model.setModelName(modelName);
+         model.setMiningFunction(MiningFunction.CLASSIFICATION);
+-        MiningField targetMiningField = new MiningField(targetFieldName);
++        MiningField targetMiningField = new MiningField(targetFieldString);
+         targetMiningField.setUsageType(MiningField.UsageType.TARGET);
+         MiningSchema miningSchema = new MiningSchema();
+         miningSchema.addMiningFields(targetMiningField);
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/test/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelCharacteristicASTFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/test/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelCharacteristicASTFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/test/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelCharacteristicASTFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/test/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelCharacteristicASTFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/test/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelCharacteristicASTFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -368,7 +368,7 @@
+         DATA_TYPE dataType = dataDictionary.getDataFields().stream().filter(dataField -> dataField.getName().equals(simplePredicate.getField()))
+                 .map(dataField -> DATA_TYPE.byName(dataField.getDataType().value()))
+                 .findFirst()
+-                .orElseThrow(() -> new RuntimeException("Failed to find DataField for " + simplePredicate.getField().getValue()));
++                .orElseThrow(() -> new RuntimeException("Failed to find DataField for " + simplePredicate.getField()));
+         return getCorrectlyFormattedResult(simplePredicate.getValue(), dataType);
+     }
+ 
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/test/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/test/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/test/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/test/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/test/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -98,7 +98,7 @@
+         assertThat(retrieved).isNotNull();
+         List<DataField> dataFields = dataDictionary.getDataFields();
+         assertThat(fieldTypeMap).hasSameSizeAs(dataFields);
+-        dataFields.forEach(dataField -> assertThat(fieldTypeMap).containsKey(dataField.getName().getValue()));
++        dataFields.forEach(dataField -> assertThat(fieldTypeMap).containsKey(dataField.getName()));
+     }
+ 
+     @Test
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/AbstractKiePMMLFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/AbstractKiePMMLFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/AbstractKiePMMLFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/AbstractKiePMMLFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/AbstractKiePMMLFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -20,6 +20,8 @@
+ import java.io.IOException;
+ import java.util.List;
+ 
++import javax.xml.parsers.ParserConfigurationException;
++
+ import jakarta.xml.bind.JAXBException;
+ 
+ import org.dmg.pmml.DataDictionary;
+@@ -54,7 +56,7 @@
+     protected static List<DerivedField> DERIVED_FIELDS;
+     protected static String targetFieldName;
+ 
+-    protected static void innerSetup() throws JAXBException, SAXException, IOException {
++    protected static void innerSetup() throws JAXBException, SAXException, IOException, ParserConfigurationException {
+         FileInputStream fis = FileUtils.getFileInputStream(SOURCE_MIXED);
+         pmml = KiePMMLUtil.load(fis, SOURCE_MIXED);
+         assertThat(pmml).isNotNull();
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -22,6 +22,8 @@
+ import java.util.List;
+ import java.util.Map;
+ 
++import javax.xml.parsers.ParserConfigurationException;
++
+ import jakarta.xml.bind.JAXBException;
+ 
+ import com.github.javaparser.ast.CompilationUnit;
+@@ -60,7 +62,7 @@
+     private static ClassOrInterfaceDeclaration MODEL_TEMPLATE;
+ 
+     @BeforeAll
+-    public static void setup() throws IOException, JAXBException, SAXException {
++    public static void setup() throws IOException, JAXBException, SAXException, ParserConfigurationException {
+         innerSetup();
+         COMPILATION_UNIT = getFromFileName(TEMPLATE_SOURCE);
+         MODEL_TEMPLATE = COMPILATION_UNIT.getClassByName(TEMPLATE_CLASS_NAME).get();
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -22,6 +22,8 @@
+ import java.util.List;
+ import java.util.Map;
+ 
++import javax.xml.parsers.ParserConfigurationException;
++
+ import jakarta.xml.bind.JAXBException;
+ 
+ import com.github.javaparser.ast.CompilationUnit;
+@@ -65,7 +67,7 @@
+     private static ClassOrInterfaceDeclaration MODEL_TEMPLATE;
+ 
+     @BeforeAll
+-    public static void setup() throws IOException, JAXBException, SAXException {
++    public static void setup() throws IOException, JAXBException, SAXException, ParserConfigurationException {
+         innerSetup();
+         COMPILATION_UNIT_BASE = getFromFileName(KIE_PMML_SEGMENT_TEMPLATE_JAVA);
+     }
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentationFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentationFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentationFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentationFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentationFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -21,6 +21,8 @@
+ import java.util.List;
+ import java.util.Map;
+ 
++import javax.xml.parsers.ParserConfigurationException;
++
+ import jakarta.xml.bind.JAXBException;
+ 
+ import org.dmg.pmml.mining.MiningModel;
+@@ -38,7 +40,7 @@
+ public class KiePMMLSegmentationFactoryTest extends AbstractKiePMMLFactoryTest {
+ 
+     @BeforeAll
+-    public static void setup() throws IOException, JAXBException, SAXException {
++    public static void setup() throws IOException, JAXBException, SAXException, ParserConfigurationException {
+         innerSetup();
+     }
+ 
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -191,7 +191,7 @@
+         if (targetFields.size() != 1) {
+             throw new KiePMMLException("Expected one target field, retrieved " + targetFields.size());
+         }
+-        if (toValidate.getTargetField() != null && !(Objects.equals(toValidate.getTargetField().getValue(),
++        if (toValidate.getTargetField() != null && !(Objects.equals(toValidate.getTargetField(),
+                                                                     targetFields.get(0).getName()))) {
+             throw new KiePMMLException(String.format("Not-matching target fields: %s %s", toValidate.getTargetField()
+                     , targetFields.get(0).getName()));
+@@ -206,7 +206,7 @@
+         return fields.stream()
+                 .filter(DataField.class::isInstance)
+                 .map(DataField.class::cast)
+-                .filter(dataField -> Objects.equals(dataField.getName().getValue(), categoricalFieldName)).mapToDouble(dataField -> dataField.getValues().size())
++                .filter(dataField -> Objects.equals(dataField.getName(), categoricalFieldName)).mapToDouble(dataField -> dataField.getValues().size())
+                 .findFirst().orElse(0) == 2;
+     }
+ 
+@@ -214,7 +214,7 @@
+         List<KiePMMLNameOpType> targetFields = getTargetFields(fields, toValidate);
+         final List<String> categoricalFields = fields.stream()
+                 .filter(dataField -> OpType.CATEGORICAL.equals(dataField.getOpType()))
+-                .map(dataField -> dataField.getName().getValue())
++                .map(dataField -> dataField.getName())
+                 .collect(Collectors.toList());
+         final List<KiePMMLNameOpType> categoricalNameTypes =
+                 targetFields.stream().filter(targetField -> categoricalFields.contains(targetField.getName())).collect(Collectors.toList());
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactory.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactory.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactory.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactory.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -203,7 +203,7 @@
+      */
+     static Map<String, SerializableFunction<Double, Double>> getNumericPredictorsMap(final List<NumericPredictor> numericPredictors) {
+         return numericPredictors.stream()
+-                .collect(Collectors.toMap(numericPredictor -> numericPredictor.getName().getValue(),
++                .collect(Collectors.toMap(numericPredictor -> numericPredictor.getField(),
+                                           KiePMMLRegressionTableFactory::getNumericPredictorEntry));
+     }
+ 
+@@ -232,7 +232,7 @@
+      */
+     static Map<String, SerializableFunction<String, Double>> getCategoricalPredictorsMap(final List<CategoricalPredictor> categoricalPredictors) {
+         final Map<String, List<CategoricalPredictor>> groupedCollectors = categoricalPredictors.stream()
+-                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField().getValue()));
++                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField()));
+         return groupedCollectors.entrySet().stream()
+                 .map(entry -> {
+                     Map<String, Double> groupedCategoricalPredictorMap =
+@@ -273,7 +273,7 @@
+         return predictorTerms.stream()
+                 .map(predictorTerm -> {
+                     int arity = predictorsArity.addAndGet(1);
+-                    String variableName = predictorTerm.getName() != null ? predictorTerm.getName().getValue() :
++                    String variableName = predictorTerm.getName() != null ? predictorTerm.getName() :
+                             "predictorTermFunction" + arity;
+                     return new AbstractMap.SimpleEntry<>(variableName,
+                                                          getPredictorTermSerializableFunction(predictorTerm));
+@@ -292,7 +292,7 @@
+         return resultMap -> {
+             final AtomicReference<Double> result = new AtomicReference<>(1.0);
+             final List<String> fieldRefs = predictorTerm.getFieldRefs().stream()
+-                    .map(fieldRef -> fieldRef.getField().getValue())
++                    .map(fieldRef -> fieldRef.getField())
+                     .collect(Collectors.toList());
+             for (Map.Entry<String, Object> entry : resultMap.entrySet()) {
+                 if (fieldRefs.contains(entry.getKey())) {
+@@ -440,7 +440,7 @@
+      */
+     static Map<String, Expression> getNumericPredictorsExpressions(final List<NumericPredictor> numericPredictors) {
+         return numericPredictors.stream()
+-                .collect(Collectors.toMap(numericPredictor -> numericPredictor.getName().getValue(),
++                .collect(Collectors.toMap(numericPredictor -> numericPredictor.getField(),
+                                           KiePMMLRegressionTableFactory::getNumericPredictorExpression));
+     }
+ 
+@@ -489,7 +489,7 @@
+      */
+     static Map<String, Expression> getCategoricalPredictorsExpressions(final List<CategoricalPredictor> categoricalPredictors, final BlockStmt body, final String variableName) {
+         final Map<String, List<CategoricalPredictor>> groupedCollectors = categoricalPredictors.stream()
+-                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField().getValue()));
++                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField()));
+         final String categoricalPredictorMapNameBase = getSanitizedVariableName(String.format("%sMap", variableName));
+         final AtomicInteger counter = new AtomicInteger();
+         return groupedCollectors.entrySet().stream()
+@@ -578,7 +578,7 @@
+         return predictorTerms.stream()
+                 .map(predictorTerm -> {
+                     int arity = predictorsArity.addAndGet(1);
+-                    String variableName = predictorTerm.getName() != null ? predictorTerm.getName().getValue() :
++                    String variableName = predictorTerm.getName() != null ? predictorTerm.getName() :
+                             "predictorTermFunction" + arity;
+                     return new AbstractMap.SimpleEntry<>(variableName,
+                                                          getPredictorTermFunction(predictorTerm));
+@@ -627,7 +627,7 @@
+                     .orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_VARIABLE_IN_BODY,
+                                                                                   "fieldRefs", body)));
+             final List<Expression> nodeList = predictorTerm.getFieldRefs().stream()
+-                    .map(fieldRef -> new StringLiteralExpr(fieldRef.getField().getValue()))
++                    .map(fieldRef -> new StringLiteralExpr(fieldRef.getField()))
+                     .collect(Collectors.toList());
+             NodeList<Expression> expressions = NodeList.nodeList(nodeList);
+             MethodCallExpr methodCallExpr = new MethodCallExpr(new NameExpr("Arrays"), "asList", expressions);
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/AbstractKiePMMLRegressionTableRegressionFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/AbstractKiePMMLRegressionTableRegressionFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/AbstractKiePMMLRegressionTableRegressionFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/AbstractKiePMMLRegressionTableRegressionFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/AbstractKiePMMLRegressionTableRegressionFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -64,8 +64,8 @@
+             IntStream.range(0, 2).forEach(j -> categoricalPredictors.add(getCategoricalPredictor("CatPred-" + i, 27.12, 3.46)));
+             numericPredictors.add(getNumericPredictor("NumPred-" + i, 2, 13.11));
+             predictorTerms.add(getPredictorTerm("PredTerm-" + i, 32.29,
+-                                                Arrays.asList(categoricalPredictors.get(0).getName().getValue(),
+-                                                              numericPredictors.get(0).getName().getValue())));
++                                                Arrays.asList(categoricalPredictors.get(0).getField(),
++                                                              numericPredictors.get(0).getField())));
+         });
+         return PMMLModelTestUtils.getRegressionTable(categoricalPredictors, numericPredictors, predictorTerms, intercept, targetCategory);
+     }
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLClassificationTableFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLClassificationTableFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLClassificationTableFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLClassificationTableFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLClassificationTableFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -28,7 +28,6 @@
+ import com.github.javaparser.ast.expr.MethodReferenceExpr;
+ import org.dmg.pmml.DataDictionary;
+ import org.dmg.pmml.DataField;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.MiningField;
+ import org.dmg.pmml.MiningSchema;
+ import org.dmg.pmml.OpType;
+@@ -88,7 +87,7 @@
+ 
+         String targetField = "targetField";
+         DataField dataField = new DataField();
+-        dataField.setName(FieldName.create(targetField));
++        dataField.setName(targetField);
+         dataField.setOpType(OpType.CATEGORICAL);
+         DataDictionary dataDictionary = new DataDictionary();
+         dataDictionary.addDataFields(dataField);
+@@ -129,7 +128,7 @@
+         boolean isBinary = regressionModel.getRegressionTables().size() == 2;
+         assertThat(retrieved.isBinary()).isEqualTo(isBinary);
+         assertThat(retrieved.isBinary()).isEqualTo(isBinary);
+-        assertThat(retrieved.getTargetField()).isEqualTo(targetMiningField.getName().getValue());
++        assertThat(retrieved.getTargetField()).isEqualTo(targetMiningField.getName());
+     }
+ 
+     @Test
+@@ -142,7 +141,7 @@
+ 
+         String targetField = "targetField";
+         DataField dataField = new DataField();
+-        dataField.setName(FieldName.create(targetField));
++        dataField.setName(targetField);
+         dataField.setOpType(OpType.CATEGORICAL);
+         DataDictionary dataDictionary = new DataDictionary();
+         dataDictionary.addDataFields(dataField);
+@@ -193,7 +192,7 @@
+ 
+         String targetField = "targetField";
+         DataField dataField = new DataField();
+-        dataField.setName(FieldName.create(targetField));
++        dataField.setName(targetField);
+         dataField.setOpType(OpType.CATEGORICAL);
+         DataDictionary dataDictionary = new DataDictionary();
+         dataDictionary.addDataFields(dataField);
+@@ -279,7 +278,7 @@
+ 
+         String targetField = "targetField";
+         DataField dataField = new DataField();
+-        dataField.setName(FieldName.create(targetField));
++        dataField.setName(targetField);
+         dataField.setOpType(OpType.CATEGORICAL);
+         DataDictionary dataDictionary = new DataDictionary();
+         dataDictionary.addDataFields(dataField);
+@@ -371,10 +370,10 @@
+ 
+     private OutputField getOutputField(String name, ResultFeature resultFeature, String targetField) {
+         OutputField toReturn = new OutputField();
+-        toReturn.setName(FieldName.create(name));
++        toReturn.setName(name);
+         toReturn.setResultFeature(resultFeature);
+         if (targetField != null) {
+-            toReturn.setTargetField(FieldName.create(targetField));
++            toReturn.setTargetField(targetField);
+         }
+         return toReturn;
+     }
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -164,7 +164,7 @@
+         assertThat(retrieved).isNotNull();
+         assertThat(retrieved.getName()).isEqualTo(regressionModel.getModelName());
+         assertThat(retrieved.getMiningFunction()).isEqualTo(MINING_FUNCTION.byName(regressionModel.getMiningFunction().value()));
+-        assertThat(retrieved.getTargetField()).isEqualTo(miningFields.get(0).getName().getValue());
++        assertThat(retrieved.getTargetField()).isEqualTo(miningFields.get(0).getName());
+         final AbstractKiePMMLTable regressionTable = retrieved.getRegressionTable();
+         assertThat(regressionTable).isNotNull();
+         assertThat(regressionTable).isInstanceOf(KiePMMLClassificationTable.class);
+@@ -225,7 +225,7 @@
+         Map<Integer, Expression> superInvocationExpressionsMap = new HashMap<>();
+         superInvocationExpressionsMap.put(0, new NameExpr(String.format("\"%s\"", regressionModel.getModelName())));
+         Map<String, Expression> assignExpressionMap = new HashMap<>();
+-        assignExpressionMap.put("targetField", new StringLiteralExpr(targetMiningField.getName().getValue()));
++        assignExpressionMap.put("targetField", new StringLiteralExpr(targetMiningField.getName()));
+         assignExpressionMap.put("miningFunction",
+                 new NameExpr(miningFunction.getClass().getName() + "." + miningFunction.name()));
+         assignExpressionMap.put("pmmlMODEL",
+@@ -258,17 +258,17 @@
+         final Map<String, SerializableFunction<Double, Double>> numericFunctionMap =
+                 regressionTable.getNumericFunctionMap();
+         for (NumericPredictor numericPredictor : originalRegressionTable.getNumericPredictors()) {
+-            assertThat(numericFunctionMap).containsKey(numericPredictor.getName().getValue());
++            assertThat(numericFunctionMap).containsKey(numericPredictor.getField());
+         }
+         final Map<String, SerializableFunction<String, Double>> categoricalFunctionMap =
+                 regressionTable.getCategoricalFunctionMap();
+         for (CategoricalPredictor categoricalPredictor : originalRegressionTable.getCategoricalPredictors()) {
+-        	assertThat(categoricalFunctionMap).containsKey(categoricalPredictor.getName().getValue());
++        	assertThat(categoricalFunctionMap).containsKey(categoricalPredictor.getField());
+         }
+         final Map<String, SerializableFunction<Map<String, Object>, Double>> predictorTermsFunctionMap =
+                 regressionTable.getPredictorTermsFunctionMap();
+         for (PredictorTerm predictorTerm : originalRegressionTable.getPredictorTerms()) {
+-        	assertThat(predictorTermsFunctionMap).containsKey(predictorTerm.getName().getValue());
++        	assertThat(predictorTermsFunctionMap).containsKey(predictorTerm.getName());
+         }
+     }
+ }
+\ No newline at end of file
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -41,7 +41,6 @@
+ import org.assertj.core.data.Offset;
+ import org.dmg.pmml.DataDictionary;
+ import org.dmg.pmml.DataField;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.MiningField;
+ import org.dmg.pmml.MiningSchema;
+ import org.dmg.pmml.OpType;
+@@ -111,7 +110,7 @@
+         regressionModel.setModelName(getGeneratedClassName("RegressionModel"));
+         String targetField = "targetField";
+         DataField dataField = new DataField();
+-        dataField.setName(FieldName.create(targetField));
++        dataField.setName(targetField);
+         dataField.setOpType(OpType.CATEGORICAL);
+         DataDictionary dataDictionary = new DataDictionary();
+         dataDictionary.addDataFields(dataField);
+@@ -154,7 +153,7 @@
+         regressionModel.setModelName(getGeneratedClassName("RegressionModel"));
+         String targetField = "targetField";
+         DataField dataField = new DataField();
+-        dataField.setName(FieldName.create(targetField));
++        dataField.setName(targetField);
+         dataField.setOpType(OpType.CATEGORICAL);
+         DataDictionary dataDictionary = new DataDictionary();
+         dataDictionary.addDataFields(dataField);
+@@ -192,7 +191,7 @@
+         regressionModel.setModelName(getGeneratedClassName("RegressionModel"));
+         String targetField = "targetField";
+         DataField dataField = new DataField();
+-        dataField.setName(FieldName.create(targetField));
++        dataField.setName(targetField);
+         dataField.setOpType(OpType.CATEGORICAL);
+         DataDictionary dataDictionary = new DataDictionary();
+         dataDictionary.addDataFields(dataField);
+@@ -231,7 +230,7 @@
+         regressionModel.setModelName(getGeneratedClassName("RegressionModel"));
+         String targetField = "targetField";
+         DataField dataField = new DataField();
+-        dataField.setName(FieldName.create(targetField));
++        dataField.setName(targetField);
+         dataField.setOpType(OpType.CATEGORICAL);
+         DataDictionary dataDictionary = new DataDictionary();
+         dataDictionary.addDataFields(dataField);
+@@ -316,7 +315,7 @@
+         Map<String, SerializableFunction<String, Double>> retrieved =
+                 KiePMMLRegressionTableFactory.getCategoricalPredictorsMap(categoricalPredictors);
+         final Map<String, List<CategoricalPredictor>> groupedCollectors = categoricalPredictors.stream()
+-                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField().getValue()));
++                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField()));
+         assertThat(retrieved).hasSameSizeAs(groupedCollectors);
+         groupedCollectors.keySet().forEach(predictName -> assertThat(retrieved).containsKey(predictName));
+     }
+@@ -355,7 +354,7 @@
+         assertThat(retrieved).hasSameSizeAs(predictorTerms);
+         IntStream.range(0, predictorTerms.size()).forEach(index -> {
+             PredictorTerm predictorTerm = predictorTerms.get(index);
+-            assertThat(retrieved).containsKey(predictorTerm.getName().getValue());
++            assertThat(retrieved).containsKey(predictorTerm.getName());
+         });
+     }
+ 
+@@ -392,7 +391,7 @@
+         regressionModel.setModelName(getGeneratedClassName("RegressionModel"));
+         String targetField = "targetField";
+         DataField dataField = new DataField();
+-        dataField.setName(FieldName.create(targetField));
++        dataField.setName(targetField);
+         dataField.setOpType(OpType.CATEGORICAL);
+         DataDictionary dataDictionary = new DataDictionary();
+         dataDictionary.addDataFields(dataField);
+@@ -531,7 +530,7 @@
+                         "variableName");
+         assertThat(retrieved).hasSize(3);
+         final Map<String, List<CategoricalPredictor>> groupedCollectors = categoricalPredictors.stream()
+-                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField().getValue()));
++                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField()));
+ 
+         groupedCollectors.values().forEach(categoricalPredictors12 -> commonEvaluateCategoryPredictors(body,
+                 categoricalPredictors12, "variableName"));
+@@ -586,7 +585,7 @@
+         assertThat(retrieved).hasSameSizeAs(predictorTerms);
+         IntStream.range(0, predictorTerms.size()).forEach(index -> {
+             PredictorTerm predictorTerm = predictorTerms.get(index);
+-            assertThat(retrieved).containsKey(predictorTerm.getName().getValue());
++            assertThat(retrieved).containsKey(predictorTerm.getName());
+         });
+     }
+ 
+@@ -607,17 +606,17 @@
+     private void commonEvaluateRegressionTable(KiePMMLRegressionTable retrieved, RegressionTable source) {
+         Map<String, SerializableFunction<Double, Double>> numericFunctionMap = retrieved.getNumericFunctionMap();
+         assertThat(numericFunctionMap).hasSameSizeAs(source.getNumericPredictors());
+-        source.getNumericPredictors().forEach(numericPredictor -> assertThat(numericFunctionMap).containsKey(numericPredictor.getName().getValue()));
++        source.getNumericPredictors().forEach(numericPredictor -> assertThat(numericFunctionMap).containsKey(numericPredictor.getField()));
+         Map<String, SerializableFunction<String, Double>> categoricalFunctionMap =
+                 retrieved.getCategoricalFunctionMap();
+         Map<String, List<CategoricalPredictor>> groupedCollectors = categoricalPredictors.stream()
+-                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField().getValue()));
++                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField()));
+         assertThat(categoricalFunctionMap).hasSameSizeAs(groupedCollectors);
+         groupedCollectors.keySet().forEach(categorical -> assertThat(categoricalFunctionMap).containsKey(categorical));
+         Map<String, SerializableFunction<Map<String, Object>, Double>> predictorTermsFunctionMap =
+                 retrieved.getPredictorTermsFunctionMap();
+         assertThat(predictorTermsFunctionMap).hasSameSizeAs(source.getPredictorTerms());
+-        source.getPredictorTerms().forEach(predictorTerm -> assertThat(predictorTermsFunctionMap).containsKey(predictorTerm.getName().getValue()));
++        source.getPredictorTerms().forEach(predictorTerm -> assertThat(predictorTermsFunctionMap).containsKey(predictorTerm.getName()));
+     }
+ 
+     private void commonEvaluateCategoryPredictors(final BlockStmt toVerify,
+Index: kie-pmml-trusty/kie-pmml-models/kie-pmml-models-scorecard/kie-pmml-models-scorecard-compiler/src/test/java/org/kie/pmml/models/scorecard/compiler/factories/KiePMMLComplexPartialScoreFactoryTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-scorecard/kie-pmml-models-scorecard-compiler/src/test/java/org/kie/pmml/models/scorecard/compiler/factories/KiePMMLComplexPartialScoreFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-scorecard/kie-pmml-models-scorecard-compiler/src/test/java/org/kie/pmml/models/scorecard/compiler/factories/KiePMMLComplexPartialScoreFactoryTest.java
+--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-scorecard/kie-pmml-models-scorecard-compiler/src/test/java/org/kie/pmml/models/scorecard/compiler/factories/KiePMMLComplexPartialScoreFactoryTest.java	(revision 5336246c7b6cc33783f261f8142ae8040af3cb58)
++++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-scorecard/kie-pmml-models-scorecard-compiler/src/test/java/org/kie/pmml/models/scorecard/compiler/factories/KiePMMLComplexPartialScoreFactoryTest.java	(revision b48c356204e663bf478230b305b2cd80532607c3)
+@@ -24,7 +24,6 @@
+ import com.github.javaparser.ast.stmt.Statement;
+ import org.dmg.pmml.Apply;
+ import org.dmg.pmml.Constant;
+-import org.dmg.pmml.FieldName;
+ import org.dmg.pmml.FieldRef;
+ import org.dmg.pmml.scorecard.ComplexPartialScore;
+ import org.junit.jupiter.api.Test;
+@@ -69,14 +68,14 @@
+     void getComplexPartialScoreVariableDeclarationWithFieldRef() throws IOException {
+         final String variableName = "variableName";
+         FieldRef fieldRef = new FieldRef();
+-        fieldRef.setField(FieldName.create("FIELD_REF"));
++        fieldRef.setField("FIELD_REF");
+         ComplexPartialScore complexPartialScore = new ComplexPartialScore();
+         complexPartialScore.setExpression(fieldRef);
+         BlockStmt retrieved =
+                 KiePMMLComplexPartialScoreFactory.getComplexPartialScoreVariableDeclaration(variableName,
+                         complexPartialScore);
+         String text = getFileContent(TEST_02_SOURCE);
+-        Statement expected = JavaParserUtils.parseBlock(String.format(text, fieldRef.getField().getValue(),
++        Statement expected = JavaParserUtils.parseBlock(String.format(text, fieldRef.getField(),
+                 variableName));
+         assertThat(retrieved).isEqualTo(expected);
+         List<Class<?>> imports = Arrays.asList(KiePMMLFieldRef.class,
+@@ -91,7 +90,7 @@
+         Constant constant = new Constant();
+         constant.setValue(value1);
+         FieldRef fieldRef = new FieldRef();
+-        fieldRef.setField(FieldName.create("FIELD_REF"));
++        fieldRef.setField("FIELD_REF");
+         Apply apply = new Apply();
+         apply.setFunction("/");
+         apply.addExpressions(constant, fieldRef);
+@@ -103,7 +102,7 @@
+         String text = getFileContent(TEST_03_SOURCE);
+         Statement expected = JavaParserUtils.parseBlock(String.format(text,
+                 constant.getValue(),
+-                fieldRef.getField().getValue(),
++                fieldRef.getField(),
+                 apply.getFunction(),
+                 apply.getInvalidValueTreatment().value(),
+                 variableName));
